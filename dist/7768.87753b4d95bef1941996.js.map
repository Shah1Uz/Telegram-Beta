{"version":3,"file":"7768.87753b4d95bef1941996.js","mappings":"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","sources":["webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/middleSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/util/payments/stripe.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/stars.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/api/stories.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/middleSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/getIsAppUpdateNeeded.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/ui/stars.ts","webpack://telegram-t/./src/global/actions/ui/reactions.ts","webpack://telegram-t/./src/global/actions/ui/stories.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/password.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/window/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/left/main/LeftSideMenuItems.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionPicker.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/middle/hooks/usePinnedMessage.ts","webpack://telegram-t/./src/components/common/PrivacySettingsNoticeModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/middle/ChatLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.module.scss?8a0f","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/MessageListBotInfo.module.scss?5cb9","webpack://telegram-t/./src/components/middle/MessageListBotInfo.tsx","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/getSingularPaidMedia.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/components/middle/message/hooks/useDetectChatLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/components/common/embedded/EmbeddedStory.tsx","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.tsx","webpack://telegram-t/./src/components/common/PeerColorWrapper.module.scss?b340","webpack://telegram-t/./src/components/middle/message/Contact.module.scss?fec1","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/FactCheck.module.scss?3842","webpack://telegram-t/./src/components/middle/message/FactCheck.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/Giveaway.module.scss?9b0c","webpack://telegram-t/./src/components/middle/message/Giveaway.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/MessageAppendix.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.module.scss?e3d6","webpack://telegram-t/./src/components/middle/message/PaidMediaOverlay.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/common/reactions/PaidReactionEmoji.tsx","webpack://telegram-t/./src/components/middle/message/reactions/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/reactions/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.module.scss?30d0","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/middle/message/Story.tsx","webpack://telegram-t/./src/components/middle/message/StoryMention.tsx","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredMessage.module.scss?13d1","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/hooks/useContainerHeight.ts","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.module.scss?cd96","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.module.scss?d7b5","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/PremiumRequiredPlaceholder.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/middle/search/MiddleSearch.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/modals/ModalContainer.tsx","webpack://telegram-t/./src/components/modals/giftcode/GiftCodeModal.async.tsx","webpack://telegram-t/./src/components/modals/boost/BoostModal.async.tsx","webpack://telegram-t/./src/components/modals/chatlist/ChatlistModal.async.tsx","webpack://telegram-t/./src/components/modals/urlAuth/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/modals/oneTimeMedia/OneTimeMediaModal.async.tsx","webpack://telegram-t/./src/components/modals/inviteViaLink/InviteViaLinkModal.async.tsx","webpack://telegram-t/./src/components/modals/attachBotInstall/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/modals/reportAd/ReportAdModal.async.tsx","webpack://telegram-t/./src/components/modals/reportModal/ReportModal.async.tsx","webpack://telegram-t/./src/components/modals/webApp/WebAppModal.async.tsx","webpack://telegram-t/./src/components/modals/collectible/CollectibleInfoModal.async.tsx","webpack://telegram-t/./src/components/modals/map/MapModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsPaymentModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/StarsBalanceModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/transaction/StarsTransactionModal.async.tsx","webpack://telegram-t/./src/components/modals/chatInvite/ChatInviteModal.async.tsx","webpack://telegram-t/./src/components/modals/paidReaction/PaidReactionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/subscription/StarsSubscriptionModal.async.tsx","webpack://telegram-t/./src/components/modals/stars/gift/StarsGiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/GiftModal.async.tsx","webpack://telegram-t/./src/components/modals/gift/recipient/GiftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/modals/gift/info/GiftInfoModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/common/gift/UserGift.module.scss?7193","webpack://telegram-t/./src/components/common/gift/UserGift.tsx","webpack://telegram-t/./src/components/common/PreviewMedia.tsx","webpack://telegram-t/./src/components/story/MediaStory.module.scss?3a87","webpack://telegram-t/./src/components/story/MediaStory.tsx","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.module.scss?692b","webpack://telegram-t/./src/components/right/statistics/BoostStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/common/AboutMonetizationModal.async.tsx","webpack://telegram-t/./src/components/common/VerificationMonetizationModal.async.tsx","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.module.scss?4abc","webpack://telegram-t/./src/components/right/statistics/MonetizationStatistics.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/StoryStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/story/StoryViewer.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiveawayModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/main/premium/StarsGiftingPickerModal.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.module.scss?a4ff","webpack://telegram-t/./src/components/main/visualEffects/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.module.scss?b372","webpack://telegram-t/./src/components/main/visualEffects/WaveContainer.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts","webpack://telegram-t/./src/global/helpers/payments.ts"],"sourcesContent":["import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { ApiChat, ApiMessage, ApiReactionWithPaid } from '../../api/types';\nimport type { GlobalState } from '../types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport windowSize from '../../util/windowSize';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport { updateReactionCount } from '../helpers';\nimport { selectIsChatWithSelf, selectSendAs, selectTabState } from '../selectors';\nimport { updateChat } from './chats';\nimport { updateChatMessage } from './messages';\n\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReactionWithPaid[],\n): T {\n  const isInSavedMessages = selectIsChatWithSelf(global, message.chatId);\n  const currentReactions = message.reactions || { results: [], areTags: isInSavedMessages };\n  const currentSendAs = selectSendAs(global, message.chatId);\n\n  // Update UI without waiting for server response\n  const results = updateReactionCount(currentReactions.results, userReactions);\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ isOwn, peerId }) => !isOwn && peerId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    if (reaction.type === 'paid') return;\n    recentReactions.unshift({\n      peerId: currentSendAs?.id || currentUserId!,\n      reaction,\n      addedDate: Math.floor(Date.now() / 1000),\n      isOwn: true,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, true);\n}\n","import type {\n  ApiChat, ApiMediaExtendedPreview, ApiMessage, ApiReactions,\n  MediaContent,\n} from '../../../api/types';\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ActiveEmojiInteraction, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByKey, omit, pickTruthy, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport {\n  addPaidReaction,\n  checkIfHasUnreadReactions, getIsSavedDialog, getMessageContent, getMessageText, isActionMessage,\n  isMessageLocal, isUserId,\n} from '../../helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../helpers/replies';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addViewportId,\n  clearMessageTranslation,\n  deleteChatMessages,\n  deleteChatScheduledMessages,\n  deletePeerPhoto,\n  deleteQuickReply,\n  deleteQuickReplyMessages,\n  deleteTopic,\n  removeChatFromChatLists,\n  replaceThreadParam,\n  updateChat,\n  updateChatLastMessageId,\n  updateChatMediaLoadingState,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslations,\n  updatePoll,\n  updatePollVote,\n  updateQuickReplies,\n  updateQuickReplyMessage,\n  updateScheduledMessage,\n  updateThreadInfo,\n  updateThreadInfos,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectFirstUnreadId,\n  selectIsChatListed,\n  selectIsChatWithSelf,\n  selectIsMessageInCurrentMessageList,\n  selectIsServiceChatReady,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectPerformanceSettingsValue,\n  selectPinnedIds,\n  selectSavedDialogIdFromMessage,\n  selectScheduledIds,\n  selectScheduledMessage,\n  selectTabState,\n  selectThreadByMessage,\n  selectThreadIdFromMessage,\n  selectThreadInfo,\n  selectTopic,\n  selectTopicFromMessage,\n  selectViewportIds,\n} from '../../selectors';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply, wasDrafted, poll,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const replyInfo = getMessageReplyInfo(newMessage);\n      const storyReplyInfo = getStoryReplyInfo(newMessage);\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && replyInfo?.isForumTopic\n        && !selectTopicFromMessage(global, newMessage)\n        && replyInfo.replyToMsgId) {\n        actions.loadTopicById({ chatId, topicId: replyInfo.replyToMsgId });\n      }\n\n      const isLocal = isMessageLocal(message as ApiMessage);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        // Force update for last message on drafted messages to prevent flickering\n        if (isLocal && wasDrafted) {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n\n        const threadId = selectThreadIdFromMessage(global, newMessage);\n        global = updateChatMediaLoadingState(global, newMessage, chatId, threadId, tabId);\n\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action) && !storyReplyInfo?.storyId\n            && !message.content?.storyData) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                actions.updateDraftReplyInfo({\n                  replyToMsgId: id,\n                  tabId,\n                });\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      // Reload dialogs if chat is not present in the list\n      if (!isLocal && !selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (!isLocal && selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      break;\n    }\n\n    case 'updateChatLastMessage': {\n      const { id, lastMessage } = update;\n\n      global = updateChatLastMessage(global, id, lastMessage, true);\n      global = addMessages(global, [lastMessage]);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: Math.random(),\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const {\n        chatId, id, message, poll,\n      } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      if (poll) {\n        global = updatePoll(global, poll.id, poll);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n\n      if (message.reactions && chat) {\n        global = updateReactions(\n          global, actions, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage,\n        );\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplyMessage': {\n      const { id, message } = update;\n\n      global = updateQuickReplyMessage(global, id, message);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteQuickReplyMessages': {\n      const { messageIds } = update;\n\n      global = deleteQuickReplyMessages(global, messageIds);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateQuickReplies': {\n      const { quickReplies } = update;\n      const byId = buildCollectionByKey(quickReplies, 'id');\n\n      global = updateQuickReplies(global, byId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'deleteQuickReply': {\n      global = deleteQuickReply(global, update.quickReplyId);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      global = {\n        ...global,\n        fileUploads: {\n          byMessageKey: omit(global.fileUploads.byMessageKey, [getMessageKey(message)]),\n        },\n      };\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo?.threadId) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      global = updateChat(global, chatId, {\n        lastReadInboxMessageId: message.id,\n      });\n\n      // Reload dialogs if chat is not present in the list\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      if (selectIsChatWithSelf(global, chatId)) {\n        const savedDialogId = selectSavedDialogIdFromMessage(global, newMessage);\n        if (savedDialogId && !selectIsChatListed(global, savedDialogId, 'saved')) {\n          actions.requestSavedDialogUpdate({ chatId: savedDialogId });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<ThreadId, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        global = updateChatMessage(global, chatId, message.id, {\n          isPinned,\n        });\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        threadInfo,\n      } = update;\n\n      global = updateThreadInfos(global, [threadInfo]);\n      const { chatId, threadId } = threadInfo;\n      if (!chatId || !threadId) return;\n\n      const chat = selectChat(global, chatId);\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: Number(threadId) });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (!chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = threadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        const tabId = getCurrentTabId();\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true });\n        actions.loadViewportMessages({ chatId, threadId: MAIN_THREAD_ID, tabId });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      global = getGlobal();\n      global = removeChatFromChatLists(global, chatId);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'deleteSavedHistory': {\n      const { chatId } = update;\n      const currentUserId = global.currentUserId!;\n      global = removeChatFromChatLists(global, chatId, 'saved');\n      setGlobal(global);\n\n      global = getGlobal();\n      deleteThread(global, currentUserId, chatId, actions);\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      global = updatePoll(global, pollId, pollUpdate);\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, peerId, options } = update;\n      global = updatePollVote(global, pollId, peerId, options);\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, actions, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, extendedMedia, isBought,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (message.content.invoice) {\n        const media = extendedMedia[0];\n        if ('mediaType' in media && media.mediaType === 'extendedMediaPreview') {\n          if (!message.content.invoice) return;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...message.content,\n              invoice: {\n                ...message.content.invoice,\n                extendedMedia: media,\n              },\n            },\n          });\n          setGlobal(global);\n        } else {\n          const content = media as MediaContent;\n          global = updateChatMessage(global, chatId, id, {\n            content: {\n              ...content,\n            },\n          });\n          setGlobal(global);\n        }\n      }\n\n      if (message.content.paidMedia) {\n        const paidMediaUpdate = isBought ? { isBought, extendedMedia }\n          : { extendedMedia: extendedMedia as ApiMediaExtendedPreview[], isBought: undefined };\n\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            paidMedia: {\n              ...message.content.paidMedia,\n              ...paidMediaUpdate,\n            },\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  const localPaidReaction = currentReactions?.results.find((r) => r.localAmount);\n  // Save local count on update, but reset if we sent reaction\n  if (localPaidReaction?.localAmount) {\n    reactions.results = addPaidReaction(reactions.results, localPaidReaction.localAmount);\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const { reaction, isOwn, isUnread } = reactions.recentReactions?.[0] ?? {};\n  const reactionEffectsEnabled = selectPerformanceSettingsValue(global, 'reactionEffects');\n  if (reactionEffectsEnabled && message && reaction && isUnread && !isOwn) {\n    const messageKey = getMessageKey(message);\n    // Start reaction only in master tab\n    actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n  }\n\n  const hasUnreadReactionsForMessageInChat = chat.unreadReactions?.includes(id);\n  const hasUnreadReactionsInNewReactions = checkIfHasUnreadReactions(global, reactions);\n\n  // Only notify about added reactions, not removed ones\n  if (hasUnreadReactionsInNewReactions && !hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id].sort((a, b) => b - a),\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  }\n\n  if (!hasUnreadReactionsInNewReactions && hasUnreadReactionsForMessageInChat) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState,\n  chatId: string,\n  id: number,\n  messageUpdate: Partial<ApiMessage>,\n  isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content && !isLocalMessageId(id)) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl ??= photo.blobUrl;\n      messageUpdate.content.photo.thumbnail ??= photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl ??= video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally ??= sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl ??= document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const replyInfo = getMessageReplyInfo(message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && replyInfo?.replyToMsgId) {\n    const originMessage = selectChatMessage(global, chatId, replyInfo.replyToMsgId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: replyInfo.replyToMsgId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n  const { threadId } = threadInfo ?? { threadId: savedDialogId };\n\n  if (threadId) {\n    global = updateListedIds(global, chatId, threadId, [id]);\n\n    Object.values(global.byTabId).forEach(({ id: tabId }) => {\n      if (selectIsViewportNewest(global, chatId, threadId, tabId)) {\n        // Always keep the first unread message in the viewport list\n        const firstUnreadId = selectFirstUnreadId(global, chatId, threadId);\n        const candidateGlobal = addViewportId(global, chatId, threadId, id, tabId);\n        const newViewportIds = selectViewportIds(candidateGlobal, chatId, threadId, tabId);\n\n        if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n          global = candidateGlobal;\n        }\n      }\n    });\n\n    if (threadInfo) {\n      global = replaceThreadParam(global, chatId, threadId, 'threadInfo', {\n        ...threadInfo,\n        lastMessageId: message.id,\n      });\n\n      if (!isMessageLocal(message) && !isActionMessage(message)) {\n        global = updateThreadInfo(global, chatId, threadId, {\n          messagesCount: (threadInfo.messagesCount || 0) + 1,\n        });\n      }\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessageId = selectChatLastMessageId(global, chatId);\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  const savedDialogId = selectSavedDialogIdFromMessage(global, message);\n  if (savedDialogId) {\n    global = updateChatLastMessageId(global, savedDialogId, message.id, 'saved');\n  }\n\n  if (currentLastMessageId && !force) {\n    const isSameOrNewer = (\n      currentLastMessageId === message.id || currentLastMessageId === message.previousLocalId\n    ) || message.id > currentLastMessageId;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChatLastMessageId(global, chatId, message.id);\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId = MAIN_THREAD_ID) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (message && !message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nexport function deleteThread<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  threadId: ThreadId,\n  actions: RequiredGlobalActions,\n) {\n  const byId = selectChatMessages(global, chatId);\n  if (!byId) {\n    return;\n  }\n\n  const messageIds = Object.values(byId).filter((message) => {\n    const messageThreadId = selectThreadIdFromMessage(global, message);\n    return messageThreadId === threadId;\n  }).map((message) => message.id);\n\n  if (!messageIds.length) {\n    return;\n  }\n\n  deleteMessages(global, chatId, messageIds, actions);\n}\n\nexport function deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    const threadIdsToUpdate = new Set<ThreadId>();\n    threadIdsToUpdate.add(MAIN_THREAD_ID);\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      if (selectTopic(global, chatId, id)) {\n        global = deleteTopic(global, chatId, id);\n      }\n\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      if (message.content.action?.photo) {\n        global = deletePeerPhoto(global, chatId, message.content.action.photo.id, true);\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.add(threadId);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const idsSet = new Set(ids);\n\n    threadIdsToUpdate.forEach((threadId) => {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      if (!threadInfo?.lastMessageId || !idsSet.has(threadInfo.lastMessageId)) return;\n\n      const newLastMessage = findLastMessage(global, chatId, threadId);\n      if (!newLastMessage) {\n        if (chat.isForum && threadId !== MAIN_THREAD_ID) {\n          actions.loadTopicById({ chatId, topicId: Number(threadId) });\n        }\n        return;\n      }\n\n      if (threadId === MAIN_THREAD_ID) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, {\n        lastMessageId: newLastMessage.id,\n      });\n\n      if (chat.isForum) {\n        global = updateTopic(global, chatId, Number(threadId), {\n          lastMessageId: newLastMessage.id,\n        });\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      const message = selectChatMessage(global, commonBoxChatId, id);\n      if (selectIsChatWithSelf(global, commonBoxChatId) && message) {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (getIsSavedDialog(commonBoxChatId, threadId, global.currentUserId)) {\n          const newLastSavedDialogMessage = findLastMessage(global, commonBoxChatId, threadId);\n          actions.requestSavedDialogUpdate({ chatId: String(threadId) });\n          if (newLastSavedDialogMessage) {\n            global = updateChatLastMessageId(global, commonBoxChatId, newLastSavedDialogMessage.id, 'saved');\n          }\n        }\n      }\n\n      if (message?.content.action?.photo) {\n        global = deletePeerPhoto(global, commonBoxChatId, message.content.action.photo.id, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import type {\n  ApiAttachment,\n  ApiChat,\n  ApiError,\n  ApiInputMessageReplyInfo,\n  ApiInputReplyInfo,\n  ApiInputStoryReplyInfo,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiPeer,\n  ApiSticker,\n  ApiStory,\n  ApiStorySkipped,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport type { MessageKey } from '../../../util/keys/messageKey';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs, WebPageMediaSize,\n} from '../../types';\nimport { MAIN_THREAD_ID, MESSAGE_DELETED } from '../../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../../types';\n\nimport {\n  GIF_MIME_TYPE,\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_ID_REQUIRED_ERROR,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { copyTextToClipboardFromPromise } from '../../../util/clipboard';\nimport { isDeepLink } from '../../../util/deepLinkParser';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  areSortedArraysIntersecting,\n  buildCollectionByKey,\n  omit,\n  partition,\n  split,\n  unique,\n} from '../../../util/iteratees';\nimport { getMessageKey, isLocalMessageId } from '../../../util/keys/messageKey';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { debounce, onTickEnd, rafPromise } from '../../../util/schedulers';\nimport { IS_IOS } from '../../../util/windowEnvironment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  getIsSavedDialog,\n  getUserFullName,\n  isChatChannel,\n  isChatSuperGroup,\n  isDeletedUser,\n  isMessageLocal,\n  isServiceNotificationMessage,\n  isUserBot,\n} from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addUnreadMentions,\n  deleteSponsoredMessage,\n  removeOutlyingList,\n  removeRequestedMessageTranslation,\n  removeUnreadMentions,\n  replaceSettings,\n  replaceThreadParam,\n  replaceUserStatuses,\n  safeReplacePinnedIds,\n  safeReplaceViewportIds,\n  updateChat,\n  updateChatFullInfo,\n  updateChatMessage,\n  updateListedIds,\n  updateMessageTranslation,\n  updateOutlyingLists,\n  updateQuickReplies,\n  updateQuickReplyMessages,\n  updateRequestedMessageTranslation,\n  updateScheduledMessages,\n  updateSponsoredMessage,\n  updateThreadInfo,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  updateUploadByMessageKey,\n  updateUserFullInfo,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectCurrentViewedStory,\n  selectDraft,\n  selectEditingId,\n  selectEditingMessage,\n  selectEditingScheduledId,\n  selectFirstMessageId,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectForwardsCanBeSentToChat,\n  selectForwardsContainVoiceMessages,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectLanguageCode,\n  selectListedIds,\n  selectMessageReplyInfo,\n  selectNoWebPage,\n  selectOutlyingListByMessageId,\n  selectPeer,\n  selectPeerStory,\n  selectPinnedIds,\n  selectPollFromMessage,\n  selectRealLastReadId,\n  selectReplyCanBeSentToChat,\n  selectScheduledMessage,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectTopic,\n  selectTranslationLanguage,\n  selectUser,\n  selectUserFullInfo,\n  selectUserStatus,\n  selectViewportIds,\n} from '../../selectors';\nimport { deleteMessages } from '../apiUpdaters/messages';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<MessageKey, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    shouldForceRender = false,\n    onLoaded,\n    onError,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      onError?.();\n      return;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    onError?.();\n    return;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId!)\n      : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, onLoaded, tabId,\n        );\n      });\n    } else {\n      onLoaded?.();\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n\n    // Prevent requests with local offsets\n    if (isLocalMessageId(offsetId)) return;\n\n    // Prevent unnecessary requests in threads\n    if (offsetId === threadId && direction === LoadMoreDirection.Backwards) return;\n\n    const isOutlying = Boolean(listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying\n      ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : listedIds)!;\n    if (historyIds?.length) {\n      const {\n        newViewportIds, areSomeLocal, areAllLocal,\n      } = getViewportSlice(historyIds, offsetId, direction);\n\n      if (areSomeLocal) {\n        global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n      }\n\n      onTickEnd(() => {\n        void loadWithBudget(\n          global,\n          actions,\n          areAllLocal,\n          isOutlying,\n          isBudgetPreload,\n          chat,\n          threadId!,\n          direction,\n          offsetId,\n          onLoaded,\n          tabId,\n        );\n      });\n    }\n\n    if (isBudgetPreload) {\n      return;\n    }\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: shouldForceRender });\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: ThreadId, direction: LoadMoreDirection, offsetId?: number,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, onLoaded, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, onLoaded, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { messageList, tabId = getCurrentTabId() } = payload;\n\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!messageList && !isStoryReply) {\n    return undefined;\n  }\n\n  let { chatId, threadId, type } = messageList || {};\n  if (isStoryReply) {\n    chatId = storyPeerId!;\n    threadId = MAIN_THREAD_ID;\n    type = 'thread';\n  }\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId!)!;\n  const draft = selectDraft(global, chatId!, threadId!);\n  const isForwarding = selectTabState(global, tabId).forwardMessages?.messageIds?.length;\n\n  const draftReplyInfo = !isForwarding && !isStoryReply ? draft?.replyInfo : undefined;\n\n  const storyReplyInfo = isStoryReply ? {\n    type: 'story',\n    peerId: storyPeerId!,\n    storyId: storyId!,\n  } satisfies ApiInputStoryReplyInfo : undefined;\n\n  const messageReplyInfo = selectMessageReplyInfo(global, chatId!, threadId!, draftReplyInfo);\n\n  const replyInfo = storyReplyInfo || messageReplyInfo;\n  const lastMessageId = selectChatLastMessageId(global, chatId!);\n\n  const params = {\n    ...payload,\n    chat,\n    replyInfo,\n    noWebPage: selectNoWebPage(global, chatId!, threadId!),\n    sendAs: selectSendAs(global, chatId!),\n    lastMessageId,\n  };\n\n  if (!isStoryReply) {\n    actions.clearWebPagePreview({ tabId });\n  }\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n      wasDrafted: Boolean(draft),\n    });\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    let hasSentCaption = false;\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n        const isLast = i === groupedAttachments.length - 1 && groupIndex === byType.length - 1;\n\n        if (group[0].quick && !group[0].shouldSendAsFile) {\n          const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n          sendMessage(global, {\n            ...commonParams,\n            text: isFirst && !hasSentCaption ? text : undefined,\n            entities: isFirst && !hasSentCaption ? entities : undefined,\n            attachment: firstAttachment,\n            groupedId: restAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n\n          restAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n        } else {\n          const firstAttachments = groupedAttachments[i].slice(0, -1);\n          const lastAttachment = groupedAttachments[i][groupedAttachments[i].length - 1];\n          firstAttachments.forEach((attachment: ApiAttachment) => {\n            sendMessage(global, {\n              ...commonParams,\n              attachment,\n              groupedId,\n            });\n          });\n\n          sendMessage(global, {\n            ...commonParams,\n            text: isLast && !hasSentCaption ? text : undefined,\n            entities: isLast && !hasSentCaption ? entities : undefined,\n            attachment: lastAttachment,\n            groupedId: firstAttachments.length > 0 ? groupedId : undefined,\n            wasDrafted: Boolean(draft),\n          });\n          hasSentCaption = true;\n        }\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyInfo: replyToForFirstMessage, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyInfo: replyToForFirstMessage,\n        wasDrafted: Boolean(draft),\n      });\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      });\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('sendInviteMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, userIds, tabId = getCurrentTabId() } = payload;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n  if (!chatFullInfo?.inviteLink) {\n    return undefined;\n  }\n  const userFullNames: string[] = [];\n  await Promise.all(userIds.map((userId) => {\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return undefined;\n    }\n    const userFullName = getUserFullName(selectUser(global, userId));\n    if (userFullName) {\n      userFullNames.push(userFullName);\n    }\n    return sendMessage(global, {\n      chat,\n      text: chatFullInfo.inviteLink,\n    });\n  }));\n  return actions.showNotification({\n    message: oldTranslate('Conversation.ShareLinkTooltip.Chat.One', userFullNames.join(', ')),\n    tabId,\n  });\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageList, text, entities, attachments, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!messageList) {\n    return;\n  }\n\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = attachments ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  const { chatId, threadId, type: messageListType } = messageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  actions.setEditingId({ messageId: undefined, tabId });\n\n  (async () => {\n    await callApi('editMessage', {\n      chat,\n      message,\n      attachment: attachments ? attachments[0] : undefined,\n      text,\n      entities,\n      noWebPage: selectNoWebPage(global, chatId, threadId),\n    }, progressCallback);\n\n    if (progressCallback && currentMessageKey) {\n      global = getGlobal();\n      global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n      setGlobal(global);\n\n      uploadProgressCallbacks.delete(currentMessageKey);\n    }\n  })();\n});\n\naddActionHandler('cancelUploadMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageKey(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  if (isMessageLocal(message)) {\n    actions.apiUpdate({\n      '@type': 'deleteMessages',\n      ids: [messageId],\n      chatId,\n    });\n  }\n});\n\naddActionHandler('saveDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, text,\n  } = payload;\n  if (!text) {\n    return;\n  }\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft: ApiDraft = {\n    text,\n    replyInfo: currentDraft?.replyInfo,\n    effectId: currentDraft?.effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft,\n  });\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, isLocalOnly, shouldKeepReply,\n  } = payload;\n  const currentDraft = selectDraft(global, chatId, threadId);\n  if (!currentDraft) {\n    return;\n  }\n\n  const currentReplyInfo = currentDraft.replyInfo;\n\n  const newDraft: ApiDraft | undefined = shouldKeepReply && currentReplyInfo ? {\n    replyInfo: currentReplyInfo,\n  } : undefined;\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly,\n  });\n});\n\naddActionHandler('updateDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...update } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const updatedReplyInfo = {\n    type: 'message',\n    ...currentDraft?.replyInfo,\n    ...update,\n  } as ApiInputMessageReplyInfo;\n\n  if (!updatedReplyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo: updatedReplyInfo,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\naddActionHandler('resetDraftReplyInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n  const newDraft: ApiDraft | undefined = !currentDraft?.text ? undefined : {\n    ...currentDraft,\n    replyInfo: undefined,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: Boolean(newDraft),\n  });\n});\n\naddActionHandler('saveEffectInDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, effectId,\n  } = payload;\n\n  const currentDraft = selectDraft(global, chatId, threadId);\n\n  const newDraft = {\n    ...currentDraft,\n    effectId,\n  };\n\n  saveDraft({\n    global, chatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n});\n\nasync function saveDraft<T extends GlobalState>({\n  global, chatId, threadId, draft, isLocalOnly, noLocalTimeUpdate,\n} : {\n  global: T; chatId: string; threadId: ThreadId; draft?: ApiDraft; isLocalOnly?: boolean; noLocalTimeUpdate?: boolean;\n}) {\n  const chat = selectChat(global, chatId);\n  const user = selectUser(global, chatId);\n  if (!chat || (user && isDeletedUser(user))) return;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draft?.replyInfo);\n\n  const newDraft: ApiDraft | undefined = draft ? {\n    ...draft,\n    replyInfo,\n    date: Math.floor(Date.now() / 1000),\n    isLocal: true,\n  } : undefined;\n\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  if (!noLocalTimeUpdate) {\n    global = updateChat(global, chatId, { draftDate: newDraft?.date });\n  }\n\n  setGlobal(global);\n\n  if (isLocalOnly) return;\n\n  const result = await callApi('saveDraft', {\n    chat,\n    draft: newDraft,\n  });\n\n  if (result && newDraft) {\n    newDraft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: newDraft?.date });\n\n  setGlobal(global);\n}\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('unpinAllMessages', { chat, threadId });\n\n  global = getGlobal();\n  const pinnedIds = selectPinnedIds(global, chatId, threadId);\n  pinnedIds?.forEach((id) => {\n    global = updateChatMessage(global, chatId, id, { isPinned: false });\n  });\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n  const messageIdsToDelete = messageIds.filter((id) => {\n    const message = selectChatMessage(global, chatId, id);\n    return message && !isMessageLocal(message);\n  });\n\n  // Only local messages\n  if (!messageIdsToDelete.length && messageIds.length) {\n    deleteMessages(global, isChatChannel(chat) ? chatId : undefined, messageIds, actions);\n    return;\n  }\n\n  void callApi('deleteMessages', { chat, messageIds: messageIdsToDelete, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n\n  // Delete chat from folders\n  const folders = global.chatFolders.byId;\n  Object.values(folders).forEach((folder) => {\n    if (folder.includedChatIds.includes(chatId) || folder.pinnedChatIds?.includes(chatId)) {\n      const newIncludedChatIds = folder.includedChatIds.filter((id) => id !== chatId);\n      const newPinnedChatIds = folder.pinnedChatIds?.filter((id) => id !== chatId);\n\n      const updatedFolder = {\n        ...folder,\n        includedChatIds: newIncludedChatIds,\n        pinnedChatIds: newPinnedChatIds,\n      };\n\n      callApi('editChatFolder', {\n        id: folder.id,\n        folderUpdate: updatedFolder,\n      });\n    }\n  });\n});\n\naddActionHandler('deleteSavedHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteSavedHistory', { chat });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.threadId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, description = '', option = '', chatId, tabId = getCurrentTabId(),\n  } = payload!;\n  const chat = selectChat(global, chatId)!;\n\n  const response = await callApi('reportMessages', {\n    peer: chat, messageIds, description, option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        chatId,\n        messageIds,\n        description,\n        subject: 'message',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n  if (selectIsChatWithSelf(global, chatId)) return;\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('reportChannelSpam', (global, actions, payload): ActionReturnType => {\n  const { participantId, chatId, messageIds } = payload;\n  const peer = selectPeer(global, participantId);\n  const chat = selectChat(global, chatId);\n  if (!peer || !chat) {\n    return;\n  }\n\n  void callApi('reportChannelSpam', { peer, chat, messageIds });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId);\n\n  if (threadId !== MAIN_THREAD_ID && !chat.isForum) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    return global;\n  }\n\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  const topic = selectTopic(global, chatId, threadId);\n  if (chat.isForum && topic) {\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, Number(threadId), {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId(), shouldFetchUnreadReactions } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds })\n    .then(() => {\n      if (shouldFetchUnreadReactions) {\n        actions.fetchUnreadReactions({ chatId: chat.id });\n      }\n    });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  const poll = message && selectPollFromMessage(global, message);\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters?.[option] ? voters[option] : []),\n          ...result.votes.map((vote) => vote.peerId),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    isSilent, scheduledAt, tabId = getCurrentTabId(),\n  } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId = MAIN_THREAD_ID,\n  } = selectTabState(global, tabId).forwardMessages;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const isToMainThread = toThreadId === MAIN_THREAD_ID;\n\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !isToMainThread && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n  const draft = selectDraft(global, toChatId!, toThreadId || MAIN_THREAD_ID);\n  const lastMessageId = selectChatLastMessageId(global, toChat.id);\n\n  const [realMessages, serviceMessages] = partition(messages, (m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    (async () => {\n      await rafPromise(); // Wait one frame for any previous `sendMessage` to be processed\n      callApi('forwardMessages', {\n        fromChat,\n        toChat,\n        toThreadId,\n        messages: realMessages,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        withMyScore,\n        noAuthors,\n        noCaptions,\n        isCurrentUserPremium,\n        wasDrafted: Boolean(draft),\n        lastMessageId,\n      });\n    })();\n  }\n\n  serviceMessages\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker } = message.content;\n\n      const replyInfo = selectMessageReplyInfo(global, toChat.id, toThreadId);\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyInfo,\n        text,\n        entities,\n        sticker,\n        isSilent,\n        scheduledAt,\n        sendAs,\n        lastMessageId,\n      });\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = updateScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<ThreadId, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  onLoaded?: NoneToVoidFunction,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  let sliceSize = MESSAGE_LIST_SLICE;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      if (offsetId) {\n        addOffset = -1;\n        sliceSize += 1;\n      } else {\n        addOffset = undefined;\n      }\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      if (offsetId) {\n        sliceSize += 1;\n      }\n      break;\n  }\n\n  global = getGlobal();\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, realChatId)!,\n    offsetId,\n    addOffset,\n    limit: sliceSize,\n    threadId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, count,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  if (threadId !== MAIN_THREAD_ID && !getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    const threadFirstMessageId = selectFirstMessageId(global, chatId, threadId);\n    if ((!ids[0] || threadFirstMessageId === ids[0]) && threadFirstMessageId !== threadId) {\n      ids.unshift(Number(threadId));\n    }\n  }\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingLists(global, chatId, threadId, ids)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingList = offsetId ? selectOutlyingListByMessageId(global, chatId, threadId, offsetId) : undefined;\n\n  if (isOutlying && listedIds && outlyingList) {\n    if (!outlyingList.length || areSortedArraysIntersecting(listedIds, outlyingList)) {\n      global = updateListedIds(global, chatId, threadId, outlyingList);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = removeOutlyingList(global, chatId, threadId, outlyingList);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying && outlyingList ? outlyingList : listedIds;\n    if (historyIds) {\n      const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n    }\n  }\n\n  if (count) {\n    global = updateThreadInfo(global, chat.id, threadId, {\n      messagesCount: count,\n    });\n  }\n\n  setGlobal(global);\n  onLoaded?.();\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyInfo: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const isAround = direction === LoadMoreDirection.Around;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const sliceSize = isAround ? Math.round(MESSAGE_LIST_SLICE / 2) : MESSAGE_LIST_SLICE;\n  const from = indexForDirection - sliceSize;\n  const to = indexForDirection + sliceSize - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection >= 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyInfo?: ApiInputReplyInfo;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  story?: ApiStory | ApiStorySkipped;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiPeer;\n  groupedId?: string;\n  wasDrafted?: boolean;\n  lastMessageId?: number;\n  isInvertedMedia?: true;\n  effectId?: string;\n  webPageMediaSize?: WebPageMediaSize;\n}) {\n  let currentMessageKey: MessageKey | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageKey: MessageKey) => {\n    if (!uploadProgressCallbacks.has(messageKey)) {\n      currentMessageKey = messageKey;\n      uploadProgressCallbacks.set(messageKey, progressCallback!);\n    }\n\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, messageKey, progress);\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyInfo || IS_IOS) {\n    await rafPromise();\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && currentMessageKey) {\n    global = getGlobal();\n    global = updateUploadByMessageKey(global, currentMessageKey, undefined);\n    setGlobal(global);\n\n    uploadProgressCallbacks.delete(currentMessageKey);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || getIsSavedDialog(chatId, threadId, global.currentUserId)) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = safeReplacePinnedIds(global, chat.id, threadId, ids);\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByDates: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChatFullInfo(global, chatId, { sendAsId });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('clickSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, isMedia, isFullscreen } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('clickSponsoredMessage', {\n    chat, random: message.randomId, isMedia, isFullscreen,\n  });\n});\n\naddActionHandler('reportSponsoredMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, randomId, option = '', tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportSponsoredMessage', { chat, randomId, option });\n\n  if (!result) return;\n\n  if (result.type === 'premiumRequired') {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    actions.closeReportAdModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'reported' || result.type === 'hidden') {\n    actions.showNotification({\n      message: oldTranslate(result.type === 'reported' ? 'AdReported' : 'AdHidden'),\n      tabId,\n    });\n    actions.closeReportAdModal({ tabId });\n\n    global = getGlobal();\n    global = deleteSponsoredMessage(global, chatId);\n    setGlobal(global);\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportAdModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportAdModal: {\n        chatId,\n        randomId,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('hideSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (!isCurrentUserPremium) {\n    actions.openPremiumModal({ initialSection: 'no_ads', tabId });\n    return;\n  }\n\n  const result = await callApi('toggleSponsoredMessages', { enabled: false });\n  if (!result) return;\n  global = getGlobal();\n  global = updateUserFullInfo(global, global.currentUserId!, {\n    areAdsEnabled: false,\n  });\n  setGlobal(global);\n  actions.showNotification({\n    message: oldTranslate('AdHidden'),\n    tabId,\n  });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  await fetchUnreadMentions(global, chatId, offsetId);\n});\n\nasync function fetchUnreadMentions<T extends GlobalState>(global: T, chatId: string, offsetId?: number) {\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUnreadMentions(global, chatId, chat, ids);\n\n  setGlobal(global);\n}\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  global = removeUnreadMentions(global, chat.id, chat, messageIds, true);\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  let chat = selectCurrentChat(global, tabId);\n\n  if (!chat) return;\n\n  if (!chat.unreadMentions) {\n    await fetchUnreadMentions(global, chat.id);\n    global = getGlobal();\n    const previousChatId = chat.id;\n    chat = selectCurrentChat(global, tabId);\n    if (!chat?.unreadMentions || previousChatId !== chat.id) return;\n  }\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const {\n    url, shouldSkipModal, ignoreDeepLinks, tabId = getCurrentTabId(),\n  } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (!ignoreDeepLinks && isDeepLink(urlWithProtocol)) {\n    actions.closeStoryViewer({ tabId });\n    actions.closePaymentModal({ tabId });\n\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig, config } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (config?.autologinToken && appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, config.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.closeStoryViewer({ tabId });\n\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\nasync function checkIfVoiceMessagesAllowed<T extends GlobalState>(\n  global: T,\n  user: ApiUser,\n  chatId: string,\n): Promise<boolean> {\n  let fullInfo = selectUserFullInfo(global, chatId);\n  if (!fullInfo) {\n    const { accessHash } = user;\n    const result = await callApi('fetchFullUser', { id: chatId, accessHash });\n    fullInfo = result?.fullInfo;\n  }\n  return Boolean(!fullInfo?.noVoiceMessages);\n}\n\nfunction moveReplyToNewDraft<T extends GlobalState>(\n  global: T,\n  threadId: ThreadId,\n  replyInfo: ApiInputMessageReplyInfo,\n  toChatId: string,\n) {\n  const currentDraft = selectDraft(global, toChatId, threadId);\n\n  if (!replyInfo.replyToMsgId) return;\n\n  const newDraft: ApiDraft = {\n    ...currentDraft,\n    replyInfo,\n  };\n\n  saveDraft({\n    global, chatId: toChatId, threadId, draft: newDraft, isLocalOnly: true, noLocalTimeUpdate: true,\n  });\n}\naddActionHandler('openChatOrTopicWithReplyInDraft', (global, actions, payload): ActionReturnType => {\n  const { chatId: toChatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  global = getGlobal();\n\n  const tabState = selectTabState(global, tabId);\n  const replyingInfo = tabState.replyingMessage;\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n  global = getGlobal();\n\n  const currentChat = selectCurrentChat(global, tabId);\n  const currentThreadId = selectCurrentMessageList(global, tabId)?.threadId;\n\n  if (!currentChat || !currentThreadId) return;\n\n  const threadId = topicId || MAIN_THREAD_ID;\n  const currentChatId = currentChat.id;\n\n  const newReplyInfo = {\n    type: 'message',\n    replyToMsgId: replyingInfo.messageId,\n    replyToTopId: replyingInfo.toThreadId,\n    replyToPeerId: currentChatId,\n    quoteText: replyingInfo.quoteText,\n  } as ApiInputMessageReplyInfo;\n\n  const currentReplyInfo = replyingInfo.messageId\n    ? newReplyInfo : selectDraft(global, currentChatId, currentThreadId)?.replyInfo;\n  if (!currentReplyInfo) return;\n\n  if (!selectReplyCanBeSentToChat(global, toChatId, currentChatId, currentReplyInfo)) {\n    actions.showNotification({ message: oldTranslate('Chat.SendNotAllowedText'), tabId });\n    return;\n  }\n\n  if (!currentReplyInfo.replyToPeerId && toChatId === currentChat.id) return;\n\n  const getPeerId = () => {\n    if (!currentReplyInfo?.replyToPeerId) return currentChatId;\n    return currentReplyInfo.replyToPeerId === toChatId ? undefined : currentReplyInfo.replyToPeerId;\n  };\n  const replyToPeerId = getPeerId();\n  const newReply: ApiInputMessageReplyInfo = {\n    ...currentReplyInfo,\n    replyToPeerId,\n    type: 'message',\n  };\n\n  moveReplyToNewDraft(global, threadId, newReply, toChatId);\n  actions.openThread({ chatId: toChatId, threadId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n  actions.clearDraft({ chatId: currentChatId, threadId: currentThreadId });\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  const user = selectUser(global, chatId);\n  const isSelectForwardsContainVoiceMessages = selectForwardsContainVoiceMessages(global, tabId);\n  if (isSelectForwardsContainVoiceMessages && user && !await checkIfVoiceMessagesAllowed(global, user, chatId)) {\n    actions.showDialog({\n      data: {\n        message: oldTranslate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n      },\n      tabId,\n    });\n    return;\n  }\n  global = getGlobal();\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n    },\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n  actions.openThread({ chatId, threadId: topicId || MAIN_THREAD_ID, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('forwardStory', (global, actions, payload): ActionReturnType => {\n  const { toChatId, tabId = getCurrentTabId() } = payload || {};\n\n  const { fromChatId, storyId } = selectTabState(global, tabId).forwardMessages;\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const story = fromChatId && storyId\n    ? selectPeerStory(global, fromChatId, storyId)\n    : undefined;\n\n  if (!fromChat || !toChat || !story || 'isDeleted' in story) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, toChatId);\n\n  const { text, entities } = (story as ApiStory).content.text || {};\n  void sendMessage(global, {\n    chat: toChat,\n    text,\n    entities,\n    story,\n    lastMessageId,\n  });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectTranslationLanguage(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n  global = replaceSettings(global, {\n    translationLanguage: toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('markMessagesTranslationPending', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  actions.markMessagesTranslationPending({ chatId, messageIds, toLanguageCode });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\n// https://github.com/telegramdesktop/tdesktop/blob/11906297d82b6ff57b277da5251d2e6eb3d8b6d0/Telegram/SourceFiles/api/api_views.cpp#L22\nconst SEND_VIEWS_TIMEOUT = 1000;\nlet viewsIncrementTimeout: number | undefined;\nlet idsToIncrementViews: Record<string, Set<number>> = {};\n\nfunction incrementViews() {\n  if (viewsIncrementTimeout) {\n    clearTimeout(viewsIncrementTimeout);\n    viewsIncrementTimeout = undefined;\n  }\n\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { loadMessageViews } = getActions();\n  Object.entries(idsToIncrementViews).forEach(([chatId, ids]) => {\n    loadMessageViews({ chatId, ids: Array.from(ids), shouldIncrement: true });\n  });\n\n  idsToIncrementViews = {};\n}\naddActionHandler('scheduleForViewsIncrement', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  if (!viewsIncrementTimeout) {\n    setTimeout(incrementViews, SEND_VIEWS_TIMEOUT);\n  }\n\n  if (!idsToIncrementViews[chatId]) {\n    idsToIncrementViews[chatId] = new Set();\n  }\n\n  ids.forEach((id) => {\n    idsToIncrementViews[chatId].add(id);\n  });\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids, shouldIncrement } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n    shouldIncrement,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.viewsInfo.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      viewsCount: update.views,\n      forwardsCount: update.forwards,\n    }, true);\n\n    if (update.threadInfo) {\n      global = updateThreadInfo(global, chatId, update.id, update.threadInfo);\n    }\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadFactChecks', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchFactChecks', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((factCheck, i) => {\n    global = updateChatMessage(global, chatId, ids[i], {\n      factCheck,\n    });\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadPaidReactionPrivacy', (): ActionReturnType => {\n  callApi('fetchPaidReactionPrivacy');\n  return undefined;\n});\n\naddActionHandler('loadOutboxReadDate', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  try {\n    const result = await callApi('fetchOutboxReadDate', { chat, messageId });\n    if (result?.date) {\n      global = getGlobal();\n      global = updateChatMessage(global, chatId, messageId, { readDate: result.date });\n      setGlobal(global);\n    }\n  } catch (error) {\n    const { message } = error as ApiError;\n\n    if (message === 'USER_PRIVACY_RESTRICTED' || message === 'YOUR_PRIVACY_RESTRICTED') {\n      global = getGlobal();\n\n      const user = selectUser(global, chatId);\n      if (!user) return;\n      const userStatus = selectUserStatus(global, chatId);\n      if (!userStatus) return;\n\n      const updateStatus = message === 'USER_PRIVACY_RESTRICTED'\n        ? { isReadDateRestricted: true }\n        : { isReadDateRestrictedByMe: true };\n\n      global = replaceUserStatuses(global, {\n        [chatId]: { ...userStatus, ...updateStatus },\n      });\n      // Need to reset `readDate` to `undefined` after click on \"Show my Read Time\" button\n      global = updateChatMessage(global, chatId, messageId, { readDate: undefined });\n      setGlobal(global);\n    }\n  }\n});\n\naddActionHandler('loadQuickReplies', async (global): Promise<void> => {\n  const result = await callApi('fetchQuickReplies');\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateQuickReplyMessages(global, buildCollectionByKey(result.messages, 'id'));\n  global = updateQuickReplies(global, result.quickReplies);\n\n  setGlobal(global);\n});\n\naddActionHandler('sendQuickReply', (global, actions, payload): ActionReturnType => {\n  const { chatId, quickReplyId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return global;\n  callApi('sendQuickReply', {\n    chat,\n    shortcutId: quickReplyId,\n  });\n\n  return global;\n});\n\naddActionHandler('copyMessageLink', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, shouldIncludeThread, shouldIncludeGrouped, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({\n      message: oldTranslate('ErrorOccurred'),\n      tabId,\n    });\n    return;\n  }\n  const showErrorOccurredNotification = () => actions.showNotification({\n    message: oldTranslate('ErrorOccurred'),\n    tabId,\n  });\n\n  if (!isChatChannel(chat) && !isChatSuperGroup(chat)) {\n    showErrorOccurredNotification();\n    return;\n  }\n  const showLinkCopiedNotification = () => actions.showNotification({\n    message: oldTranslate('LinkCopied'),\n    tabId,\n  });\n  const callApiExportMessageLinkPromise = callApi('exportMessageLink', {\n    chat, id: messageId, shouldIncludeThread, shouldIncludeGrouped,\n  });\n  await copyTextToClipboardFromPromise(\n    callApiExportMessageLinkPromise, showLinkCopiedNotification, showErrorOccurredNotification,\n  );\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  // If ids are outside viewport, we cannot get correct count\n  if (ids.length === 0 || from < ids[0] || to > ids[ids.length - 1]) return undefined;\n\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (shouldSendAsFile) return 'file';\n  if (mimeType === GIF_MIME_TYPE) return 'gif';\n  if (SUPPORTED_PHOTO_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { BIRTHDAY_NUMBERS_SET, RESTRICTED_EMOJI_SET } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { pause, throttle } from '../../../util/schedulers';\nimport searchWords from '../../../util/searchWords';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\nimport {\n  rebuildStickersForEmoji,\n  replaceAnimatedEmojis,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateGifSearch,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n  updateStickerSet,\n  updateStickerSets,\n  updateStickersForEmoji,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectIsCurrentUserPremium, selectStickerSet, selectTabState } from '../../selectors';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions): Promise<void> => {\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadBirthdayNumbersStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: BIRTHDAY_NUMBERS_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    birthdayNumbers: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadRestrictedEmojiStickers', async (global): Promise<void> => {\n  const emojis = await callApi('fetchStickers', {\n    stickerSetInfo: {\n      shortName: RESTRICTED_EMOJI_SET,\n    },\n  });\n  if (!emojis) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    restrictedEmoji: { ...emojis.set, stickers: emojis.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.oldTranslate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.oldTranslate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showNotification({\n          message: oldTranslate('StickerPack.ErrorNotFound'),\n          tabId,\n        });\n\n        if ('shortName' in stickerSetInfo\n          && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n          global = updateTabState(global, {\n            openedStickerSetShortName: undefined,\n          }, tabId);\n          setGlobal(global);\n        }\n      });\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      global = getGlobal();\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiTopic,\n  ApiUserStatus,\n} from '../../../api/types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\n\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dates/dateFormat';\nimport { isDeepLink, tryParseDeepLink } from '../../../util/deepLinkParser';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { throttle } from '../../../util/schedulers';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatGroup, toChannelId } from '../../helpers/chats';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addMessages,\n  addUserStatuses,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n  updateTopics,\n} from '../../reducers';\nimport {\n  selectChat, selectChatByUsername, selectChatMessage, selectCurrentGlobalSearchQuery, selectTabState,\n} from '../../selectors';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        accountResultIds, globalResultIds,\n      } = result;\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          peerIds: accountResultIds,\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          peerIds: globalResultIds,\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    minDate: date,\n    maxDate,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.searchMessagesGlobal({ type: 'text', tabId });\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId,\n  } = selectTabState(global, tabId).globalSearch;\n  const {\n    totalCount, foundIds, nextOffsetId, nextOffsetPeerId, nextOffsetRate,\n  } = resultsByType?.[type] || {};\n\n  // Stop loading if we have all the messages or server returned 0\n  if (totalCount !== undefined && (!totalCount || (foundIds && foundIds.length >= totalCount))) {\n    return;\n  }\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  const offsetPeer = nextOffsetPeerId ? selectChat(global, nextOffsetPeerId) : undefined;\n\n  searchMessagesGlobal(global, {\n    query,\n    type,\n    offsetRate: nextOffsetRate,\n    offsetId: nextOffsetId,\n    offsetPeer,\n    chat,\n    tabId,\n  });\n});\n\naddActionHandler('searchPopularBotApps', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const popularBotApps = selectTabState(global, tabId).globalSearch.popularBotApps;\n  const offset = popularBotApps?.nextOffset;\n  if (popularBotApps?.peerIds && !offset) return; // Already fetched all\n\n  global = updateGlobalSearchFetchingStatus(global, { botApps: true }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchPopularAppBots', { offset });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateGlobalSearch(global, {\n    popularBotApps: {\n      peerIds: [...(popularBotApps?.peerIds || []), ...result.peerIds],\n      nextOffset: result.nextOffset,\n    },\n  }, tabId);\n  global = updateGlobalSearchFetchingStatus(global, { botApps: false }, tabId);\n\n  setGlobal(global);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(global: T, params: {\n  query?: string;\n  type: ApiGlobalMessageSearchType;\n  offsetRate?: number;\n  offsetId?: number;\n  offsetPeer?: ApiChat;\n  chat?: ApiChat;\n  maxDate?: number;\n  minDate?: number;\n  tabId: TabArgs<T>[0];\n}) {\n  const {\n    query = '', type, offsetRate, offsetId, offsetPeer, chat, maxDate, minDate, tabId = getCurrentTabId(),\n  } = params;\n  let result: {\n    messages: ApiMessage[];\n    userStatusesById?: Record<number, ApiUserStatus>;\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextOffsetRate?: number;\n    nextOffsetId?: number;\n    nextOffsetPeerId?: string;\n  } | undefined;\n\n  let messageLink: ApiMessage | undefined;\n\n  if (chat) {\n    const inChatResultRequest = callApi('searchMessagesInChat', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [inChatResult, topics] = await Promise.all([inChatResultRequest, topicsRequest]);\n\n    if (inChatResult) {\n      const {\n        messages, totalCount, nextOffsetId,\n      } = inChatResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        totalCount,\n        nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      offsetId,\n      offsetPeer,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n    if (isDeepLink(query)) {\n      const link = tryParseDeepLink(query);\n      if (link?.type === 'publicMessageLink') {\n        messageLink = await getMessageByPublicLink(global, link);\n      } else if (link?.type === 'privateMessageLink') {\n        messageLink = await getMessageByPrivateLink(global, link);\n      }\n    }\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  if (messageLink) {\n    result.totalCount = result.messages.unshift(messageLink);\n  }\n\n  const {\n    messages, userStatusesById, totalCount, nextOffsetRate, nextOffsetId, nextOffsetPeerId,\n  } = result;\n\n  if (userStatusesById) {\n    global = addUserStatuses(global, userStatusesById);\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextOffsetRate,\n    nextOffsetId,\n    nextOffsetPeerId,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function getMessageByPublicLink(global: GlobalState, link: { username: string; messageId: number }) {\n  const { username, messageId } = link;\n  const localChat = selectChatByUsername(global, username);\n  if (localChat) {\n    return getChatGroupOrChannelMessage(global, localChat, messageId);\n  }\n  const { chat } = await callApi('getChatByUsername', username) ?? {};\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nfunction getMessageByPrivateLink(global: GlobalState, link: { channelId: string; messageId: number }) {\n  const { channelId, messageId } = link;\n  const internalChannelId = toChannelId(channelId);\n  const chat = selectChat(global, internalChannelId);\n  if (!chat) {\n    return undefined;\n  }\n  return getChatGroupOrChannelMessage(global, chat, messageId);\n}\n\nasync function getChatGroupOrChannelMessage(global: GlobalState, chat: ApiChat, messageId: number) {\n  if (!isChatGroup(chat) && !isChatChannel(chat)) {\n    return undefined;\n  }\n  const localMessage = selectChatMessage(global, chat.id, messageId);\n  if (localMessage) {\n    return localMessage;\n  }\n  const result = await callApi('fetchMessage', { chat, messageId });\n  return result === 'MESSAGE_DELETED' ? undefined : result?.message;\n}\n","import type {\n  ChatMediaSearchParams, ChatMediaSearchSegment, LoadingState, SharedMediaType, ThreadId,\n} from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { type ApiChat, MAIN_THREAD_ID } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  CHAT_MEDIA_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE,\n} from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, isInsideSortedArrayRange } from '../../../util/iteratees';\nimport { getSearchResultKey } from '../../../util/keys/searchResultKey';\nimport { callApi } from '../../../api/gramjs';\nimport { getChatMediaMessageIds, getIsSavedDialog, isSameReaction } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  addUserStatuses,\n  initializeChatMediaSearchResults,\n  mergeWithChatMediaSearchSegment,\n  setChatMediaSearchLoading,\n  updateChatMediaSearchResults,\n  updateMiddleSearch,\n  updateMiddleSearchResults,\n  updateSharedMediaSearchResults,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCurrentChatMediaSearch,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectCurrentSharedMediaSearch,\n} from '../../selectors';\n\nconst MEDIA_PRELOAD_OFFSET = 9;\n\naddActionHandler('performMiddleSearch', async (global, actions, payload): Promise<void> => {\n  const {\n    query, chatId, threadId = MAIN_THREAD_ID, tabId = getCurrentTabId(),\n  } = payload || {};\n\n  if (!chatId) return;\n\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = realChatId ? selectChat(global, realChatId) : undefined;\n  let currentSearch = selectCurrentMiddleSearch(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  if (!currentSearch) {\n    global = updateMiddleSearch(global, realChatId, threadId, {}, tabId);\n    setGlobal(global);\n    global = getGlobal();\n  }\n  currentSearch = selectCurrentMiddleSearch(global, tabId)!;\n\n  const {\n    results, savedTag, type, isHashtag,\n  } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n  const offsetRate = results?.nextOffsetRate;\n  const offsetPeerId = results?.nextOffsetPeerId;\n  const offsetPeer = offsetPeerId ? selectChat(global, offsetPeerId) : undefined;\n\n  const shouldHaveQuery = isHashtag || !savedTag;\n  if (shouldHaveQuery && !query) {\n    global = updateMiddleSearch(global, realChatId, threadId, {\n      fetchingQuery: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateMiddleSearch(global, realChatId, threadId, {\n    fetchingQuery: query,\n  }, tabId);\n  setGlobal(global);\n\n  let result;\n  if (type === 'chat') {\n    result = await callApi('searchMessagesInChat', {\n      chat,\n      type: 'text',\n      query: isHashtag ? `#${query}` : query,\n      threadId,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      isSavedDialog,\n      savedTag,\n    });\n  }\n\n  if (type === 'myChats') {\n    result = await callApi('searchMessagesGlobal', {\n      type: 'text',\n      query: isHashtag ? `#${query}` : query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetRate,\n      offsetPeer,\n    });\n  }\n\n  if (type === 'channels') {\n    result = await callApi('searchHashtagPosts', {\n      hashtag: query!,\n      limit: MESSAGE_SEARCH_SLICE,\n      offsetId,\n      offsetPeer,\n      offsetRate,\n    });\n  }\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId, nextOffsetRate, nextOffsetPeerId,\n  } = result;\n\n  const newFoundIds = messages.map(getSearchResultKey);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentMiddleSearch(global, tabId);\n  const hasTagChanged = currentSearch?.savedTag && !isSameReaction(savedTag, currentSearch.savedTag);\n  const hasSearchChanged = currentSearch?.fetchingQuery && currentSearch.fetchingQuery !== query;\n  if (!currentSearch || hasSearchChanged || hasTagChanged) {\n    return;\n  }\n\n  const resultChatId = isSavedDialog ? currentUserId : chat.id;\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addMessages(global, messages);\n  global = updateMiddleSearch(global, resultChatId, threadId, {\n    fetchingQuery: undefined,\n  }, tabId);\n  global = updateMiddleSearchResults(global, resultChatId, threadId, {\n    foundIds: newFoundIds,\n    totalCount,\n    nextOffsetId,\n    nextOffsetRate,\n    nextOffsetPeerId,\n    query: query || '',\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchHashtag', (global, actions, payload): ActionReturnType => {\n  const { hashtag, tabId = getCurrentTabId() } = payload;\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (!messageList) {\n    return;\n  }\n\n  const cleanQuery = hashtag.replace(/^#/, '');\n\n  actions.updateMiddleSearch({\n    chatId: messageList.chatId,\n    threadId: messageList.threadId,\n    update: {\n      isHashtag: true,\n      requestedQuery: cleanQuery,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('searchSharedMediaMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, isSavedDialog, tabId);\n});\naddActionHandler('searchChatMediaMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, currentMediaMessageId, limit, direction, tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId || !threadId || !currentMediaMessageId) {\n    return;\n  }\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId);\n  if (!chat) {\n    return;\n  }\n  let currentSearch = selectCurrentChatMediaSearch(global, tabId);\n\n  if (!currentSearch) {\n    global = initializeChatMediaSearchResults(global, chatId, threadId, tabId);\n    setGlobal(global);\n    currentSearch = selectCurrentChatMediaSearch(global, tabId);\n    if (!currentSearch) {\n      return;\n    }\n    global = getGlobal();\n  }\n\n  void searchChatMedia(global,\n    chat,\n    threadId,\n    currentMediaMessageId,\n    currentSearch,\n    direction,\n    isSavedDialog,\n    limit,\n    tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  isSavedDialog?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    threadId,\n    offsetId,\n    isSavedDialog,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    userStatusesById, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentSharedMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n  global = updateSharedMediaSearchResults(\n    global, resultChatId, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId,\n  );\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, isSavedDialog, tabId);\n  }\n}\n\nfunction selectCurrentChatMediaSearchSegment(\n  params: ChatMediaSearchParams,\n  currentMediaMessageId: number,\n): ChatMediaSearchSegment | undefined {\n  if (isInsideSortedArrayRange(currentMediaMessageId, params.currentSegment.foundIds)) {\n    return params.currentSegment;\n  }\n  const index = params.segments.findIndex(\n    (segment) => isInsideSortedArrayRange(currentMediaMessageId, segment.foundIds),\n  );\n\n  if (index === -1) {\n    if (params.currentSegment && params.currentSegment.foundIds.length) {\n      params.segments.push(params.currentSegment);\n    }\n    return undefined;\n  }\n  const result = params.segments.splice(index, 1)[0];\n  params.segments.push(params.currentSegment);\n  return result;\n}\n\nfunction calcChatMediaSearchAddOffset(\n  direction: LoadMoreDirection,\n  limit: number,\n): number {\n  if (direction === LoadMoreDirection.Backwards) return 0;\n  if (direction === LoadMoreDirection.Forwards) return -(limit + 1);\n  return -(Math.round(limit / 2) + 1);\n}\n\nfunction calcChatMediaSearchOffsetId(\n  direction: LoadMoreDirection,\n  currentMessageId: number,\n  segment?: ChatMediaSearchSegment,\n) : number {\n  if (!segment) return currentMessageId;\n  if (direction === LoadMoreDirection.Backwards) return segment.foundIds[0];\n  if (direction === LoadMoreDirection.Forwards) return segment.foundIds[segment.foundIds.length - 1];\n  return currentMessageId;\n}\n\nfunction calcLoadMoreDirection(currentMessageId: number, currentSegment?: ChatMediaSearchSegment) {\n  if (!currentSegment) return LoadMoreDirection.Around;\n  const currentSegmentFoundIdsCount = currentSegment.foundIds.length;\n\n  const idIndexInSegment = currentSegment.foundIds.indexOf(currentMessageId);\n  if (idIndexInSegment === -1) return LoadMoreDirection.Around;\n\n  if (currentSegment.loadingState.areAllItemsLoadedBackwards\n    && currentSegment.loadingState.areAllItemsLoadedForwards) {\n    return undefined;\n  }\n\n  const halfMediaCount = Math.floor(currentSegmentFoundIdsCount / 2);\n\n  const preloadOffset = MEDIA_PRELOAD_OFFSET > halfMediaCount ? 0 : MEDIA_PRELOAD_OFFSET;\n  const lastMediaIndex = currentSegmentFoundIdsCount - 1;\n\n  if (idIndexInSegment <= preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedBackwards) return undefined;\n    return LoadMoreDirection.Backwards;\n  }\n  if (idIndexInSegment >= lastMediaIndex - preloadOffset) {\n    if (currentSegment.loadingState.areAllItemsLoadedForwards) return undefined;\n    return LoadMoreDirection.Forwards;\n  }\n  return undefined;\n}\n\nfunction calcLoadingState(\n  direction : LoadMoreDirection,\n  limit : number, newFoundIdsCount : number,\n  currentSegment?: ChatMediaSearchSegment,\n) : LoadingState {\n  let areAllItemsLoadedForwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedForwards);\n  let areAllItemsLoadedBackwards = Boolean(currentSegment?.loadingState.areAllItemsLoadedBackwards);\n\n  if (newFoundIdsCount < limit) {\n    if (direction === LoadMoreDirection.Forwards) {\n      areAllItemsLoadedForwards = true;\n    } else if (direction === LoadMoreDirection.Backwards) {\n      areAllItemsLoadedBackwards = true;\n    }\n  }\n  return {\n    areAllItemsLoadedForwards,\n    areAllItemsLoadedBackwards,\n  };\n}\n\nasync function searchChatMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: ThreadId,\n  currentMediaMessageId: number,\n  chatMediaSearchParams: ChatMediaSearchParams,\n  direction?: LoadMoreDirection,\n  isSavedDialog?: boolean,\n  limit = CHAT_MEDIA_SLICE,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const { isSynced } = global;\n  if (!isSynced || chatMediaSearchParams.isLoading) {\n    return;\n  }\n  let currentSegment = selectCurrentChatMediaSearchSegment(chatMediaSearchParams, currentMediaMessageId);\n\n  if (direction === undefined) {\n    direction = calcLoadMoreDirection(currentMediaMessageId, currentSegment);\n  }\n\n  if (direction === undefined) {\n    return;\n  }\n\n  const offsetId = calcChatMediaSearchOffsetId(direction, currentMediaMessageId, currentSegment);\n  const addOffset = calcChatMediaSearchAddOffset(direction, limit);\n\n  const resultChatId = isSavedDialog ? global.currentUserId! : chat.id;\n\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('searchMessagesInChat', {\n    chat,\n    type: 'media',\n    limit,\n    threadId,\n    offsetId,\n    isSavedDialog,\n    addOffset,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, userStatusesById,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = addUserStatuses(global, userStatusesById);\n  global = addChatMessagesById(global, resultChatId, byId);\n\n  const loadingState = calcLoadingState(direction, limit, newFoundIds.length, currentSegment);\n\n  const filteredIds = getChatMediaMessageIds(byId, newFoundIds, false);\n  currentSegment = mergeWithChatMediaSearchSegment(\n    filteredIds,\n    loadingState,\n    currentSegment,\n  );\n\n  global = updateChatMediaSearchResults(\n    global, resultChatId, threadId, currentSegment, chatMediaSearchParams, tabId,\n  );\n  global = setChatMediaSearchLoading(global, resultChatId, threadId, false, tabId);\n  setGlobal(global);\n}\n","import type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChat, updateChatFullInfo, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, shouldDisableUsernames, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n  if (shouldDisableUsernames) {\n    await callApi('deactivateAllUsernames', { chat });\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chat.id, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites } = result;\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, { joinRequests: [] });\n  global = updateChatFullInfo(global, chatId, {\n    recentRequesterIds: [],\n    requestsPending: 0,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n\naddActionHandler('resetManagementError', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload || {};\n\n  return updateManagement(global, chatId, { error: undefined }, tabId);\n});\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ThreadId } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport {\n  buildCollectionByKey, omitUndefined, pick, unique,\n} from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { getIsSavedDialog } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addChatMessagesById,\n  addMessages,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread,\n  updateThreadInfo,\n  updateUsers,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n  selectTopics,\n} from '../../selectors';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const {\n    loadAllChats, preloadTopChatMessages, loadAllStories, loadAllHiddenStories,\n  } = actions;\n\n  initFolderManager();\n\n  loadAllChats({\n    listType: 'active',\n    whenFirstBatchDone: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        isSyncing: false,\n        isSynced: true,\n        isFetchingDifference: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      loadAllChats({ listType: 'archived' });\n      loadAllChats({ listType: 'saved' });\n      preloadTopChatMessages();\n      loadAllStories();\n      loadAllHiddenStories();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = omitUndefined({\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        });\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  // Memoize last messages\n  const lastMessages = Object.entries(global.chats.lastMessageIds.all || {}).map(([chatId, messageId]) => (\n    selectChatMessage(global, chatId, Number(messageId))\n  )).filter(Boolean);\n  const savedLastMessages = Object.values(global.chats.lastMessageIds.saved || {}).map((messageId) => (\n    selectChatMessage(global, global.currentUserId!, Number(messageId))\n  )).filter(Boolean);\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentChatId && currentThreadId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const [result, resultDiscussion] = await Promise.all([\n        loadTopMessages(\n          global,\n          currentChatId,\n          activeThreadId,\n        ),\n        activeThreadId !== MAIN_THREAD_ID && !getIsSavedDialog(currentChat.id, activeThreadId, global.currentUserId)\n          ? callApi('fetchDiscussionMessage', {\n            chat: currentChat,\n            messageId: Number(activeThreadId),\n          }) : undefined,\n      ]);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topics = selectTopics(global, currentChatId);\n        const topicLastMessages = topics ? Object.values(topics)\n          .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n          .filter(Boolean)\n          : [];\n\n        const resultMessageIds = result.messages.map(({ id }) => id);\n        const messagesThreadInfos = pick(global.messages.byChatId[currentChatId].threadsById, resultMessageIds);\n\n        const isDiscussionStartLoaded = !result.messages.length\n          || result.messages.some(({ id }) => id === resultDiscussion?.firstMessageId);\n        const threadStartMessages = (isDiscussionStartLoaded && resultDiscussion?.topMessages) || [];\n        const allMessages = threadStartMessages.concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = unique(allMessages.map(({ id }) => id));\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.entries(messagesThreadInfos).forEach(([id, thread]) => {\n          if (!thread?.threadInfo) return;\n          global = updateThreadInfo(global, currentChatId, id, thread.threadInfo);\n        });\n\n        if (threadInfo && !threadInfo.isCommentsInfo && activeThreadId !== MAIN_THREAD_ID) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, {\n            ...pick(threadInfo, ['fromChannelId', 'fromMessageId']),\n          });\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: Number(currentThreadId), shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  // Restore last messages\n  global = addMessages(global, lastMessages);\n  global = addMessages(global, savedLastMessages);\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages<T extends GlobalState>(global: T, chatId: string, threadId: ThreadId) {\n  const currentUserId = global.currentUserId!;\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const realChatId = isSavedDialog ? String(threadId) : chatId;\n\n  const chat = selectChat(global, realChatId)!;\n\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: !isSavedDialog ? chat.lastReadInboxMessageId : undefined,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n    isSavedDialog,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState, isSynced } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || isSynced || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? oldTranslate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const {\n    hash, areCallsEnabled, areSecretChatsEnabled, isConfirmed,\n  } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n    isConfirmed,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n          ...(isConfirmed && { isUnconfirmed: undefined }),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { webAuthorizations } = result;\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import type { ApiUser } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ManagementProgress } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { throttle } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { isUserBot, isUserId } from '../../helpers';\nimport {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\nimport {\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChats,\n  updateManagementProgress,\n  updatePeerPhotos,\n  updatePeerPhotosIsLoading,\n  updateUser,\n  updateUserCommonChats,\n  updateUserFullInfo,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPeer,\n  selectPeerPhotos,\n  selectTabState,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../selectors';\n\nconst PROFILE_PHOTOS_FIRST_LOAD_LIMIT = 10;\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId, withPhotos } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const result = await callApi('fetchFullUser', { id, accessHash });\n  if (!result?.user) return;\n\n  global = getGlobal();\n  const fullInfo = selectUserFullInfo(global, userId);\n  const { user: newUser, fullInfo: newFullInfo } = result;\n  const profilePhotos = selectPeerPhotos(global, userId);\n  const hasChangedAvatar = user.avatarPhotoId !== newUser.avatarPhotoId;\n  const hasChangedProfilePhoto = fullInfo?.profilePhoto?.id !== newFullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = fullInfo?.fallbackPhoto?.id !== newFullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = fullInfo?.personalPhoto?.id !== newFullInfo?.personalPhoto?.id;\n  const hasChangedPhoto = hasChangedAvatar\n    || hasChangedProfilePhoto\n    || hasChangedFallbackPhoto\n    || hasChangedPersonalPhoto;\n\n  global = updateUser(global, userId, result.user);\n  global = updateUserFullInfo(global, userId, result.fullInfo);\n  global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n\n  setGlobal(global);\n  if (withPhotos || (profilePhotos?.count && hasChangedPhoto)) {\n    actions.loadMoreProfilePhotos({ peerId: userId, shouldInvalidateCache: true });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n  const user = selectUser(global, userId);\n  const commonChats = selectUserCommonChats(global, userId);\n  if (!user || isUserBot(user) || commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchCommonChats', user, commonChats?.maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chatIds, count } = result;\n\n  const ids = unique((commonChats?.ids || []).concat(chatIds));\n\n  global = getGlobal();\n  global = updateUserCommonChats(global, user.id, {\n    maxId: chatIds.length ? chatIds[chatIds.length - 1] : undefined,\n    ids,\n    isFullyLoaded: ids.length >= count,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n    actions.loadPeerStories({ peerId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadMoreProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { peerId, shouldInvalidateCache, isPreload } = payload;\n  const isPrivate = isUserId(peerId);\n\n  const user = isPrivate ? selectUser(global, peerId) : undefined;\n  const chat = !isPrivate ? selectChat(global, peerId) : undefined;\n  const peer = user || chat;\n  const profilePhotos = selectPeerPhotos(global, peerId);\n  if (!peer?.avatarPhotoId) {\n    return;\n  }\n\n  if (profilePhotos && !shouldInvalidateCache && (isPreload || !profilePhotos.nextOffset)) return;\n\n  global = updatePeerPhotosIsLoading(global, peerId, true);\n  setGlobal(global);\n\n  global = getGlobal();\n\n  let userFullInfo = selectUserFullInfo(global, peerId);\n  let chatFullInfo = selectChatFullInfo(global, peerId);\n  if (user && !userFullInfo) {\n    const { id, accessHash } = user;\n    const result = await callApi('fetchFullUser', { id, accessHash });\n    if (!result?.user) {\n      return;\n    }\n    userFullInfo = result.fullInfo;\n  }\n\n  if (chat && !chatFullInfo) {\n    const result = await callApi('fetchFullChat', chat);\n    if (!result?.fullInfo) {\n      return;\n    }\n\n    chatFullInfo = result.fullInfo;\n  }\n\n  const peerFullInfo = userFullInfo || chatFullInfo;\n  if (!peerFullInfo) return;\n\n  const offset = profilePhotos?.nextOffset;\n  const limit = !offset || isPreload || shouldInvalidateCache ? PROFILE_PHOTOS_FIRST_LOAD_LIMIT : undefined;\n\n  const result = await callApi('fetchProfilePhotos', {\n    peer,\n    offset,\n    limit,\n  });\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const {\n    photos, count, nextOffsetId,\n  } = result;\n\n  global = updatePeerPhotos(global, peerId, {\n    newPhotos: photos,\n    count,\n    nextOffset: nextOffsetId,\n    fullInfo: peerFullInfo,\n    shouldInvalidateCache,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const {\n      accountResultIds, globalResultIds,\n    } = result;\n\n    const localUserIds = accountResultIds.filter(isUserId);\n    const globalUserIds = globalResultIds.filter(isUserId);\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const peer = selectPeer(global, chatId);\n  if (!peer) {\n    return;\n  }\n\n  void callApi('reportSpam', peer);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n\naddActionHandler('saveCloseFriends', async (global, actions, payload): Promise<void> => {\n  const { userIds } = payload;\n\n  const result = await callApi('saveCloseFriends', userIds);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global.contactList?.userIds.forEach((userId) => {\n    const { isCloseFriend } = global.users.byId[userId] || {};\n    if (isCloseFriend && !userIds.includes(userId)) {\n      global = updateUser(global, userId, {\n        isCloseFriend: undefined,\n      });\n    }\n  });\n  userIds.forEach((userId) => {\n    global = updateUser(global, userId, {\n      isCloseFriend: true,\n    });\n  });\n  setGlobal(global);\n});\n","import { IS_ANDROID, IS_IOS } from './windowEnvironment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { InlineBotSettings } from '../../types';\nimport type {\n  GlobalState, TabArgs, WebApp, WebAppModalStateType,\n} from '../types';\n\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\nimport { getWebAppKey } from '../helpers/bots';\nimport { selectTabState } from '../selectors';\nimport { updateTabState } from './tabs';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n\nexport function updateWebApp <T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  const key = webApp && getWebAppKey(webApp);\n  const originalWebApp = key ? openedWebApps[key] : undefined;\n\n  if (!originalWebApp) return global;\n\n  const updatedValue = {\n    ...originalWebApp,\n    ...webApp,\n  };\n\n  const updatedWebAppKey = getWebAppKey(updatedValue);\n  if (!updatedWebAppKey) return global;\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n  const activeWebAppKey = activeWebApp && getWebAppKey(activeWebApp);\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...updatedWebAppKey === activeWebAppKey && {\n        activeWebApp: updatedValue,\n      },\n      openedWebApps: {\n        ...openedWebApps,\n        [updatedWebAppKey]: updatedValue,\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function activateWebAppIfOpen<T extends GlobalState>(\n  global: T, webAppKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!openedWebApps[webAppKey]) {\n    return global;\n  }\n\n  const newActiveWebApp = openedWebApps[webAppKey];\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      modalState: 'maximized',\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function addWebAppToOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp,\n  makeActive: boolean = true, openModalIfNotOpen: boolean = true,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const key = getWebAppKey(webApp);\n\n  if (!key) return global;\n  const newOpenedKeys = [...currentTabState.webApps.openedOrderedKeys];\n  if (!newOpenedKeys.includes(key)) newOpenedKeys.push(key);\n\n  const newSessionKeys = [...currentTabState.webApps.sessionKeys];\n  if (!newSessionKeys.includes(key)) newSessionKeys.push(key);\n\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...makeActive && { activeWebApp: webApp },\n      isModalOpen: openModalIfNotOpen,\n      modalState: 'maximized',\n      openedWebApps: {\n        ...openedWebApps,\n        [key]: webApp,\n      },\n      openedOrderedKeys: newOpenedKeys,\n      sessionKeys: newSessionKeys,\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function removeActiveWebAppFromOpenList<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  if (!currentTabState.webApps.activeWebApp) return global;\n\n  return removeWebAppFromOpenList(global, currentTabState.webApps.activeWebApp, false, tabId);\n}\n\nexport function removeWebAppFromOpenList<T extends GlobalState>(\n  global: T, webApp: WebApp, skipClosingConfirmation?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n\n  if (!skipClosingConfirmation && webApp.shouldConfirmClosing) {\n    return updateWebApp(global, { ...webApp, isCloseModalOpen: true }, tabId);\n  }\n\n  const updatedOpenedWebApps = { ...openedWebApps };\n  const removingWebAppKey = getWebAppKey(webApp);\n\n  let newOpenedKeys = currentTabState.webApps.openedOrderedKeys;\n\n  if (removingWebAppKey) {\n    delete updatedOpenedWebApps[removingWebAppKey];\n    newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((key) => key !== removingWebAppKey);\n  }\n\n  const activeWebApp = currentTabState.webApps.activeWebApp;\n\n  const isRemovedAppActive = activeWebApp && (getWebAppKey(activeWebApp) === getWebAppKey(webApp));\n\n  const openedWebAppsValues = Object.values(updatedOpenedWebApps);\n  const openedWebAppsCount = openedWebAppsValues.length;\n\n  global = updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      ...isRemovedAppActive && {\n        activeWebApp: openedWebAppsCount\n          ? openedWebAppsValues[openedWebAppsCount - 1] : undefined,\n      },\n      openedWebApps: updatedOpenedWebApps,\n      openedOrderedKeys: newOpenedKeys,\n      ...!openedWebAppsCount && {\n        sessionKeys: [],\n      },\n    },\n  }, tabId);\n\n  return global;\n}\n\nexport function clearOpenedWebApps<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n\n  const webAppsNotAllowedToClose = Object.fromEntries(\n    Object.entries(currentTabState.webApps.openedWebApps).filter(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      ([url, webApp]) => webApp.shouldConfirmClosing,\n    ),\n  );\n\n  const webAppsNotAllowedToCloseValues = Object.values(webAppsNotAllowedToClose);\n  const hasNotAllowedToCloseApps = webAppsNotAllowedToCloseValues.length > 0;\n\n  if (!hasNotAllowedToCloseApps) {\n    return updateTabState(global, {\n      webApps: {\n        ...currentTabState.webApps,\n        activeWebApp: undefined,\n        openedWebApps: {},\n        openedOrderedKeys: [],\n        sessionKeys: [],\n      },\n    }, tabId);\n  }\n\n  const currentActiveWebApp = currentTabState.webApps.activeWebApp;\n\n  const newActiveWebApp = currentActiveWebApp?.shouldConfirmClosing\n    ? currentActiveWebApp : webAppsNotAllowedToCloseValues[0];\n\n  newActiveWebApp.isCloseModalOpen = true;\n\n  const key = getWebAppKey(newActiveWebApp);\n\n  if (key) webAppsNotAllowedToClose[key] = newActiveWebApp;\n  const newOpenedKeys = currentTabState.webApps.openedOrderedKeys.filter((k) => k in webAppsNotAllowedToClose);\n\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      activeWebApp: newActiveWebApp,\n      openedWebApps: webAppsNotAllowedToClose,\n      openedOrderedKeys: newOpenedKeys,\n    },\n  }, tabId);\n}\n\nexport function hasOpenedWebApps<T extends GlobalState>(\n  global: T, ...[tabId = getCurrentTabId()]: TabArgs<T>\n): boolean {\n  return Object.keys(selectTabState(global, tabId).webApps.openedWebApps).length > 0;\n}\n\nexport function replaceWebAppModalState<T extends GlobalState>(\n  global: T, modalState: WebAppModalStateType,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      modalState,\n    },\n  }, tabId);\n}\n\nexport function replaceIsWebAppModalOpen<T extends GlobalState>(\n  global: T, value: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const currentTabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    webApps: {\n      ...currentTabState.webApps,\n      isModalOpen: value,\n    },\n  }, tabId);\n}\n","import type { InlineBotSettings } from '../../../types';\nimport type { RequiredGlobalActions } from '../../index';\nimport type {\n  ActionReturnType, GlobalState, TabArgs, WebApp,\n} from '../../types';\nimport {\n  type ApiChat, type ApiChatType, type ApiContact, type ApiInputMessageReplyInfo, type ApiPeer, type ApiUrlAuthResult,\n  MAIN_THREAD_ID,\n} from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { BOT_FATHER_USERNAME, GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport PopupManager from '../../../util/PopupManager';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { debounce } from '../../../util/schedulers';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  getWebAppKey,\n} from '../../helpers/bots';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  removeBlockedUser, updateManagementProgress, updateUser, updateUserFullInfo,\n} from '../../reducers';\nimport {\n  activateWebAppIfOpen,\n  addWebAppToOpenList, clearOpenedWebApps, hasOpenedWebApps,\n  removeActiveWebAppFromOpenList, removeWebAppFromOpenList,\n  replaceInlineBotSettings, replaceInlineBotsIsLoading,\n  replaceIsWebAppModalOpen, replaceWebAppModalState, updateWebApp,\n} from '../../reducers/bots';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectBot,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectIsTrustedBot,\n  selectMessageReplyInfo,\n  selectPeer,\n  selectSendAs,\n  selectSender,\n  selectTabState,\n  selectUser,\n  selectUserFullInfo,\n} from '../../selectors';\nimport { fetchChatByUsername } from './chats';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\nlet botFatherId: string | null;\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, button, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'copy': {\n      copyTextToClipboard(button.copyText);\n      actions.showNotification({ message: oldTranslate('ExactTextCopied', button.copyText), tabId });\n      break;\n    }\n    case 'callback': {\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName || '',\n          lastName: user.lastName || '',\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        chatId: chat.id, messageId: receiptMessageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      actions.openInvoice({\n        type: 'message',\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      if (!sender) {\n        return;\n      }\n\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: sender.id, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const sender = selectSender(global, message);\n      const botId = message.viaBotId || sender?.id;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  void sendBotCommand(\n    chat, command, selectDraft(global, chat.id, threadId)?.replyInfo, selectSendAs(global, chat.id), lastMessageId,\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  const result = await callApi('unblockUser', { user: bot });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedUser(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, '/start', undefined, selectSendAs(global, chatId), lastMessageId);\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadTopBotApps', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topBotApps;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopBotApps');\n  if (!result) {\n    return;\n  }\n\n  const { ids } = result;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    topBotApps: {\n      ...global.topBotApps,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, filter, tabId = getCurrentTabId(),\n  } = payload;\n  let {\n    botId,\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n\n  if (!botId && messageId) {\n    const message = selectChatMessage(global, chat.id, messageId);\n    if (!message) {\n      return undefined;\n    }\n    const sender = selectSender(global, message);\n    botId = message.viaBotId || sender?.id;\n  }\n\n  if (!botId) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, botId);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: {\n      text: `@${botSender.usernames![0].username} ${query}`,\n    },\n    chatId: isSamePeer ? chat.id : undefined,\n    filter,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt, messageList,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!id) {\n    return;\n  }\n\n  const { chatId, threadId } = messageList;\n  const chat = selectChat(global, chatId)!;\n  const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n\n  const replyInfo = selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo);\n\n  actions.resetDraftReplyInfo({ tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyInfo,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('sharePhoneWithBot', async (global, actions, payload): Promise<void> => {\n  const { botId } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n\n  let fullInfo = selectUserFullInfo(global, botId);\n  if (!fullInfo) {\n    const result = await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n    fullInfo = result?.fullInfo;\n  }\n\n  if (fullInfo?.isBlocked) {\n    await callApi('unblockUser', { user: bot });\n  }\n\n  global = getGlobal();\n  const chat = selectChat(global, botId);\n  const currentUser = selectUser(global, global.currentUserId!)!;\n\n  if (!chat) return;\n  const lastMessageId = selectChatLastMessageId(global, chat.id);\n\n  await callApi('sendMessage', {\n    chat,\n    contact: {\n      mediaType: 'contact',\n      firstName: currentUser.firstName || '',\n      lastName: currentUser.lastName || '',\n      phoneNumber: currentUser.phoneNumber || '',\n      userId: currentUser.id,\n    },\n    lastMessageId,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText, isFromSideMenu, isFromSwitchWebView, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', {\n    url,\n    bot,\n    theme,\n    startParam,\n    isFromSideMenu,\n    isFromSwitchWebView,\n  });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, url)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const { chatId, threadId = MAIN_THREAD_ID } = currentMessageList || {};\n  const draftReplyInfo = chatId ? selectDraft(global, chatId, threadId)?.replyInfo : undefined;\n  const replyInfo = chatId ? selectMessageReplyInfo(global, chatId, threadId, draftReplyInfo) : undefined;\n\n  const sendAs = chatId ? selectSendAs(global, chatId) : undefined;\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyInfo,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    requestUrl: url,\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    replyInfo,\n    buttonText,\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestMainWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, theme, startParam, shouldMarkBotTrusted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    if (shouldMarkBotTrusted) {\n      actions.markBotTrusted({ botId, isWriteAllowed: true, tabId });\n    } else {\n      global = updateTabState(global, {\n        botTrustRequest: {\n          botId,\n          type: 'webApp',\n          onConfirm: {\n            action: 'requestMainWebView',\n            payload,\n          },\n        },\n      }, tabId);\n      setGlobal(global);\n      return;\n    }\n  }\n\n  const result = await callApi('requestMainWebView', {\n    bot,\n    peer,\n    theme,\n    startParam,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  const newActiveApp: WebApp = {\n    url: webViewUrl,\n    botId,\n    peerId,\n    queryId,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadPreviewMedias', async (global, actions, payload): Promise<void> => {\n  const {\n    botId,\n  } = payload;\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  const medias = await callApi('fetchPreviewMedias', {\n    bot,\n  });\n\n  global = getGlobal();\n  if (medias) {\n    global = {\n      ...global,\n      users: {\n        ...global.users,\n        previewMediaByBotId: {\n          ...global.users.previewMediaByBotId,\n          [botId]: medias,\n        },\n      },\n    };\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('openWebAppTab', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (webApp) {\n    global = getGlobal();\n    global = addWebAppToOpenList(global, webApp, true, true, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('requestAppWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, appName, startApp, theme, isWriteAllowed, isFromConfirm, shouldSkipBotTrustRequest,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (checkIfOpenOrActivate(global, botId, tabId, appName)) return;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  // Native clients require to install attach bots before using their named mini apps\n  const isAttachBotInstalled = Boolean(global.attachMenu.bots[bot.id]);\n  if (bot.isAttachBot && !isFromConfirm && !isAttachBotInstalled) {\n    const result = await callApi('loadAttachBot', {\n      bot,\n    });\n    if (result) {\n      global = getGlobal();\n\n      const attachBot = result.bot;\n      const shouldAskForTos = attachBot.isDisclaimerNeeded || attachBot.isForAttachMenu || attachBot.isForSideMenu;\n\n      if (shouldAskForTos) {\n        global = updateTabState(global, {\n          requestedAttachBotInstall: {\n            bot: attachBot,\n            onConfirm: {\n              action: 'requestAppWebView',\n              payload: {\n                ...payload,\n                isFromConfirm: true,\n              },\n            },\n          },\n        }, tabId);\n        setGlobal(global);\n        return;\n      }\n    }\n  }\n\n  const botApp = await callApi('fetchBotApp', {\n    bot,\n    appName,\n  });\n  global = getGlobal();\n\n  if (!botApp) {\n    actions.showNotification({ message: oldTranslate('lng_username_app_not_found'), tabId });\n    return;\n  }\n\n  const shouldRequestBotTrust = !shouldSkipBotTrustRequest && (botApp.isInactive || !selectIsTrustedBot(global, botId));\n\n  if (shouldRequestBotTrust) {\n    payload.shouldSkipBotTrustRequest = true;\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        shouldRequestWriteAccess: botApp.shouldRequestWriteAccess,\n        type: 'botApp',\n        onConfirm: {\n          action: 'requestAppWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const peer = selectCurrentChat(global, tabId);\n\n  const url = await callApi('requestAppWebView', {\n    peer: peer || bot,\n    app: botApp,\n    startParam: startApp,\n    isWriteAllowed,\n    theme,\n  });\n  global = getGlobal();\n\n  if (!url) return;\n\n  global = getGlobal();\n\n  const peerId = (peer ? peer.id : bot!.id);\n\n  const newActiveApp: WebApp = {\n    url,\n    peerId,\n    botId,\n    appName,\n    buttonText: '',\n  };\n  global = addWebAppToOpenList(global, newActiveApp, true, true, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyInfo, queryId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyInfo,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeActiveWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('updateWebApp', (global, actions, payload): ActionReturnType => {\n  const {\n    webApp, tabId = getCurrentTabId(),\n  } = payload;\n  return updateWebApp(global, webApp, tabId);\n});\n\naddActionHandler('closeActiveWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = removeActiveWebAppFromOpenList(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { webApp, skipClosingConfirmation, tabId = getCurrentTabId() } = payload || {};\n\n  global = removeWebAppFromOpenList(global, webApp, skipClosingConfirmation, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('closeWebAppModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = clearOpenedWebApps(global, tabId);\n  if (!hasOpenedWebApps(global, tabId)) return replaceIsWebAppModalOpen(global, false, tabId);\n\n  return global;\n});\n\naddActionHandler('changeWebAppModalState', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  const newModalState = tabState.webApps.modalState === 'maximized' ? 'minimized' : 'maximized';\n  return replaceWebAppModalState(global, newModalState, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  const activeWebApp = tabState.webApps.activeWebApp;\n  if (!activeWebApp?.url) return undefined;\n\n  const updatedApp = {\n    ...activeWebApp,\n    slug: payload.slug,\n  };\n\n  return updateWebApp(global, updatedApp, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action]({\n      ...(callbackPayload as {}),\n      isWriteAllowed,\n    });\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global): Promise<void> => {\n  await loadAttachBots(global);\n\n  requestActionTimeout({\n    action: 'loadAttachBots',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n});\n\nexport function isWepAppOpened<T extends GlobalState>(\n  global: T, webApp: Partial<WebApp>, tabId: number,\n) {\n  const currentTabState = selectTabState(global, tabId);\n  const openedWebApps = currentTabState.webApps.openedWebApps;\n  const key = getWebAppKey(webApp);\n  if (!key) return false;\n  return openedWebApps[key];\n}\n\nexport function checkIfOpenOrActivate<T extends GlobalState>(\n  global: T, botId: string, tabId: number, requestUrl?: string, webAppName?: string,\n) {\n  const webAppForCheck = { botId, requestUrl, webAppName };\n  if (isWepAppOpened(global, webAppForCheck, tabId)) {\n    const key = getWebAppKey(webAppForCheck);\n    if (key) {\n      global = activateWebAppIfOpen(global, key, tabId);\n      setGlobal(global);\n    }\n    return true;\n  }\n  return false;\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n\n  return result;\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, startParam, isFromConfirm, tabId = getCurrentTabId(),\n  } = payload;\n  const isFromSideMenu = 'isFromSideMenu' in payload && payload.isFromSideMenu;\n\n  const isFromBotMenu = !bot;\n  const shouldDisplayDisclaimer = (!isFromBotMenu && !global.attachMenu.bots[bot.id])\n    || bot?.isInactive || bot?.isDisclaimerNeeded;\n\n  if (!isFromConfirm && shouldDisplayDisclaimer) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload: {\n            ...payload,\n            isFromConfirm: true,\n          },\n        },\n      },\n    }, tabId);\n  }\n\n  const theme = extractCurrentThemeParams();\n  if (isFromSideMenu) {\n    actions.requestSimpleWebView({\n      botId: bot!.id,\n      buttonText: '',\n      isFromSideMenu: true,\n      startParam,\n      theme,\n      tabId,\n    });\n  }\n\n  if ('chatId' in payload) {\n    const { chatId, threadId = MAIN_THREAD_ID, url } = payload;\n    actions.openThread({ chatId, threadId, tabId });\n    actions.requestWebView({\n      url,\n      peerId: chatId!,\n      botId: (isFromBotMenu ? chatId : bot.id)!,\n      theme,\n      buttonText: '',\n      isFromBotMenu,\n      startParam,\n      tabId,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  actions.markBotTrusted({ botId: bot.id, isWriteAllowed, tabId });\n  await callApi('toggleAttachBot', { bot: botUser, isWriteAllowed, isEnabled: true });\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.attachMenuPeerTypes?.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters?.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    ...(result.switchWebview && { switchWebview: result.switchWebview }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, command: string, replyInfo?: ApiInputMessageReplyInfo, sendAs?: ApiPeer, lastMessageId?: number,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyInfo,\n    text: command,\n    sendAs,\n    lastMessageId,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n\naddActionHandler('setBotInfo', async (global, actions, payload): Promise<void> => {\n  const {\n    bot, name, description: about,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { langCode } = payload;\n  if (!langCode) langCode = global.settings.byKey.language;\n\n  const { currentUserId } = global;\n  if (!currentUserId || !bot) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  if (name || about) {\n    const result = await callApi('setBotInfo', {\n      bot, langCode, name, about,\n    });\n\n    if (result) {\n      global = getGlobal();\n      global = updateUser(\n        global,\n        bot.id,\n        {\n          firstName: name,\n        },\n      );\n      global = updateUserFullInfo(global, bot.id, { bio: about });\n      setGlobal(global);\n    }\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('startBotFatherConversation', async (global, actions, payload): Promise<void> => {\n  const {\n    param,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!botFatherId) {\n    const chat = await fetchChatByUsername(global, BOT_FATHER_USERNAME);\n    if (!chat) {\n      return;\n    }\n    botFatherId = chat.id;\n  }\n\n  if (param) {\n    actions.startBot({ botId: botFatherId, param });\n  }\n\n  actions.openChat({ id: botFatherId, tabId });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import type { ApiFieldError } from '../../api/types';\n\nconst STRIPE_ERRORS: Record<string, ApiFieldError> = {\n  missing_payment_information: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  invalid_number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  number: {\n    field: 'cardNumber',\n    message: 'Incorrect card number',\n  },\n  exp_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  exp_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  invalid_expiry_year: {\n    field: 'expiry',\n    message: 'Incorrect year',\n  },\n  invalid_expiry_month: {\n    field: 'expiry',\n    message: 'Incorrect month',\n  },\n  cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n  invalid_cvc: {\n    field: 'cvv',\n    message: 'Incorrect CVV',\n  },\n};\n\nexport function getStripeError(error: {\n  code: string;\n  message: string;\n  param?: string;\n}) {\n  const { message: description, code, param } = error;\n  const { field, message } = param ? STRIPE_ERRORS[param] : STRIPE_ERRORS[code];\n\n  return { field, message, description };\n}\n","import type { ApiInputInvoiceStarGift, ApiRequestInputInvoice } from '../../../api/types';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\nimport type {\n  ActionReturnType, GlobalState, TabArgs,\n} from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getStripeError } from '../../../util/payments/stripe';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport { callApi } from '../../../api/gramjs';\nimport { isChatChannel, isChatSuperGroup } from '../../helpers';\nimport {\n  getRequestInputInvoice,\n} from '../../helpers/payments';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  closeInvoice,\n  openStarsTransactionFromReceipt,\n  setPaymentStep,\n  setReceipt,\n  setRequestInfoId,\n  setSmartGlocalCardInfo,\n  setStripeCardInfo,\n  updateChatFullInfo,\n  updatePayment,\n  updateShippingOptions,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectPaymentInputInvoice,\n  selectPaymentRequestId,\n  selectProviderPublicToken,\n  selectProviderPublishableKey,\n  selectSmartGlocalCredentials,\n  selectStarsPayment,\n  selectStripeCredentials,\n  selectTabState,\n} from '../../selectors';\n\nconst LOCAL_BOOST_COOLDOWN = 86400; // 24 hours\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  validateRequestedInfo(global, requestInputInvoice, requestInfo, saveInfo, tabId);\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId(), ...inputInvoice } = payload;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n\n  if ('error' in form) {\n    setGlobal(global);\n    return;\n  }\n\n  if (form.type === 'regular') {\n    global = updatePayment(global, {\n      inputInvoice: payload,\n      form,\n      isPaymentModalOpen: true,\n      isExtendedMedia: (payload as any).isExtendedMedia,\n      status: undefined,\n    }, tabId);\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n\n  if (form.type === 'stars') {\n    global = updateTabState(global, {\n      starsPayment: {\n        inputInvoice,\n        form,\n        status: 'pending',\n      },\n    }, tabId);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('sendStarGift', async (global, actions, payload): Promise<void> => {\n  const {\n    gift, userId, message, shouldHideName, tabId = getCurrentTabId(),\n  } = payload;\n\n  const balance = global.stars?.balance;\n\n  if (balance === undefined) return;\n\n  if (balance < gift.stars) {\n    actions.openStarsBalanceModal({ tabId });\n    return;\n  }\n\n  const inputInvoice: ApiInputInvoiceStarGift = {\n    type: 'stargift',\n    userId,\n    giftId: gift.id,\n    message,\n    shouldHideName,\n  };\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: true,\n  }, tabId);\n  setGlobal(global);\n\n  const theme = extractCurrentThemeParams();\n  const form = await callApi('getPaymentForm', requestInputInvoice, theme);\n\n  if (!form) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    isPaymentFormLoading: false,\n  }, tabId);\n  setGlobal(global);\n\n  if ('error' in form) {\n    return;\n  }\n\n  actions.sendStarPaymentForm({\n    starGift: {\n      inputInvoice,\n      formId: form.formId,\n    },\n    tabId,\n  });\n});\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, messageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (result.receipt.type === 'stars') {\n    global = openStarsTransactionFromReceipt(global, result.receipt, tabId);\n  } else {\n    global = setReceipt(global, result.receipt, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment.form!;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const paymentState = selectTabState(global, tabId).payment;\n  const { form, temporaryPassword, inputInvoice } = paymentState;\n\n  if (!inputInvoice || !form) {\n    return;\n  }\n\n  const { nativeProvider, formId } = form;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'updatePaymentStateCompleted',\n    paymentState,\n    tabId,\n  });\n});\n\naddActionHandler('sendStarPaymentForm', async (global, actions, payload): Promise<void> => {\n  const { starGift, tabId = getCurrentTabId() } = payload;\n  const starPayment = selectStarsPayment(global, tabId);\n  const inputInvoice = starPayment?.inputInvoice || starGift?.inputInvoice;\n  if (!inputInvoice) return;\n\n  const requestInputInvoice = getRequestInputInvoice(global, inputInvoice);\n  if (!requestInputInvoice) {\n    return;\n  }\n\n  const formId = (starPayment.form?.formId || starPayment.subscriptionInfo?.subscriptionFormId || starGift?.formId)!;\n\n  global = updateStarsPayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('sendStarPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateStarsPayment(global, { status: 'failed' }, tabId);\n    setGlobal(global);\n    actions.closeStarsPaymentModal({ tabId });\n    actions.closeGiftModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStarsPayment(global, { status: 'paid' }, tabId);\n  setGlobal(global);\n  actions.closeStarsPaymentModal({ tabId });\n  actions.closeGiftModal({ tabId });\n\n  if ('channelId' in result) {\n    actions.openChat({ id: result.channelId, tabId });\n  }\n\n  actions.apiUpdate({\n    '@type': 'updateStarPaymentStateCompleted',\n    paymentState: starGift ? { inputInvoice } : starPayment,\n    tabId,\n  });\n  actions.loadStarStatus();\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n\n  const tokenizeUrl = selectTabState(global, tabId).payment.form?.nativeParams.tokenizeUrl;\n\n  let url;\n  if (DEBUG_PAYMENT_SMART_GLOCAL) {\n    url = 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card';\n  } else {\n    url = 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n  }\n\n  if (tokenizeUrl?.startsWith('https://')\n      && tokenizeUrl.endsWith('.smart-glocal.com/cds/v1/tokenize/card')) {\n    url = tokenizeUrl;\n  }\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setSmartGlocalCardInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), type, token } = payload;\n  return setSmartGlocalCardInfo(global, {\n    type,\n    token,\n  }, tabId);\n});\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      promo: tabState.premiumModal.promo, // Cache promo\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.closeReactionPicker({ tabId });\n});\n\naddActionHandler('openGiveawayModal', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, prepaidGiveaway,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('getPremiumGiftCodeOptions', {\n    chat,\n  });\n\n  const starOptions = await callApi('fetchStarsGiveawayOptions');\n\n  if (!result || !starOptions) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    giveawayModal: {\n      chatId,\n      gifts: result,\n      isOpen: true,\n      prepaidGiveaway,\n      starOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const gifts = await callApi('getPremiumGiftCodeOptions', {});\n  if (!gifts) return;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftModal: {\n      forUserId,\n      gifts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStarsGiftModal', async (global, actions, payload): Promise<void> => {\n  const {\n    forUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starsGiftOptions = await callApi('getStarsGiftOptions', {});\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    starsGiftModal: {\n      isOpen: true,\n      forUserId,\n      starsGiftOptions,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions?.length) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n\naddActionHandler('openBoostModal', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat || !(isChatChannel(chat) || isChatSuperGroup(chat))) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostStatus', {\n    chat,\n  });\n\n  if (!result) {\n    actions.closeBoostModal({ tabId });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    boostModal: {\n      chatId,\n      boostStatus: result,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const myBoosts = await callApi('fetchMyBoosts');\n\n  if (!myBoosts) return;\n\n  global = getGlobal();\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.boostModal) return;\n\n  global = updateTabState(global, {\n    boostModal: {\n      ...tabState.boostModal,\n      myBoosts: myBoosts.boosts,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openBoostStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const [boostListResult, boostListGiftResult,\n    boostStatusResult] = await Promise.all([\n    callApi('fetchBoostList', { chat }),\n    callApi('fetchBoostList', { chat, isGifts: true }),\n    callApi('fetchBoostStatus', { chat }),\n  ]);\n\n  global = getGlobal();\n  if (!boostListResult || !boostListGiftResult || !boostStatusResult) {\n    global = updateTabState(global, {\n      boostStatistics: undefined,\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      chatId,\n      boostStatus: boostStatusResult,\n      nextOffset: boostListResult.nextOffset,\n      boosts: {\n        count: boostListResult.count,\n        list: boostListResult.boostList,\n      },\n      giftedBoosts: {\n        count: boostListGiftResult?.count,\n        list: boostListGiftResult?.boostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    monetizationStatistics: {\n      chatId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMoreBoosters', async (global, actions, payload): Promise<void> => {\n  const { isGifts, tabId = getCurrentTabId() } = payload || {};\n  let tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const chat = selectChat(global, tabState.boostStatistics.chatId);\n  if (!chat) return;\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      isLoadingBoosters: true,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchBoostList', {\n    chat,\n    offset: tabState.boostStatistics.nextOffset,\n    isGifts,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n\n  tabState = selectTabState(global, tabId);\n  if (!tabState.boostStatistics) return;\n\n  const updatedBoostList = (isGifts\n    ? tabState.boostStatistics.giftedBoosts?.list || []\n    : tabState.boostStatistics.boosts?.list || []).concat(result.boostList);\n\n  global = updateTabState(global, {\n    boostStatistics: {\n      ...tabState.boostStatistics,\n      nextOffset: result.nextOffset,\n      isLoadingBoosters: false,\n      [isGifts ? 'giftedBoosts' : 'boosts']: {\n        count: result.count,\n        list: updatedBoostList,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyBoost', async (global, actions, payload): Promise<void> => {\n  const { chatId, slots, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const oldChatFullInfo = selectChatFullInfo(global, chatId);\n  const oldBoostsApplied = oldChatFullInfo?.boostsApplied || 0;\n\n  const appliedBoostsCount = slots.length;\n\n  let tabState = selectTabState(global, tabId);\n  const oldStatus = tabState.boostModal?.boostStatus;\n\n  if (oldStatus) {\n    const boostsPerLevel = oldStatus.nextLevelBoosts ? oldStatus.nextLevelBoosts - oldStatus.currentLevelBoosts : 1;\n    const newBoosts = oldStatus.boosts + appliedBoostsCount;\n    const isLevelUp = oldStatus.nextLevelBoosts && newBoosts >= oldStatus.nextLevelBoosts;\n    const newCurrentLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! : oldStatus.currentLevelBoosts;\n    const newNextLevelBoosts = isLevelUp ? oldStatus.nextLevelBoosts! + boostsPerLevel : oldStatus.nextLevelBoosts;\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        boostStatus: {\n          ...oldStatus,\n          level: isLevelUp ? oldStatus.level + 1 : oldStatus.level,\n          currentLevelBoosts: newCurrentLevelBoosts,\n          nextLevelBoosts: newNextLevelBoosts,\n          hasMyBoost: true,\n          boosts: newBoosts,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  tabState = selectTabState(global, tabId);\n  const oldMyBoosts = tabState.boostModal?.myBoosts;\n\n  if (oldMyBoosts) {\n    const unixNow = Math.floor(Date.now() / 1000);\n    const newMyBoosts = oldMyBoosts.map((boost) => {\n      if (slots.includes(boost.slot)) {\n        return {\n          ...boost,\n          chatId,\n          date: unixNow,\n          cooldownUntil: unixNow + LOCAL_BOOST_COOLDOWN, // Will be refetched below\n        };\n      }\n      return boost;\n    });\n\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal!,\n        myBoosts: newMyBoosts,\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  const result = await callApi('applyBoost', {\n    slots,\n    chat,\n  });\n\n  global = getGlobal();\n\n  if (!result) {\n    // Rollback local changes\n    const boostModal = selectTabState(global, tabId).boostModal;\n    if (boostModal) {\n      global = updateTabState(global, {\n        boostModal: {\n          ...boostModal,\n          boostStatus: oldStatus,\n          myBoosts: oldMyBoosts,\n        },\n      }, tabId);\n      setGlobal(global);\n    }\n    return;\n  }\n\n  tabState = selectTabState(global, tabId);\n  if (oldChatFullInfo) {\n    global = updateChatFullInfo(global, chatId, {\n      boostsApplied: oldBoostsApplied + slots.length,\n    });\n  }\n\n  if (tabState.boostModal) {\n    global = updateTabState(global, {\n      boostModal: {\n        ...tabState.boostModal,\n        myBoosts: result.boosts,\n      },\n    }, tabId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('checkGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, message, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('checkGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('lng_gift_link_expired'),\n      tabId,\n    });\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    giftCodeModal: {\n      slug,\n      info: result.code,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('applyGiftCode', async (global, actions, payload): Promise<void> => {\n  const { slug, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('applyGiftCode', {\n    slug,\n  });\n\n  if (!result) {\n    return;\n  }\n  actions.requestConfetti({ withStars: true, tabId });\n  actions.closeGiftCodeModal({ tabId });\n});\n\naddActionHandler('launchPrepaidGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'giveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n\naddActionHandler('launchPrepaidStarsGiveaway', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, giveawayId, paymentPurpose, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const additionalChannels = paymentPurpose?.additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n  const result = await callApi('launchPrepaidGiveaway', {\n    chat,\n    giveawayId,\n    paymentPurpose: {\n      type: 'starsgiveaway',\n      chat,\n      areWinnersVisible: paymentPurpose?.areWinnersVisible,\n      additionalChannels,\n      countries: paymentPurpose?.countries,\n      prizeDescription: paymentPurpose.prizeDescription,\n      untilDate: paymentPurpose.untilDate,\n      currency: paymentPurpose.currency,\n      amount: paymentPurpose.amount,\n      stars: paymentPurpose.stars,\n      users: paymentPurpose.users,\n    },\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.openBoostStatistics({ chatId, tabId });\n});\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import type {\n  StarGiftCategory,\n} from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  appendStarsSubscriptions,\n  appendStarsTransactions,\n  updateStarsBalance,\n} from '../../reducers';\nimport {\n  selectPeer,\n  selectUser,\n} from '../../selectors';\n\naddActionHandler('loadStarStatus', async (global): Promise<void> => {\n  const currentStatus = global.stars;\n  const needsTopupOptions = !currentStatus?.topupOptions;\n\n  const [status, topupOptions] = await Promise.all([\n    callApi('fetchStarsStatus'),\n    needsTopupOptions ? callApi('fetchStarsTopupOptions') : undefined,\n  ]);\n\n  if (!status || (needsTopupOptions && !topupOptions)) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stars: {\n      ...currentStatus,\n      balance: status.balance,\n      topupOptions: topupOptions || currentStatus!.topupOptions,\n      history: {\n        all: undefined,\n        inbound: undefined,\n        outbound: undefined,\n      },\n      subscriptions: undefined,\n    },\n  };\n\n  if (status.history) {\n    global = appendStarsTransactions(global, 'all', status.history, status.nextHistoryOffset);\n  }\n\n  if (status.subscriptions) {\n    global = appendStarsSubscriptions(global, status.subscriptions, status.nextSubscriptionOffset);\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsTransactions', async (global, actions, payload): Promise<void> => {\n  const { type } = payload;\n\n  const history = global.stars?.history[type];\n  const offset = history?.nextOffset;\n  if (history && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsTransactions', {\n    isInbound: type === 'inbound' || undefined,\n    isOutbound: type === 'outbound' || undefined,\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  if (result.history) {\n    global = appendStarsTransactions(global, type, result.history, result.nextOffset);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadStarGifts', async (global): Promise<void> => {\n  const result = await callApi('fetchStarGifts');\n\n  if (!result) {\n    return;\n  }\n\n  const { gifts, stickers } = result;\n\n  const starGiftsById = buildCollectionByKey(gifts, 'id');\n\n  const starGiftCategoriesByName: Record<StarGiftCategory, string[]> = {\n    all: [],\n    limited: [],\n  };\n\n  const allStarGiftIds = Object.keys(starGiftsById);\n  const allStarGifts = Object.values(starGiftsById);\n\n  const limitedStarGiftIds = allStarGifts.map(\n    (gift) => {\n      return gift.isLimited ? gift.id : undefined;\n    },\n  ).filter(Boolean) as string[];\n\n  starGiftCategoriesByName.all = allStarGiftIds;\n  starGiftCategoriesByName.limited = limitedStarGiftIds;\n\n  allStarGifts.forEach((gift) => {\n    const starsCategory = gift.stars;\n    if (!starGiftCategoriesByName[starsCategory]) {\n      starGiftCategoriesByName[starsCategory] = [];\n    }\n    starGiftCategoriesByName[starsCategory].push(gift.id);\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    starGiftsById,\n    starGiftCategoriesByName,\n    stickers: {\n      ...global.stickers,\n      starGifts: {\n        stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadUserGifts', async (global, actions, payload): Promise<void> => {\n  const { userId, shouldRefresh } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const currentGifts = global.users.giftsById[userId];\n  const localNextOffset = currentGifts?.nextOffset;\n\n  if (!shouldRefresh && currentGifts && !localNextOffset) return; // Already loaded all\n\n  const result = await callApi('fetchUserStarGifts', {\n    user,\n    offset: !shouldRefresh ? localNextOffset : '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const newGifts = currentGifts && !shouldRefresh ? currentGifts.gifts.concat(result.gifts) : result.gifts;\n\n  global = {\n    ...global,\n    users: {\n      ...global.users,\n      giftsById: {\n        ...global.users.giftsById,\n        [userId]: {\n          gifts: newGifts,\n          nextOffset: result.nextOffset,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadStarsSubscriptions', async (global): Promise<void> => {\n  const subscriptions = global.stars?.subscriptions;\n  const offset = subscriptions?.nextOffset;\n  if (subscriptions && !offset) return; // Already loaded all\n\n  const result = await callApi('fetchStarsSubscriptions', {\n    offset: offset || '',\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStarsBalance(global, result.balance);\n  global = appendStarsSubscriptions(global, result.subscriptions, result.nextOffset);\n  setGlobal(global);\n});\n\naddActionHandler('changeStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id, isCancelled } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('changeStarsSubscription', {\n    peer,\n    subscriptionId: id,\n    isCancelled,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('fulfillStarsSubscription', async (global, actions, payload): Promise<void> => {\n  const { peerId, id } = payload;\n\n  const peer = peerId ? selectPeer(global, peerId) : undefined;\n\n  if (peerId && !peer) return;\n\n  await callApi('fulfillStarsSubscription', {\n    peer,\n    subscriptionId: id,\n  });\n\n  actions.loadStarStatus();\n});\n\naddActionHandler('changeGiftVisilibity', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, shouldUnsave } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('saveStarGift', {\n    user,\n    messageId,\n    shouldUnsave,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n});\n\naddActionHandler('convertGiftToStars', async (global, actions, payload): Promise<void> => {\n  const { userId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  const result = await callApi('convertStarGift', {\n    user,\n    messageId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  actions.loadUserGifts({ userId: global.currentUserId!, shouldRefresh: true });\n  actions.openStarsBalanceModal({ tabId });\n});\n","import type { ApiError, ApiReaction, ApiReactionEmoji } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { GENERAL_REFETCH_INTERVAL } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport {\n  buildCollectionByCallback, buildCollectionByKey, omit, partition, unique,\n} from '../../../util/iteratees';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport requestActionTimeout from '../../../util/requestActionTimeout';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addPaidReaction,\n  getDocumentMediaHash,\n  getReactionKey,\n  getUserReactions,\n  isMessageLocal,\n  isSameReaction,\n} from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addChatMessagesById, updateChat, updateChatMessage,\n} from '../../reducers';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentChat,\n  selectDefaultReaction,\n  selectIsChatWithSelf,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n  selectPerformanceSettingsValue,\n  selectTabState,\n} from '../../selectors';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.appearAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.appearAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.selectAnimation) {\n      mediaLoader.fetch(getDocumentMediaHash(availableReaction.selectAnimation, 'full')!, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      availableReactions: result,\n    },\n  };\n  setGlobal(global);\n\n  requestActionTimeout({\n    action: 'loadAvailableReactions',\n    payload: undefined,\n  }, GENERAL_REFETCH_INTERVAL);\n});\n\naddActionHandler('loadAvailableEffects', async (global): Promise<void> => {\n  const result = await callApi('fetchAvailableEffects');\n  if (!result) {\n    return;\n  }\n\n  const { effects, emojis, stickers } = result;\n  const reactions:ApiReactionEmoji[] = [];\n\n  const effectById = buildCollectionByKey(effects, 'id');\n\n  for (const effect of effects) {\n    if (effect.effectAnimationId) {\n      const reaction: ApiReactionEmoji = {\n        type: 'emoji',\n        emoticon: effect.emoticon,\n      };\n      reactions.push(reaction);\n    }\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableEffectById: effectById,\n    stickers: {\n      ...global.stickers,\n      effect: {\n        stickers,\n        emojis,\n      },\n    },\n    reactions: {\n      ...global.reactions,\n      effectReactions: reactions,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n  if (global.connectionState !== 'connectionStateReady') return;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || selectIsChatWithSelf(global, chatId)) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reaction,\n    shouldAddToRecent,\n    tabId = getCurrentTabId(),\n  } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const isInSaved = selectIsChatWithSelf(global, chatId);\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n  const [paidReactions, regularReactions] = partition(newUserReactions, (r) => r.type === 'paid');\n  const trimmedRegularReactions = regularReactions.slice(-limit) as ApiReaction[];\n  const localReactions = [...paidReactions, ...trimmedRegularReactions];\n  const messageKey = getMessageKey(message);\n\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    if (hasReaction) {\n      actions.stopActiveReaction({ containerId: messageKey, reaction, tabId });\n    } else {\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId });\n    }\n  }\n\n  global = addMessageReaction(global, message, localReactions);\n  setGlobal(global);\n\n  try {\n    await callApi('sendReaction', {\n      chat,\n      messageId,\n      reactions: trimmedRegularReactions,\n      shouldAddToRecent,\n    });\n\n    if (isInSaved) {\n      actions.loadSavedReactionTags();\n    }\n  } catch (error) {\n    global = getGlobal();\n    global = addMessageReaction(global, message, userReactions);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('addLocalPaidReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, count, isPrivate, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const currentReactions = message.reactions?.results || [];\n  const newReactions = addPaidReaction(currentReactions, count, isPrivate);\n  global = updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results: newReactions,\n    },\n  });\n  setGlobal(global);\n\n  const messageKey = getMessageKey(message);\n  if (selectPerformanceSettingsValue(global, 'reactionEffects')) {\n    actions.startActiveReaction({\n      containerId: messageKey,\n      reaction: {\n        type: 'paid',\n      },\n      tabId,\n    });\n  }\n});\n\naddActionHandler('sendPaidReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, forcedAmount, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return;\n  }\n\n  const paidReaction = message.reactions?.results?.find((r) => r.reaction.type === 'paid');\n  const count = forcedAmount || paidReaction?.localAmount || 0;\n  if (!count) {\n    return;\n  }\n  actions.resetLocalPaidReactions({ chatId, messageId });\n\n  try {\n    await callApi('sendPaidReaction', {\n      chat,\n      messageId,\n      count,\n      isPrivate: paidReaction?.localIsPrivate,\n    });\n  } catch (error) {\n    if ((error as ApiError).message === 'BALANCE_TOO_LOW') {\n      actions.openStarsBalanceModal({ originReaction: { chatId, messageId, amount: count }, tabId });\n    }\n  }\n});\n\naddActionHandler('startActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  if (currentActiveReactions.some((active) => isSameReaction(active, reaction))) {\n    return undefined;\n  }\n\n  const newActiveReactions = currentActiveReactions.concat(reaction);\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...tabState.activeReactions,\n      [containerId]: newActiveReactions,\n    },\n  }, tabId);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { containerId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  const currentActiveReactions = tabState.activeReactions[containerId] || [];\n  // Remove all reactions if reaction is not specified\n  const newMessageActiveReactions = reaction\n    ? currentActiveReactions.filter((active) => !isSameReaction(active, reaction)) : [];\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [containerId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [containerId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || global.connectionState !== 'connectionStateReady') {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || selectIsChatWithSelf(global, chatId)) {\n    return undefined;\n  }\n\n  if (global.connectionState === 'connectionStateReady') {\n    callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n  }\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: unique([...(chat.unreadReactions || []), ...ids]).sort((a, b) => b - a),\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (!chat.unreadReactionsCount) {\n    return updateUnreadReactions(global, chat.id, {\n      unreadReactions: [],\n    });\n  }\n\n  const unreadReactionsCount = Math.max(chat.unreadReactionsCount - messageIds.length, 0);\n  const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n  global = updateUnreadReactions(global, chat.id, {\n    unreadReactions,\n    unreadReactionsCount,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, shouldFetchUnreadReactions: true, tabId });\n\n  if (!selectPerformanceSettingsValue(global, 'reactionEffects')) return undefined;\n\n  global = getGlobal();\n\n  messageIds.forEach((id) => {\n    const message = selectChatMessage(global, chat.id, id);\n    if (!message) return;\n\n    const { reaction, isOwn, isUnread } = message.reactions?.recentReactions?.[0] ?? {};\n    if (reaction && isUnread && !isOwn) {\n      const messageKey = getMessageKey(message);\n      actions.startActiveReaction({ containerId: messageKey, reaction, tabId: getCurrentTabId() });\n    }\n  });\n\n  return undefined;\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) {\n    if (chat?.unreadReactionsCount) {\n      return updateChat(global, chat.id, {\n        unreadReactionsCount: 0,\n      });\n    }\n    return undefined;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id, messageId: chat.unreadReactions[0], tabId, scrollTargetPosition: 'end',\n  });\n  actions.markMessagesRead({ messageIds: [chat.unreadReactions[0]], tabId });\n  return undefined;\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n\naddActionHandler('loadTopReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchTopReactions', {\n    hash: global.reactions.hash.topReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      topReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        topReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentReactions', {\n    hash: global.reactions.hash.recentReactions,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        recentReactions: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('clearRecentReactions', async (global): Promise<void> => {\n  const result = await callApi('clearRecentReactions');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      recentReactions: [],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTagReactions', async (global): Promise<void> => {\n  const result = await callApi('fetchDefaultTagReactions', {\n    hash: global.reactions.hash.defaultTags,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    reactions: {\n      ...global.reactions,\n      defaultTags: result.reactions,\n      hash: {\n        ...global.reactions.hash,\n        defaultTags: result.hash,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedReactionTags', async (global): Promise<void> => {\n  const { hash } = global.savedReactionTags || {};\n\n  const result = await callApi('fetchSavedReactionTags', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const tagsByKey = buildCollectionByCallback(result.tags, (tag) => ([getReactionKey(tag.reaction), tag]));\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      hash: result.hash,\n      byKey: tagsByKey,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('editSavedReactionTag', async (global, actions, payload): Promise<void> => {\n  const { reaction, title } = payload;\n\n  const result = await callApi('updateSavedReactionTag', { reaction, title });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const tagsByKey = global.savedReactionTags?.byKey;\n  if (!tagsByKey) return;\n\n  const key = getReactionKey(reaction);\n  const tag = tagsByKey[key];\n\n  const newTag = {\n    ...tag,\n    title,\n  };\n\n  global = {\n    ...global,\n    savedReactionTags: {\n      ...global.savedReactionTags!,\n      byKey: {\n        ...tagsByKey,\n        [key]: newTag,\n      },\n    },\n  };\n  setGlobal(global);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  updateChannelMonetizationStatistics,\n  updateMessageStatistics,\n  updateMonetizationInfo,\n  updateStatistics,\n  updateStatisticsGraph,\n  updateStoryStatistics,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectPeerStory,\n  selectTabState,\n} from '../../selectors';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const result = await callApi(\n    isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics',\n    { chat, dcId: fullInfo.statisticsDcId },\n  );\n  if (!result) {\n    return;\n  }\n\n  const { stats } = result;\n  global = getGlobal();\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChannelMonetizationStatistics', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = await callApi('fetchChannelMonetizationStatistics', { chat, dcId });\n\n  if (!stats) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChannelMonetizationStatistics(global, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchMessageStatistics', { chat, messageId, dcId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const {\n    viewsCount,\n    forwardsCount,\n    reactions,\n  } = selectChatMessages(global, chatId)[messageId] || {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactions?.results\n    ? reactions?.results.reduce((acc, reaction) => acc + reaction.count, 0)\n    : undefined;\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadMessagePublicForwards({\n    chatId,\n    messageId,\n    tabId,\n  });\n});\n\naddActionHandler('loadMessagePublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentMessage || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const publicForwards = await callApi('fetchMessagePublicForwards', {\n    chat, messageId, dcId, offset: stats.nextOffset,\n  });\n  const {\n    forwards,\n    nextOffset,\n    count,\n  } = publicForwards || {};\n\n  // Api returns the last element from the previous page as the first element\n  const shouldOmitFirstElement = stats.publicForwardsData?.length && forwards?.length\n    && areDeepEqual(stats.publicForwardsData[stats.publicForwardsData.length - 1], forwards[0]);\n\n  global = getGlobal();\n  global = updateMessageStatistics(global, {\n    ...stats,\n    publicForwards: count || forwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      shouldOmitFirstElement ? forwards.slice(1) : (forwards || []),\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  let result = await callApi('fetchStoryStatistics', { chat, storyId, dcId });\n  if (!result) {\n    result = {};\n  }\n  global = getGlobal();\n\n  const story = selectPeerStory(global, chatId, storyId);\n  const {\n    forwardsCount = 0,\n    viewsCount = 0,\n    reactionsCount = 0,\n  } = story && 'views' in story && story.views ? story.views : {};\n  result.viewsCount = viewsCount;\n  result.forwardsCount = forwardsCount;\n  result.reactionsCount = reactionsCount;\n  global = getGlobal();\n  global = updateStoryStatistics(global, result, tabId);\n  setGlobal(global);\n\n  actions.loadStoryPublicForwards({\n    chatId,\n    storyId,\n    tabId,\n  });\n});\n\naddActionHandler('loadStoryPublicForwards', async (global, actions, payload): Promise<void> => {\n  const { chatId, storyId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  const fullInfo = selectChatFullInfo(global, chatId);\n  if (!chat || !fullInfo) {\n    return;\n  }\n\n  const dcId = fullInfo.statisticsDcId;\n  const stats = selectTabState(global, tabId).statistics.currentStory || {};\n\n  if (stats?.publicForwards && !stats.nextOffset) return;\n\n  const {\n    publicForwards,\n    count,\n    nextOffset,\n  } = await callApi('fetchStoryPublicForwards', {\n    chat, storyId, dcId, offset: stats.nextOffset,\n  }) || {};\n\n  global = getGlobal();\n  global = updateStoryStatistics(global, {\n    ...stats,\n    publicForwards: count || publicForwards?.length,\n    publicForwardsData: (stats.publicForwardsData || []).concat(\n      publicForwards || [],\n    ),\n    nextOffset,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMonetizationRevenueWithdrawalUrl', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, currentPassword, onSuccess, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateMonetizationInfo(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('loadMonetizationRevenueWithdrawalUrl', { chat, currentPassword });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateMonetizationInfo(global, { isLoading: false });\n  setGlobal(global);\n\n  if (result) {\n    onSuccess();\n    actions.openUrl({\n      url: result.url,\n      shouldSkipModal: true,\n      tabId,\n      ignoreDeepLinks: true,\n    });\n  }\n});\n\naddActionHandler('clearMonetizationInfo', (global): ActionReturnType => {\n  return updateMonetizationInfo(global, { error: undefined });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { DEBUG, MESSAGE_ID_REQUIRED_ERROR } from '../../../config';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { buildApiInputPrivacyRules } from '../../helpers';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addStories,\n  addStoriesForPeer,\n  removePeerStory,\n  updateLastReadStoryForPeer,\n  updateLastViewedStoryForPeer,\n  updatePeer,\n  updatePeerProfileStory,\n  updatePeerStoriesFullyLoaded,\n  updatePeerStoriesHidden,\n  updatePeerStory,\n  updatePeerStoryViews,\n  updatePeersWithStories,\n  updateSentStoryReaction,\n  updateStealthMode,\n  updateStoryViews,\n  updateStoryViewsLoading,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectPeer, selectPeerStories, selectPeerStory,\n  selectPinnedStories, selectTabState,\n} from '../../selectors';\n\nconst INFINITE_LOOP_MARKER = 100;\n\naddActionHandler('loadAllStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNext) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { stateHash, hasNext } = global.stories;\n    if (stateHash && !hasNext) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !stateHash,\n      stateHash,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.stateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNext = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadAllHiddenStories', async (global): Promise<void> => {\n  let i = 0;\n\n  while (global.stories.hasNextInArchive) {\n    if (i++ >= INFINITE_LOOP_MARKER) {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('`actions/loadAllHiddenStories`: Infinite loop detected');\n      }\n\n      return;\n    }\n\n    global = getGlobal();\n    const { archiveStateHash, hasNextInArchive } = global.stories;\n    if (archiveStateHash && !hasNextInArchive) {\n      return;\n    }\n\n    const result = await callApi('fetchAllStories', {\n      isFirstRequest: !archiveStateHash,\n      stateHash: archiveStateHash,\n      isHidden: true,\n    });\n\n    if (!result) {\n      return;\n    }\n\n    global = getGlobal();\n    global.stories.archiveStateHash = result.state;\n\n    if ('peerStories' in result) {\n      global = addStories(global, result.peerStories);\n      global = updatePeersWithStories(global, result.peerStories);\n      global = updateStealthMode(global, result.stealthMode);\n      global.stories.hasNextInArchive = result.hasMore;\n    }\n\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerSkippedStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n  const skippedStoryIds = Object.values(peerStories.byId).reduce((acc, story) => {\n    if (!('content' in story)) {\n      acc.push(story.id);\n    }\n\n    return acc;\n  }, [] as number[]);\n\n  if (skippedStoryIds.length === 0) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', {\n    peer,\n    ids: skippedStoryIds,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('viewStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n  const peer = selectPeer(global, peerId);\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!peer || !story || !('content' in story)) {\n    return;\n  }\n\n  global = updateLastViewedStoryForPeer(global, peerId, storyId, tabId);\n  setGlobal(global);\n\n  const serverTime = getServerTime();\n\n  if (story.expireDate < serverTime && story.isInProfile) {\n    void callApi('viewStory', { peer, storyId });\n  }\n\n  const isUnread = (global.stories.byPeerId[peerId].lastReadId || 0) < story.id;\n  if (!isUnread) {\n    return;\n  }\n\n  const result = await callApi('markStoryRead', {\n    peer,\n    storyId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateLastReadStoryForPeer(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteStory', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('deleteStory', { peer, storyId });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removePeerStory(global, peerId, storyId);\n  setGlobal(global);\n});\n\naddActionHandler('toggleStoryInProfile', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, isInProfile } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const story = selectPeerStory(global, peerId, storyId);\n  const currentIsPinned = story && 'content' in story ? story.isInProfile : undefined;\n  global = updatePeerStory(global, peerId, storyId, { isInProfile });\n  global = updatePeerProfileStory(global, peerId, storyId, isInProfile);\n  setGlobal(global);\n\n  const result = await callApi('toggleStoryInProfile', { peer, storyId, isInProfile });\n  if (!result?.length) {\n    global = getGlobal();\n    global = updatePeerStory(global, peerId, storyId, { isInProfile: currentIsPinned });\n    global = updatePeerProfileStory(global, peerId, storyId, currentIsPinned);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('toggleStoryPinnedToTop', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || !peerStories) {\n    return;\n  }\n\n  const oldPinnedIds = selectPinnedStories(global, peerId)?.map((s) => s.id) || [];\n  const isRemoving = oldPinnedIds.includes(storyId);\n  const newPinnedIds = isRemoving ? oldPinnedIds.filter((id) => id !== storyId) : [...oldPinnedIds, storyId];\n\n  global = {\n    ...getGlobal(),\n    stories: {\n      ...getGlobal().stories,\n      byPeerId: {\n        ...getGlobal().stories.byPeerId,\n        [peerId]: {\n          ...peerStories,\n          pinnedIds: newPinnedIds.sort((a, b) => b - a),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n  const result = await callApi('toggleStoryPinnedToTop', { peer, storyIds: newPinnedIds });\n\n  if (!result) {\n    global = getGlobal();\n    global = {\n      ...global,\n      stories: {\n        ...global.stories,\n        byPeerId: {\n          ...global.stories.byPeerId,\n          [peerId]: {\n            ...peerStories,\n            pinnedIds: oldPinnedIds,\n          },\n        },\n      },\n    };\n    setGlobal(global);\n  }\n});\n\naddActionHandler('loadPeerStories', async (global, actions, payload): Promise<void> => {\n  const { peerId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('fetchPeerStories', { peer });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  if (result.lastReadStoryId) {\n    global = updateLastReadStoryForPeer(global, peerId, result.lastReadStoryId);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerProfileStories', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isFullyLoaded) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerProfileStories', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true);\n  }\n\n  global = addStoriesForPeer(global, peerId, result.stories, result.pinnedIds);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesArchive', async (global, actions, payload): Promise<void> => {\n  const { peerId, offsetId } = payload;\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peer || peerStories?.isArchiveFullyLoaded) return;\n\n  const result = await callApi('fetchStoriesArchive', { peer, offsetId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  if (Object.values(result.stories).length === 0) {\n    global = updatePeerStoriesFullyLoaded(global, peerId, true, true);\n  }\n  global = addStoriesForPeer(global, peerId, result.stories, undefined, true);\n  setGlobal(global);\n});\n\naddActionHandler('loadPeerStoriesByIds', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyIds } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchPeerStoriesByIds', { peer, ids: storyIds });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addStoriesForPeer(global, peerId, result.stories);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViews', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const result = await callApi('fetchStoriesViews', { peer, storyIds: [storyId] });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePeerStoryViews(global, peerId, storyId, result.views);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoryViewList', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    query,\n    limit,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  global = updateStoryViewsLoading(global, true, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchStoryViewList', {\n    peer,\n    storyId,\n    offset,\n    areReactionsFirst,\n    areJustContacts,\n    limit,\n    query,\n  });\n  if (!result) {\n    global = getGlobal();\n    global = updateStoryViewsLoading(global, false, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStoryViews(global, storyId, result.views, result.nextOffset, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportStory', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId,\n    storyId,\n    description = '',\n    option = '',\n    tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const response = await callApi('reportStory', {\n    peer,\n    storyId,\n    description,\n    option,\n  });\n\n  if (!response) return;\n\n  const { result, error } = response;\n\n  if (error === MESSAGE_ID_REQUIRED_ERROR) {\n    actions.showNotification({\n      message: oldTranslate('lng_report_please_select_messages'),\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (!result) return;\n\n  if (result.type === 'reported') {\n    actions.showNotification({\n      message: result\n        ? oldTranslate('ReportPeer.AlertSuccess')\n        : 'An error occurred while submitting your report. Please, try again later.',\n      tabId,\n    });\n    actions.closeReportModal({ tabId });\n    return;\n  }\n\n  if (result.type === 'selectOption') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      title: result.title,\n      options: result.options,\n      subtitle: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        subject: 'story',\n        peerId,\n        description,\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n\n  if (result.type === 'comment') {\n    global = getGlobal();\n    const oldSections = selectTabState(global, tabId).reportModal?.sections;\n    const selectedOption = oldSections?.[oldSections.length - 1]?.options?.find((o) => o.option === option);\n    const newSection = {\n      isOptional: result.isOptional,\n      option: result.option,\n      title: selectedOption?.text,\n    };\n    global = updateTabState(global, {\n      reportModal: {\n        messageIds: [storyId],\n        description,\n        peerId,\n        subject: 'story',\n        sections: oldSections ? [...oldSections, newSection] : [newSection],\n      },\n    }, tabId);\n    setGlobal(global);\n  }\n});\n\naddActionHandler('editStoryPrivacy', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    privacy,\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const allowedIds = [...privacy.allowUserIds, ...privacy.allowChatIds];\n  const blockedIds = [...privacy.blockUserIds, ...privacy.blockChatIds];\n\n  const inputPrivacy = buildApiInputPrivacyRules(global, {\n    visibility: privacy.visibility,\n    isUnspecified: privacy.isUnspecified,\n    allowedIds,\n    blockedIds,\n  });\n\n  void callApi('editStoryPrivacy', {\n    peer,\n    id: storyId,\n    privacy: inputPrivacy,\n  });\n});\n\naddActionHandler('toggleStoriesHidden', async (global, actions, payload): Promise<void> => {\n  const { peerId, isHidden } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const result = await callApi('toggleStoriesHidden', { peer, isHidden });\n  if (!result) return;\n\n  global = getGlobal();\n  global = updatePeerStoriesHidden(global, peerId, isHidden);\n  setGlobal(global);\n});\n\naddActionHandler('loadStoriesMaxIds', async (global, actions, payload): Promise<void> => {\n  const { peerIds } = payload;\n  const peers = peerIds.map((peerId) => selectPeer(global, peerId)).filter(Boolean);\n  if (!peers.length) return;\n\n  const result = await callApi('fetchStoriesMaxIds', { peers });\n  if (!result) return;\n\n  const peerIdsToLoad: string[] = [];\n\n  global = getGlobal();\n  result.forEach((maxId, i) => {\n    const peer = peers[i];\n    global = updatePeer(global, peer.id, {\n      maxStoryId: maxId,\n      hasStories: maxId !== 0,\n    });\n\n    if (maxId !== 0) {\n      peerIdsToLoad.push(peer.id);\n    }\n  });\n  setGlobal(global);\n\n  peerIdsToLoad?.forEach((peerId) => actions.loadPeerStories({ peerId }));\n});\n\naddActionHandler('sendStoryReaction', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, containerId, reaction, shouldAddToRecent, tabId = getCurrentTabId(),\n  } = payload;\n  const peer = selectPeer(global, peerId);\n  if (!peer) return;\n\n  const story = selectPeerStory(global, peerId, storyId);\n  if (!story || !('content' in story)) return;\n\n  const previousReaction = story.sentReaction;\n  global = updateSentStoryReaction(global, peerId, storyId, reaction);\n  setGlobal(global);\n\n  if (reaction) {\n    actions.startActiveReaction({ containerId, reaction, tabId });\n  } else {\n    actions.stopActiveReaction({ containerId, tabId });\n  }\n\n  const result = await callApi('sendStoryReaction', {\n    peer, storyId, reaction, shouldAddToRecent,\n  });\n\n  global = getGlobal();\n  if (!result) {\n    global = updateSentStoryReaction(global, peerId, storyId, previousReaction);\n  }\n  setGlobal(global);\n});\n\naddActionHandler('activateStealthMode', (global, actions, payload): ActionReturnType => {\n  const { isForPast = true, isForFuture = true } = payload || {};\n\n  callApi('activateStealthMode', { isForPast: isForPast || true, isForFuture: isForFuture || true });\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  closeMiddleSearch,\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList, updateRequestedChatTranslation,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState,\n} from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    shouldReplaceLast = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n  actions.hideEffectInComposer({ tabId });\n\n  actions.closeStoryViewer({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsBalanceModal({ tabId });\n  actions.closeStarsTransactionModal({ tabId });\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== chatId\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (chatId) {\n      global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n        shouldPreventComposerAnimation: true,\n      }, tabId);\n\n      global = closeMiddleSearch(global, chatId, threadId, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      monetizationStatistics: undefined,\n      boostStatistics: undefined,\n      contentToBeScheduled: undefined,\n      ...(chatId !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n        isShareMessageModalShown: false,\n      }),\n    }, tabId);\n  }\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId, tabId });\n    } else if (chatId !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, chatId, threadId, type, shouldReplaceHistory, shouldReplaceLast, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  const hashUrl = createMessageHashUrl(chatId, 'thread', threadId);\n\n  if (IS_ELECTRON) {\n    window.electron!.openNewWindow(hashUrl);\n  } else {\n    window.open(hashUrl, '_blank');\n  }\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  actions.updatePageTitle({ tabId });\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { profileTab, forceScrollProfileTab = false, tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n    nextProfileTab: profileTab,\n    forceScrollProfileTab,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openThreadWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openThread({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId = MAIN_THREAD_ID, files, filter, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openThread({ chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n      filter,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeChatlistModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatlistModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestChatTranslation', (global, actions, payload): ActionReturnType => {\n  const { chatId, toLanguageCode, tabId = getCurrentTabId() } = payload;\n  return updateRequestedChatTranslation(global, chatId, toLanguageCode, tabId);\n});\n\naddActionHandler('closeChatInviteModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatInviteModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../../api/types';\nimport type {\n  ActionReturnType,\n  ActiveDownloads,\n  GlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  RELEASE_DATETIME,\n  SCROLL_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { cancelScrollBlockingAnimation, isAnimatingScroll } from '../../../util/animateScroll';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { compact, findLast } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { oldTranslate } from '../../../util/oldLangProvider';\nimport parseHtmlAsFormattedText from '../../../util/parseHtmlAsFormattedText';\nimport { getServerTime } from '../../../util/serverTime';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\nimport versionNotification from '../../../versionNotification.txt';\nimport {\n  getIsSavedDialog,\n  getMediaFilename,\n  getMediaFormat,\n  getMediaHash,\n  getMessageDownloadableMedia,\n  getMessageStatefulContent,\n  getSenderTitle,\n  isChatChannel,\n  isJoinedChannelMessage,\n} from '../../helpers';\nimport { getMessageSummaryText } from '../../helpers/messageSummary';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  addActiveMediaDownload,\n  cancelMessageMediaDownload,\n  enterMessageSelectMode,\n  exitMessageSelectMode,\n  replaceTabThreadParam,\n  replaceThreadParam,\n  toggleMessageSelection,\n  updateFocusDirection,\n  updateFocusedMessage,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatLastMessageId,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectDraft,\n  selectForwardedMessageIdsByGroupId,\n  selectIsRightColumnShown,\n  selectIsViewportNewest,\n  selectMessageIdsByGroupId,\n  selectPinnedIds,\n  selectReplyStack,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectTabState,\n  selectThreadInfo,\n  selectViewportIds,\n} from '../../selectors';\n\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = SCROLL_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActionsSlow(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyInfo?.replyToMsgId) {\n    if (threadId === MAIN_THREAD_ID) {\n      messageId = selectChatLastMessageId(global, chatId);\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyInfo.replyToMsgId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.updateDraftReplyInfo({\n    replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined, tabId,\n  });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    if (type === 'pinned') {\n      const pinnedMessageIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID);\n      if (!pinnedMessageIds?.length) {\n        return;\n      }\n\n      lastMessageId = pinnedMessageIds[pinnedMessageIds.length - 1];\n    } else {\n      lastMessageId = selectChatLastMessageId(global, chatId);\n\n      const chatMessages = selectChatMessages(global, chatId);\n      // Workaround for scroll to local message 'you joined this channel'\n      const lastChatMessage = Object.values(chatMessages).reverse()[0];\n      if (lastMessageId && isJoinedChannelMessage(lastChatMessage) && lastChatMessage.id > lastMessageId) {\n        lastMessageId = lastChatMessage.id;\n      }\n    }\n  } else if (isSavedDialog) {\n    lastMessageId = selectChatLastMessageId(global, String(threadId), 'saved');\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageListType: type,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel, quote, scrollTargetPosition,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    actions.showNotification({ message: oldTranslate('Conversation.ErrorInaccessibleMessage'), tabId });\n    return undefined;\n  }\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage({ global }, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage({\n    global,\n    chatId,\n    messageId,\n    threadId,\n    noHighlight,\n    isResizingContainer,\n    quote,\n    scrollTargetPosition,\n  }, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global, { forceOnHeavyAnimation: true });\n    actions.openThread({\n      chatId,\n      threadId,\n      type: messageListType,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  if (isAnimatingScroll()) {\n    cancelScrollBlockingAnimation();\n  }\n\n  setGlobal(global, { forceOnHeavyAnimation: true });\n\n  actions.openThread({\n    chatId,\n    threadId,\n    type: messageListType,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    chatId,\n    threadId,\n    tabId,\n    shouldForceRender: true,\n  });\n  return undefined;\n});\n\naddActionHandler('setShouldPreventComposerAnimation', (global, actions, payload): ActionReturnType => {\n  const { shouldPreventComposerAnimation, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldPreventComposerAnimation,\n  }, tabId);\n});\n\naddActionHandler('openReplyMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageId, quoteText, tabId = getCurrentTabId(),\n  } = payload;\n  return updateTabState(global, {\n    replyingMessage: {\n      fromChatId,\n      messageId,\n      quoteText,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, storyId, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      storyId,\n      withMyScore,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('changeRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      noAuthors: false,\n      noCaptions: false,\n    },\n    isShareMessageModalShown: true,\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    isShareMessageModalShown: false,\n    forwardMessages: {},\n    replyingMessage: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { media, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  global = cancelMessageMediaDownload(global, [hash], tabId);\n  return global;\n});\n\naddActionHandler('cancelMediaHashDownloads', (global, actions, payload): ActionReturnType => {\n  const { mediaHashes, tabId = getCurrentTabId() } = payload;\n\n  global = cancelMessageMediaDownload(global, mediaHashes, tabId);\n\n  return global;\n});\n\naddActionHandler('downloadMedia', (global, actions, payload): ActionReturnType => {\n  const { media, originMessage, tabId = getCurrentTabId() } = payload;\n\n  const hash = getMediaHash(media, 'download');\n  if (!hash) return undefined;\n\n  const size = 'size' in media ? media.size : 0;\n  const metadata = {\n    size,\n    format: getMediaFormat(media, 'download'),\n    filename: getMediaFilename(media),\n    originChatId: originMessage?.chatId,\n    originMessageId: originMessage?.id,\n  } satisfies ActiveDownloads[string];\n\n  return addActiveMediaDownload(global, hash, metadata, tabId);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canDownload);\n  messages.forEach((message) => {\n    const media = getMessageDownloadableMedia(message);\n    if (!media) return;\n    actions.downloadMedia({ media, originMessage: message, tabId });\n  });\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (global.shouldShowContextMenuHint) {\n    actions.disableContextMenuHint();\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global): ActionReturnType => {\n  if (!global.shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return {\n    ...global,\n    shouldShowContextMenuHint: false,\n  };\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseHtmlAsFormattedText(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n\n  const maxId = Math.max(\n    selectChatLastMessageId(global, SERVICE_NOTIFICATIONS_USER_ID) || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, isReadDate, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: { chatId, isReadDate },\n  }, tabId);\n});\n\naddActionHandler('closePrivacySettingsNoticeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    privacySettingsNoticeModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = messageId\n    ? selectRequestedMessageTranslationLanguage(global, chatId, messageId, tabId)\n    : selectRequestedChatTranslationLanguage(global, chatId, tabId);\n\n  return updateTabState(global, {\n    chatLanguageModal: { chatId, messageId, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeChatLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    chatLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\naddActionHandler('openOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n  global = updateTabState(global, {\n    oneTimeMediaModal: {\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeOneTimeMediaModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    oneTimeMediaModal: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportAdModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    reportModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportAdModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportAdModal = selectTabState(global, tabId).reportAdModal;\n  if (!reportAdModal) {\n    return undefined;\n  }\n\n  if (reportAdModal.sections.length === 1) {\n    actions.closeReportAdModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportAdModal: {\n      ...reportAdModal,\n      sections: reportAdModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousReportModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const reportModal = selectTabState(global, tabId).reportModal;\n  if (!reportModal) {\n    return undefined;\n  }\n\n  if (reportModal.sections.length === 1) {\n    actions.closeReportModal({ tabId });\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    reportModal: {\n      ...reportModal,\n      sections: reportModal.sections.slice(0, -1),\n    },\n  }, tabId);\n});\n\naddActionHandler('openPaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    paidReactionModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closePaidReactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    paidReactionModal: undefined,\n  }, tabId);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.oldTranslate;\n\n  const chat = selectChat(global, chatId);\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n\n  if (!chat || !chatMessages || !threadId) return;\n\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActionsSlow(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const resultHtml: string[] = [];\n  const resultText: string[] = [];\n\n  messages.forEach((message) => {\n    const sender = isChatChannel(chat) ? chat : selectSender(global, message);\n    const senderTitle = `> ${sender ? getSenderTitle(lang, sender) : message.forwardInfo?.hiddenUserName || ''}:`;\n    const statefulContent = getMessageStatefulContent(global, message);\n\n    resultHtml.push(senderTitle);\n    resultHtml.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    resultText.push(senderTitle);\n    resultText.push(`${getMessageSummaryText(lang, message, statefulContent, false, 0, true)}\\n`);\n  });\n\n  copyHtmlToClipboard(resultHtml.join('\\n'), resultText.join('\\n'));\n}\n\naddActionHandler('openDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const {\n    message, isSchedule, album,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = getGlobal();\n\n  global = updateTabState(global, {\n    deleteMessageModal: {\n      isSchedule,\n      album,\n      message,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeDeleteMessageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    deleteMessageModal: undefined,\n  }, tabId);\n});\n","import type { ApiMessage } from '../../api/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getGlobal } from '..';\nimport { getMessageStatefulContent } from './messages';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const global = getGlobal();\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    { message, shouldRenderAsHtml: true },\n  )?.join('');\n\n  const statefulContent = getMessageStatefulContent(global, message);\n\n  const description = getMessageSummaryDescription(lang, message, statefulContent, text, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import type { ActionReturnType } from '../../types';\nimport { GlobalSearchContent } from '../../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload;\n  const { chatId, currentContent } = selectTabState(global, tabId).globalSearch;\n\n  const fetchingStatus = query && currentContent !== GlobalSearchContent.BotApps\n    ? { chats: !chatId, messages: true } : undefined;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    fetchingStatus,\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  closeMiddleSearch,\n  resetMiddleSearch,\n  updateMiddleSearch,\n  updateSharedMediaSearchType,\n} from '../../reducers';\nimport { selectCurrentMessageList } from '../../selectors';\n\naddActionHandler('openMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateMiddleSearch(global, chatId, threadId, {}, tabId);\n});\n\naddActionHandler('closeMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return closeMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('updateMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const {\n    update, tabId = getCurrentTabId(),\n  } = payload;\n\n  let chatId;\n  let threadId;\n  if (payload.chatId) {\n    chatId = payload.chatId;\n    threadId = payload.threadId || MAIN_THREAD_ID;\n  } else {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  global = updateMiddleSearch(global, chatId, threadId, update, tabId);\n\n  return global;\n});\n\naddActionHandler('resetMiddleSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return resetMiddleSearch(global, chatId, threadId, tabId);\n});\n\naddActionHandler('setSharedMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateSharedMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\nexport default function getIsAppUpdateNeeded(remoteVersion: string, appVersion: string, isStrict?: boolean) {\n  const sanitizedRemoteVersion = remoteVersion.trim();\n\n  if (!APP_VERSION_REGEX.test(sanitizedRemoteVersion)) {\n    return false;\n  }\n\n  if (isStrict) {\n    return sanitizedRemoteVersion.localeCompare(appVersion, undefined, { numeric: true, sensitivity: 'base' }) === 1;\n  }\n\n  return sanitizedRemoteVersion !== appVersion;\n}\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\nimport { IS_ELECTRON } from './windowEnvironment';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (IS_ELECTRON) {\n    window.electron!.setWindowTitle(nextTitle);\n\n    return;\n  }\n\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport type { ActionReturnType, GlobalState } from '../../types';\n\nimport {\n  ANIMATION_WAVE_MIN_INTERVAL,\n  DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport generateUniqueId from '../../../util/generateUniqueId';\nimport getIsAppUpdateNeeded from '../../../util/getIsAppUpdateNeeded';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport { compact, unique } from '../../../util/iteratees';\nimport { refreshFromCache } from '../../../util/localization';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentChat,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsTrustedBot,\n  selectSender,\n  selectTabState,\n  selectTopic,\n} from '../../selectors';\n\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION = 6000;\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: force !== undefined ? force : !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('resetNextProfileTab', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  return updateTabState(global, { nextProfileTab: undefined, forceScrollProfileTab: false }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n      currentStoryId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), storyId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentStoryId: storyId,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  const hasLocalId = notification.localId;\n  notification.localId ||= generateUniqueId();\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => (\n    hasLocalId ? n.localId === notification.localId : n.message === notification.message\n  ));\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n  const chatFullInfo = selectChatFullInfo(global, chatId);\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat, chatFullInfo);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.oldTranslate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.oldTranslate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.oldTranslate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || selectSender(global, message)?.id;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(), ...rest\n  } = payload;\n\n  if (!selectCanAnimateInterface(global)) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      ...rest,\n    },\n  }, tabId);\n});\n\naddActionHandler('requestWave', (global, actions, payload): ActionReturnType => {\n  const {\n    startX, startY, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (!IS_WAVE_TRANSFORM_SUPPORTED || !selectCanAnimateInterface(global)) return undefined;\n\n  const tabState = selectTabState(global, tabId);\n  const currentLastTime = tabState.wave?.lastWaveTime || 0;\n  if (Date.now() - currentLastTime < ANIMATION_WAVE_MIN_INTERVAL) return undefined;\n\n  return updateTabState(global, {\n    wave: {\n      lastWaveTime: Date.now(),\n      startX,\n      startY,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped, isInvertedMedia, webPageMediaSize,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n      isInvertedMedia,\n      webPageMediaSize,\n    },\n  };\n});\n\naddActionHandler('requestEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: true,\n  }, tabId);\n});\n\naddActionHandler('hideEffectInComposer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    shouldPlayEffectInComposer: undefined,\n  }, tabId);\n});\n\naddActionHandler('setReactionEffect', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, reaction, tabId = getCurrentTabId(),\n  } = payload;\n\n  const emoticon = reaction?.type === 'emoji' && reaction.emoticon;\n  if (!emoticon) return;\n\n  const effect = Object.values(global.availableEffectById)\n    .find((currentEffect) => currentEffect.effectAnimationId && currentEffect.emoticon === emoticon);\n\n  const effectId = effect?.id;\n\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  if (effect?.isPremium && !isCurrentUserPremium) {\n    actions.openPremiumModal({\n      initialSection: 'effects',\n      tabId,\n    });\n    return;\n  }\n\n  if (!effectId) return;\n\n  actions.requestEffectInComposer({ tabId });\n\n  actions.saveEffectInDraft({ chatId, threadId, effectId });\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('openMapModal', (global, actions, payload): ActionReturnType => {\n  const { geoPoint, zoom, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mapModal: {\n      point: geoPoint,\n      zoom,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeMapModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    mapModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (getIsAppUpdateNeeded(version, APP_VERSION)) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isAppUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('setIsElectronUpdateAvailable', (global, action, payload): ActionReturnType => {\n  global = getGlobal();\n  global = {\n    ...global,\n    isElectronUpdateAvailable: Boolean(payload),\n  };\n  setGlobal(global);\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  global = updateTabState(global, {\n    isBlurred,\n  }, tabId);\n\n  return {\n    ...global,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n  const isTestServer = global.config?.isTestServer;\n  const prefix = isTestServer ? '[T] ' : '';\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${prefix}${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${prefix}${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n\n  if (messageList && canDisplayChatInTitle && !global.passcode.isScreenLocked) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.oldTranslate, currentChat, chatId === currentUserId);\n      const topic = selectTopic(global, chatId, threadId);\n      if (currentChat.isForum && topic) {\n        setPageTitle(`${prefix}${title} › ${topic.title}`);\n        return;\n      }\n\n      setPageTitle(`${prefix}${title}`);\n      return;\n    }\n  }\n\n  setPageTitleInstant(IS_ELECTRON ? '' : `${prefix}${PAGE_TITLE}`);\n});\n\naddActionHandler('closeInviteViaLinkModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    inviteViaLinkModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeCollectibleInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload ?? {};\n  return updateTabState(global, {\n    collectibleInfoModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('setShouldCloseRightColumn', (global, actions, payload): ActionReturnType => {\n  const { value, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    shouldCloseRightColumn: value,\n  }, tabId);\n});\n\naddActionHandler('refreshLangPackFromCache', (global, actions, payload): ActionReturnType => {\n  refreshFromCache(payload.langCode);\n});\n\naddActionHandler('processPremiumFloodWait', (global, actions, payload): ActionReturnType => {\n  const { isUpload } = payload;\n  const {\n    bandwidthPremiumDownloadSpeedup,\n    bandwidthPremiumUploadSpeedup,\n    bandwidthPremiumNotifyPeriod,\n  } = global.appConfig || {};\n  const { lastPremiumBandwithNotificationDate: lastNotifiedAt } = global.settings;\n\n  if (!bandwidthPremiumDownloadSpeedup || !bandwidthPremiumUploadSpeedup || !bandwidthPremiumNotifyPeriod) {\n    return undefined;\n  }\n  if (lastNotifiedAt && Date.now() < lastNotifiedAt + bandwidthPremiumNotifyPeriod * 1000) return undefined;\n\n  const unblurredTabIds = Object.values(global.byTabId).filter((l) => !l.isBlurred).map((l) => l.id);\n\n  unblurredTabIds.forEach((tabId) => {\n    actions.showNotification({\n      title: langProvider.oldTranslate(isUpload ? 'UploadSpeedLimited' : 'DownloadSpeedLimited'),\n      message: langProvider.oldTranslate(\n        isUpload ? 'UploadSpeedLimitedMessage' : 'DownloadSpeedLimitedMessage',\n        isUpload ? bandwidthPremiumUploadSpeedup : bandwidthPremiumDownloadSpeedup,\n      ),\n      duration: FLOOD_PREMIUM_WAIT_NOTIFICATION_DURATION,\n      tabId,\n    });\n  });\n\n  return {\n    ...global,\n    settings: {\n      ...global.settings,\n      lastPremiumBandwithNotificationDate: Date.now(),\n    },\n  };\n});\n\nlet prevIsScreenLocked: boolean | undefined;\nlet prevBlurredTabsCount: number = 0;\nlet onlineTimeout: number | undefined;\nconst ONLINE_TIMEOUT = 100;\naddCallback((global: GlobalState) => {\n  // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n  const { updatePageTitle, updateIsOnline } = getActions();\n\n  const isLockedUpdated = global.passcode.isScreenLocked !== prevIsScreenLocked;\n  const blurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n  const isMasterTab = selectTabState(global, getCurrentTabId()).isMasterTab;\n\n  if (isLockedUpdated) {\n    updatePageTitle();\n  }\n\n  if (blurredTabsCount !== prevBlurredTabsCount && isMasterTab) {\n    if (onlineTimeout) clearTimeout(onlineTimeout);\n\n    onlineTimeout = window.setTimeout(() => {\n      global = getGlobal();\n      const newBlurredTabsCount = Object.values(global.byTabId).filter((l) => l.isBlurred).length;\n      updateIsOnline(newBlurredTabsCount !== getAllMultitabTokens().length);\n    }, ONLINE_TIMEOUT);\n  }\n\n  prevIsScreenLocked = global.passcode.isScreenLocked;\n  prevBlurredTabsCount = blurredTabsCount;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport {\n  clearPayment,\n  updatePayment,\n  updateStarsPayment,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const payment = selectTabState(global, tabId).payment;\n  const status = payment.status || 'cancelled';\n  const starsBalanceModal = selectTabState(global, tabId).starsBalanceModal;\n\n  actions.processOriginStarsPayment({\n    originData: starsBalanceModal,\n    status,\n    tabId,\n  });\n\n  global = clearPayment(global, tabId);\n  global = updatePayment(global, {\n    status,\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('resetPaymentStatus', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updatePayment(global, { status: undefined }, tabId);\n  global = updateStarsPayment(global, { status: undefined }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiveawayModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giveawayModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftCodeModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftCodeModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageId, mediaIndex, isAvatarView, isSponsoredMessage, origin,\n    withDynamicLoading, standaloneMedia, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      messageId,\n      mediaIndex: mediaIndex || 0,\n      isAvatarView,\n      isSponsoredMessage,\n      origin,\n      standaloneMedia,\n      isHidden: false,\n      withDynamicLoading,\n    },\n    forwardMessages: {},\n    isShareMessageModalShown: false,\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { getCurrentTabId, signalPasscodeHash } from '../../../util/establishMultitabRole';\nimport { cloneDeep } from '../../../util/iteratees';\nimport {\n  clearEncryptedSession, encryptSession, forgetPasscode, setupPasscode,\n} from '../../../util/passcode';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  const global = getGlobal();\n  if (!global.isInited) return;\n  if (global.passcode.hasPasscode && !noLockOnUnload && Object.keys(global.byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode, tabId = getCurrentTabId() } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  try {\n    await encryptSession(sessionJson, globalJson);\n\n    signalPasscodeHash();\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      hasPasscode: true,\n      error: undefined,\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    forceUpdateCache(true);\n  } catch (err: any) {\n    forgetPasscode();\n\n    global = getGlobal();\n    global = updatePasscodeSettings(global, {\n      isLoading: false,\n    });\n    setGlobal(global);\n\n    actions.showNotification({\n      message: 'Failed to set passcode',\n      tabId,\n    });\n    actions.requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled, tabId });\n  }\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 1000 * 15;// 180000; // 3 minutes\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  const invalidAttemptsCount = (global.passcode?.invalidAttemptsCount ?? 0) + 1;\n\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount,\n    timeoutUntil: (invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? Date.now() + TIMEOUT_RESET_INVALID_ATTEMPTS_MS : undefined),\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n    timeoutUntil: undefined,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { ApiUserStarGift } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { getPrizeStarsTransactionFromGiveaway, getStarsTransactionFromGift } from '../../helpers/payments';\nimport { addActionHandler } from '../../index';\nimport {\n  clearStarPayment, openStarsTransactionModal,\n} from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectStarsPayment } from '../../selectors';\n\naddActionHandler('processOriginStarsPayment', (global, actions, payload): ActionReturnType => {\n  const { originData, status, tabId = getCurrentTabId() } = payload;\n  const {\n    originStarsPayment, originReaction, originGift, topup,\n  } = originData || {};\n\n  if (!originStarsPayment && !originReaction && !originGift && !topup) {\n    return undefined;\n  }\n\n  actions.closeStarsBalanceModal({ tabId });\n\n  if (status !== 'paid') {\n    return undefined;\n  }\n\n  // Re-open previous payment modal\n  if (originStarsPayment) {\n    global = updateTabState(global, {\n      starsPayment: originStarsPayment,\n    }, tabId);\n  }\n\n  if (originReaction) {\n    actions.sendPaidReaction({\n      chatId: originReaction.chatId,\n      messageId: originReaction.messageId,\n      forcedAmount: originReaction.amount,\n      tabId,\n    });\n  }\n\n  if (originGift) {\n    actions.sendStarGift({\n      ...originGift,\n      tabId,\n    });\n  }\n\n  return global;\n});\n\naddActionHandler('openGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: true,\n  }, tabId);\n});\n\naddActionHandler('closeGiftRecipientPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    isGiftRecipientPickerOpen: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const {\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: {\n      isOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftingPickerModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsGiftingPickerModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openPrizeStarsTransactionFromGiveaway', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getPrizeStarsTransactionFromGiveaway(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const {\n    originStarsPayment,\n    originReaction,\n    originGift,\n    topup,\n    shouldIgnoreBalance,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const starBalance = global.stars?.balance;\n\n  if (!shouldIgnoreBalance && starBalance && topup && topup.balanceNeeded <= starBalance) {\n    actions.showNotification({\n      message: langProvider.oldTranslate('StarsTopupLinkEnough'),\n      actionText: langProvider.oldTranslate('StarsTopupLinkTopupAnyway'),\n      action: {\n        action: 'openStarsBalanceModal',\n        payload: { topup, shouldIgnoreBalance: true, tabId },\n      },\n      icon: 'star',\n      tabId,\n    });\n    return undefined;\n  }\n\n  global = clearStarPayment(global, tabId);\n\n  // Always refresh status on opening\n  actions.loadStarStatus();\n\n  return updateTabState(global, {\n    starsBalanceModal: {\n      originStarsPayment,\n      originReaction,\n      originGift,\n      topup,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsBalanceModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsBalanceModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsPaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const starsPayment = selectStarsPayment(global, tabId);\n  let status = starsPayment?.status;\n  if (!status || status === 'pending') {\n    status = 'cancelled';\n  }\n\n  return updateTabState(global, {\n    starsPayment: {\n      status,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { transaction, tabId = getCurrentTabId() } = payload;\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('openStarsTransactionFromGift', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return undefined;\n\n  const transaction = getStarsTransactionFromGift(message);\n  if (!transaction) return undefined;\n\n  return openStarsTransactionModal(global, transaction, tabId);\n});\n\naddActionHandler('closeStarsTransactionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsTransactionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { subscription, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    starsSubscriptionModal: {\n      subscription,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStarsSubscriptionModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    starsSubscriptionModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    giftModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStarsGiftModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    starsGiftModal: { isOpen: false },\n  }, tabId);\n});\n\naddActionHandler('openGiftInfoModalFromMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message || !message.content.action) return;\n\n  const action = message.content.action;\n  if (action.type !== 'starGift') return;\n  const starGift = action.starGift!;\n\n  const giftReceiverId = message.isOutgoing ? message.chatId : global.currentUserId!;\n\n  const gift = {\n    date: message.date,\n    gift: starGift.gift,\n    message: starGift.message,\n    starsToConvert: starGift.starsToConvert,\n    isNameHidden: starGift.isNameHidden,\n    isUnsaved: !starGift.isSaved,\n    fromId: message.isOutgoing ? global.currentUserId : message.chatId,\n    messageId: (!message.isOutgoing || chatId === global.currentUserId) ? message.id : undefined,\n    isConverted: starGift.isConverted,\n  } satisfies ApiUserStarGift;\n\n  actions.openGiftInfoModal({ userId: giftReceiverId, gift, tabId });\n});\n\naddActionHandler('openGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const {\n    gift, tabId = getCurrentTabId(),\n  } = payload;\n\n  const userId = 'userId' in payload ? payload.userId : undefined;\n\n  return updateTabState(global, {\n    giftInfoModal: {\n      userId,\n      gift,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeGiftInfoModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    giftInfoModal: undefined,\n  }, tabId);\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { addActionHandler } from '../../index';\nimport { updateChatMessage } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChatMessage, selectTabState } from '../../selectors';\n\naddActionHandler('processOpenChatOrThread', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    return updateTabState(global, {\n      reactionPicker: {\n        chatId,\n        messageId: undefined,\n        position: undefined,\n      },\n    }, tabId);\n  }\n\n  return updateTabState(global, {\n    reactionPicker: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId,\n    messageId,\n    position,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      chatId,\n      messageId,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryReactionPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    peerId,\n    storyId,\n    position,\n    sendAsMessage,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      storyPeerId: peerId,\n      storyId,\n      sendAsMessage,\n      position,\n    },\n  }, tabId);\n});\n\naddActionHandler('openEffectPicker', (global, actions, payload): ActionReturnType => {\n  const {\n    position,\n    chatId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    reactionPicker: {\n      position,\n      chatId,\n      isForEffects: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeReactionPicker', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    reactionPicker: {\n      ...tabState.reactionPicker,\n      messageId: undefined,\n      position: undefined,\n      storyId: undefined,\n      storyPeerId: undefined,\n      isForEffects: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetLocalPaidReactions', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const { reactions } = message;\n\n  if (!reactions) {\n    return undefined;\n  }\n\n  const updatedResults = reactions.results.map((reaction) => {\n    if (reaction.localAmount) {\n      if (!reaction.count) return undefined;\n      return {\n        ...reaction,\n        localAmount: undefined,\n        localPreviousChosenOrder: undefined,\n        chosenOrder: reaction.localPreviousChosenOrder,\n      };\n    }\n    return reaction;\n  }).filter(Boolean);\n\n  Object.values(global.byTabId)\n    .forEach(({ id: tabId }) => {\n      actions.dismissNotification({\n        localId: getMessageKey(message),\n        tabId,\n      });\n    });\n\n  return updateChatMessage(global, chatId, messageId, {\n    reactions: {\n      ...reactions,\n      results: updatedResults,\n    },\n  });\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { callApi } from '../../../api/gramjs';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { addStoriesForPeer } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectCurrentViewedStory,\n  selectPeer,\n  selectPeerFirstStoryId,\n  selectPeerFirstUnreadStoryId,\n  selectPeerStories,\n  selectStoryListForViewer,\n  selectTabState,\n} from '../../selectors';\nimport { fetchChatByUsername } from '../api/chats';\n\naddActionHandler('openStoryViewer', async (global, actions, payload): Promise<void> => {\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, isPrivate, isArchive, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const tabState = selectTabState(global, tabId);\n  const peerStories = selectPeerStories(global, peerId);\n\n  if (storyId && (!peerStories || !peerStories.byId[storyId])) {\n    const result = await callApi('fetchPeerStoriesByIds', { peer, ids: [storyId] });\n\n    if (!result) {\n      return;\n    }\n    global = getGlobal();\n    global = addStoriesForPeer(global, peerId, result.stories);\n  }\n\n  const storyList = tabState.storyViewer.storyList\n    || selectStoryListForViewer(global, peerId, storyId, isSingleStory, isSinglePeer, isPrivate, isArchive);\n\n  global = updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId,\n      storyId: storyId || selectPeerFirstUnreadStoryId(global, peerId) || selectPeerFirstStoryId(global, peerId),\n      isSinglePeer,\n      isPrivate,\n      isArchive,\n      isSingleStory,\n      viewModal: undefined,\n      origin,\n      storyList,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openStoryViewerByUsername', async (global, actions, payload): Promise<void> => {\n  const {\n    username, storyId, origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = await fetchChatByUsername(global, username);\n\n  if (!chat) {\n    return;\n  }\n\n  actions.openStoryViewer({\n    peerId: chat.id,\n    storyId,\n    isSinglePeer: true,\n    isSingleStory: true,\n    origin,\n    tabId,\n  });\n});\n\naddActionHandler('closeStoryViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    isMuted, isRibbonShown, isArchivedRibbonShown, storyId,\n  } = selectTabState(global, tabId).storyViewer;\n\n  if (!storyId) return global;\n\n  global = updateTabState(global, {\n    storyViewer: {\n      isMuted,\n      isRibbonShown,\n      isArchivedRibbonShown,\n      lastViewedByPeerIds: undefined,\n      storyList: undefined,\n    },\n  }, tabId);\n\n  return global;\n});\n\naddActionHandler('setStoryViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStoryRibbon', (global, actions, payload): ActionReturnType => {\n  const { isShown, isArchived, tabId = getCurrentTabId() } = payload;\n\n  const orderedIds = global.stories.orderedPeerIds[isArchived ? 'archived' : 'active'];\n  if (!orderedIds?.length) {\n    return global;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...selectTabState(global, tabId).storyViewer,\n      [isArchived ? 'isArchivedRibbonShown' : 'isRibbonShown']: isShown,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPreviousStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let previousStoryIndex: number;\n  let previousPeerId: string;\n\n  if (currentStoryIndex > 0) {\n    previousStoryIndex = currentStoryIndex - 1;\n    previousPeerId = peerId;\n  } else {\n    const previousPeerIdIndex = orderedPeerIds.indexOf(peerId) - 1;\n    if (isSinglePeer || previousPeerIdIndex < 0) {\n      return undefined;\n    }\n\n    previousPeerId = orderedPeerIds[previousPeerIdIndex];\n    previousStoryIndex = (storyIdsByPeerId?.[previousPeerId]?.length || 1) - 1;\n  }\n\n  const previousStoryId = storyIdsByPeerId?.[previousPeerId]?.[previousStoryIndex];\n  if (!previousStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: previousPeerId,\n      storyId: previousStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openNextStory', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  const {\n    peerId, storyId, isSinglePeer, isSingleStory, storyList,\n  } = tabState.storyViewer;\n  if (isSingleStory || !storyList) {\n    actions.closeStoryViewer({ tabId });\n    return undefined;\n  }\n\n  if (!peerId || !storyId) {\n    return undefined;\n  }\n\n  const peer = selectPeer(global, peerId);\n  const peerStories = selectPeerStories(global, peerId);\n  if (!peerStories || !peer) {\n    return undefined;\n  }\n\n  const { peerIds: orderedPeerIds, storyIdsByPeerId } = storyList;\n  const peerStoryIds = storyIdsByPeerId[peerId] ?? [];\n  const currentStoryIndex = peerStoryIds.indexOf(storyId);\n  let nextStoryIndex: number;\n  let nextPeerId: string;\n\n  if (currentStoryIndex < peerStoryIds.length - 1) {\n    nextStoryIndex = currentStoryIndex + 1;\n    nextPeerId = peerId;\n  } else {\n    const nextPeerIdIndex = orderedPeerIds.indexOf(peerId) + 1;\n    if (isSinglePeer || nextPeerIdIndex > orderedPeerIds.length - 1) {\n      actions.closeStoryViewer({ tabId });\n      return undefined;\n    }\n\n    nextPeerId = orderedPeerIds[nextPeerIdIndex];\n    nextStoryIndex = 0;\n  }\n\n  const nextStoryId = storyIdsByPeerId?.[nextPeerId]?.[nextStoryIndex];\n  if (!nextStoryId) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      peerId: nextPeerId,\n      storyId: nextStoryId,\n    },\n  }, tabId);\n});\n\naddActionHandler('openStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { storyId, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        storyId,\n        nextOffset: '',\n        isLoading: true,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryViewModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: omit(tabState.storyViewer, ['viewModal']),\n  }, tabId);\n});\n\naddActionHandler('copyStoryLink', async (global, actions, payload): Promise<void> => {\n  const { peerId, storyId, tabId = getCurrentTabId() } = payload;\n\n  const peer = selectPeer(global, peerId);\n  if (!peer) {\n    return;\n  }\n\n  const link = await callApi('fetchStoryLink', { peer, storyId });\n  if (!link) {\n    return;\n  }\n\n  copyTextToClipboard(link);\n  actions.showNotification({\n    message: langProvider.oldTranslate('LinkCopied'),\n    tabId,\n  });\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const { storyId, peerId: storyPeerId } = selectCurrentViewedStory(global, tabId);\n  const isStoryReply = Boolean(storyId && storyPeerId);\n\n  if (!isStoryReply) {\n    return;\n  }\n\n  const { gif, sticker, isReaction } = payload;\n\n  let message: string;\n  if (gif) {\n    message = 'Story.Tooltip.GifSent';\n  } else if (sticker) {\n    message = 'Story.Tooltip.StickerSent';\n  } else if (isReaction) {\n    message = 'Story.Tooltip.ReactionSent';\n  } else {\n    message = 'Story.Tooltip.MessageSent';\n  }\n\n  actions.showNotification({\n    message: langProvider.oldTranslate(message),\n    actionText: langProvider.oldTranslate('Story.ToastViewInChat'),\n    action: [{\n      action: 'closeStoryViewer',\n      payload: undefined,\n    }, {\n      action: 'openChat',\n      payload: { id: storyPeerId },\n    }],\n    tabId,\n  });\n});\n\naddActionHandler('openStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeStoryPrivacyEditor', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isPrivacyModalOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleStealthModal', (global, actions, payload): ActionReturnType => {\n  const { isOpen, tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      isStealthModalOpen: isOpen,\n    },\n  }, tabId);\n});\n\naddActionHandler('clearStoryViews', (global, actions, payload): ActionReturnType => {\n  const { isLoading, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n\n  if (!tabState.storyViewer.viewModal) return global;\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...tabState.storyViewer.viewModal,\n        views: undefined,\n        isLoading,\n        nextOffset: '',\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('updateStoryView', (global, actions, payload): ActionReturnType => {\n  const {\n    userId, isUserBlocked, areStoriesBlocked, tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const { viewModal } = tabState.storyViewer;\n  if (!viewModal?.storyId) return undefined;\n\n  const updatedViews = viewModal?.views?.map((view) => {\n    if (view.peerId === userId) {\n      return {\n        ...view,\n        isUserBlocked: isUserBlocked || undefined,\n        areStoriesBlocked: areStoriesBlocked || undefined,\n      };\n    }\n\n    return view;\n  });\n\n  return updateTabState(global, {\n    storyViewer: {\n      ...tabState.storyViewer,\n      viewModal: {\n        ...viewModal,\n        views: updatedViews,\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeBoostModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeBoostStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    boostStatistics: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeMonetizationStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    monetizationStatistics: undefined,\n  }, tabId);\n});\n","import type { ApiMessage, ApiUpdateChat } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { isLocalMessageId } from '../../../util/keys/messageKey';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport { checkIfHasUnreadReactions, isChatChannel } from '../../helpers';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\nimport {\n  addUnreadMentions,\n  deleteChatMessages,\n  deletePeerPhoto,\n  leaveChat,\n  removeUnreadMentions,\n  replacePeerPhotos,\n  replacePinnedTopicIds,\n  replaceThreadParam,\n  updateChat,\n  updateChatFullInfo,\n  updateChatListIds,\n  updateChatListType,\n  updatePeerStoriesHidden,\n  updateTopic,\n} from '../../reducers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport {\n  selectChat,\n  selectChatFullInfo,\n  selectChatListType,\n  selectChatMessages,\n  selectCommonBoxChatId,\n  selectCurrentMessageList,\n  selectIsChatListed,\n  selectPeer,\n  selectTabState,\n  selectThreadParam,\n  selectTopicFromMessage,\n} from '../../selectors';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const localChat = selectChat(global, update.id);\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = localChat || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat);\n\n      if (localChat?.areStoriesHidden !== update.chat.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.chat.areStoriesHidden || false);\n      }\n\n      setGlobal(global);\n\n      const updatedChat = selectChat(global, update.id);\n      if (!update.noTopChatsRequest && updatedChat && !selectIsChatListed(global, update.id)\n          && !updatedChat.isNotJoined) {\n        // Reload top chats to update chat listing\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      const chat = selectChat(global, update.id);\n\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      actions.loadFullChat({ chatId: update.id, force: true });\n\n      if (!listType) {\n        return undefined;\n      }\n\n      global = getGlobal();\n      global = updateChatListIds(global, listType, [update.id]);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      global = leaveChat(global, update.id);\n      const chat = selectChat(global, update.id);\n      if (chat && isChatChannel(chat)) {\n        const chatMessages = selectChatMessages(global, update.id);\n        if (chatMessages) {\n          const localMessageIds = Object.keys(chatMessages).map(Number).filter(isLocalMessageId);\n          global = deleteChatMessages(global, chat.id, localMessageIds);\n        }\n      }\n\n      return global;\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n      });\n\n      if (hasMention) {\n        global = addUnreadMentions(global, update.chatId, chat, [update.message.id!], true);\n      }\n\n      const topic = chat.isForum ? selectTopicFromMessage(global, message as ApiMessage) : undefined;\n      if (topic) {\n        global = updateTopic(global, update.chatId, topic.id, {\n          unreadCount: topic.unreadCount ? topic.unreadCount + 1 : 1,\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (messageUpdate.reactions && chat?.unreadReactionsCount\n            && !checkIfHasUnreadReactions(global, messageUpdate.reactions)) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: Math.max(chat.unreadReactionsCount - 1, 0) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (!messageUpdate.hasUnreadMention && chat?.unreadMentionsCount) {\n          global = removeUnreadMentions(global, chatId, chat, [id], true);\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      return updateChatFullInfo(global, update.id, update.fullInfo);\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updatePinnedSavedDialogIds': {\n      const { ids } = update;\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateSavedDialogPinned': {\n      const { id, isPinned } = update;\n\n      const { saved: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            saved: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const isDeleted = folder === undefined;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const tabState = selectTabState(global, tabId);\n        const isFolderActive = Object.values(chatFoldersById)[tabState.activeChatFolder - 1]?.id === id;\n\n        if (isFolderActive) {\n          global = updateTabState(global, { activeChatFolder: 0 }, tabId);\n        }\n      });\n\n      const newChatFoldersById = !isDeleted ? { ...chatFoldersById, [id]: folder } : omit(chatFoldersById, [id]);\n      const newOrderedIds = !isDeleted\n        ? orderedIds?.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds?.filter((orderedId) => orderedId !== id);\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n          invites: omit(global.chatFolders.invites, [id]),\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChatFullInfo = selectChatFullInfo(global, update.id);\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChatFullInfo) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChatFullInfo?.members\n        ? [...targetChatFullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        global = updateChat(global, update.id, { membersCount: members.length });\n        global = updateChatFullInfo(global, update.id, {\n          members,\n          adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n        });\n\n        return global;\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, threadId, draft,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', draft);\n      global = updateChat(global, chatId, { draftDate: draft?.date });\n      return global;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChatFullInfo(global, chatId, {\n        requestsPending,\n        recentRequesterIds,\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = replacePinnedTopicIds(global, chatId, order);\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n\n    case 'updateViewForumAsMessages': {\n      const { chatId, isEnabled } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      global = updateChat(global, chatId, {\n        isForumAsMessages: isEnabled,\n      });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateNewProfilePhoto': {\n      const { peerId, photo } = update;\n\n      global = updateChat(global, peerId, {\n        avatarPhotoId: photo.id,\n      });\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n\n    case 'updateDeleteProfilePhoto': {\n      const { peerId, photoId } = update;\n\n      const peer = selectPeer(global, peerId);\n      if (!peer) {\n        return undefined;\n      }\n\n      if (!photoId || peer.avatarPhotoId === photoId) {\n        global = updateChat(global, peerId, {\n          avatarPhotoId: undefined,\n        });\n        global = replacePeerPhotos(global, peerId, undefined);\n      } else {\n        global = deletePeerPhoto(global, peerId, photoId);\n      }\n      setGlobal(global);\n\n      actions.loadMoreProfilePhotos({ peerId, shouldInvalidateCache: true });\n\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { throttleWithFullyIdle } from '../../../lib/teact/heavyAnimation';\n\nimport type { ApiUserStatus } from '../../../api/types';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport {\n  deleteContact,\n  replaceUserStatuses,\n  updatePeerStoriesHidden,\n  updateUser,\n  updateUserFullInfo,\n} from '../../reducers';\nimport {\n  selectIsChatWithSelf, selectIsCurrentUserPremium, selectUser, selectUserFullInfo,\n} from '../../selectors';\n\nconst updateStatusesOnFullyIdle = throttleWithFullyIdle(flushStatusUpdates);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsChatWithSelf(global, update.id) && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          if (update.user.isPremium && global.byTabId[tabId].premiumModal) {\n            actions.openPremiumModal({ isSuccess: true, tabId });\n          }\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      const localUser = selectUser(global, update.id);\n\n      global = updateUser(global, update.id, update.user);\n      if (update.fullInfo) {\n        global = updateUserFullInfo(global, update.id, update.fullInfo);\n      }\n\n      if (localUser?.areStoriesHidden !== update.user.areStoriesHidden) {\n        global = updatePeerStoriesHidden(global, update.id, update.user.areStoriesHidden || false);\n      }\n\n      return global;\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      pendingStatusUpdates[update.userId] = update.status;\n      updateStatusesOnFullyIdle();\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n\n      return updateUserFullInfo(global, id, fullInfo);\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUserFullInfo = selectUserFullInfo(global, botId);\n      if (!targetUserFullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUserFullInfo(global, botId, {\n        botInfo: {\n          ...targetUserFullInfo.botInfo,\n          menuButton: button,\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\nimport { updateStickerSet } from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addBlockedUser,\n  addChats,\n  addStoriesForPeer,\n  addUsers,\n  removeBlockedUser,\n  removePeerStory,\n  setConfirmPaymentUrl,\n  setPaymentStep,\n  updateLastReadStoryForPeer,\n  updatePeerStory,\n  updatePeersWithStories,\n  updatePoll,\n  updateStealthMode,\n  updateThreadInfos,\n} from '../../reducers';\nimport { selectPeerStories, selectPeerStory } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateEntities': {\n      const {\n        users, chats, threadInfos, polls,\n      } = update;\n      if (users) global = addUsers(global, users);\n      if (chats) global = addChats(global, chats);\n      if (threadInfos) global = updateThreadInfos(global, threadInfos);\n      if (polls) {\n        polls.forEach((poll) => {\n          global = updatePoll(global, poll.id, poll);\n        });\n      }\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedUser(global, update.id);\n      } else if (update.isBlockedFromStories) {\n        return global; // Unsupported\n      } else {\n        return removeBlockedUser(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateNewAuthorization': {\n      // Load more info about this session\n      actions.loadAuthorizations();\n      break;\n    }\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentReactions':\n      actions.loadRecentReactions();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateSavedReactionTags':\n      actions.loadSavedReactionTags();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder': {\n      // Filter out invalid set IDs, which may be sent by the server\n      const order = update.order.filter((setId) => Boolean(global.stickers.setsById[setId]));\n\n      actions.reorderStickerSets({ order, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApps.activeWebApp?.queryId === update.queryId) {\n          actions.resetDraftReplyInfo({ tabId: tabState.id });\n          actions.closeActiveWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n\n    case 'updateStory':\n      global = addStoriesForPeer(global, update.peerId, { [update.story.id]: update.story });\n      global = updatePeersWithStories(global, { [update.peerId]: selectPeerStories(global, update.peerId)! });\n      setGlobal(global);\n      break;\n\n    case 'deleteStory':\n      global = removePeerStory(global, update.peerId, update.storyId);\n      setGlobal(global);\n      break;\n\n    case 'updateReadStories':\n      global = updateLastReadStoryForPeer(global, update.peerId, update.lastReadId);\n      setGlobal(global);\n      break;\n\n    case 'updateSentStoryReaction': {\n      const { peerId, storyId, reaction } = update;\n      const story = selectPeerStory(global, peerId, storyId);\n      if (!story) return global;\n      global = updatePeerStory(global, peerId, storyId, { sentReaction: reaction });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateStealthMode':\n      global = updateStealthMode(global, update.stealthMode);\n      setGlobal(global);\n      break;\n\n    case 'updateAttachMenuBots':\n      actions.loadAttachBots();\n      break;\n\n    case 'updatePremiumFloodWait': {\n      actions.processPremiumFloodWait({\n        isUpload: update.isUpload,\n      });\n      break;\n    }\n\n    case 'updatePaidReactionPrivacy': {\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          paidReactionPrivacy: update.isPrivate,\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler, setGlobal } from '../../index';\nimport {\n  addNotifyException, updateChat, updateNotifySettings,\n  updateTopic,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { addActionHandler } from '../../index';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePasswordError': {\n      return {\n        ...global,\n        monetizationInfo: {\n          ...global.monetizationInfo,\n          isLoading: false,\n          error: update.error,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { omit } from '../../../util/iteratees';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\nimport { addActionHandler, getGlobal } from '../../index';\nimport { updateChat, updateChatFullInfo } from '../../reducers';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectChat } from '../../selectors';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChatFullInfo(global, update.chatId, {\n          groupCallId: update.call.id,\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import type { ActionReturnType } from '../../types';\n\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\nimport * as langProvider from '../../../util/oldLangProvider';\nimport { addActionHandler, setGlobal } from '../../index';\nimport { updateStarsBalance } from '../../reducers';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const form = paymentState.form!;\n      const { invoice } = form;\n\n      const { totalAmount, currency } = invoice;\n\n      if (paymentState.inputInvoice?.type === 'stars') {\n        actions.closeStarsBalanceModal({ tabId });\n        actions.showNotification({\n          message: langProvider.oldTranslate('StarsAcquiredInfo', paymentState.inputInvoice.stars),\n          title: langProvider.oldTranslate('StarsAcquired'),\n          icon: 'star',\n          tabId,\n        });\n        actions.requestConfetti({ withStars: true, tabId });\n      } else {\n        actions.showNotification({\n          tabId,\n          message: langProvider.oldTranslate('PaymentInfoHint', [\n            formatCurrencyAsString(totalAmount, currency, langProvider.getTranslationFn().code),\n            form.title,\n          ]),\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateStarPaymentStateCompleted': {\n      const { paymentState, tabId } = update;\n      const { inputInvoice, subscriptionInfo } = paymentState;\n      if (inputInvoice?.type === 'chatInviteSubscription' && subscriptionInfo) {\n        const amount = subscriptionInfo.subscriptionPricing!.amount;\n\n        actions.showNotification({\n          tabId,\n          title: langProvider.oldTranslate('StarsSubscriptionCompleted'),\n          message: langProvider.oldTranslate('StarsSubscriptionCompletedText', [\n            amount,\n            subscriptionInfo.title,\n          ], undefined, amount),\n          icon: 'star',\n        });\n      }\n\n      if (inputInvoice?.type === 'giftcode') {\n        if (!inputInvoice.userIds) {\n          return;\n        }\n        const giftModalState = selectTabState(global, tabId).giftModal;\n\n        if (giftModalState && inputInvoice.userIds[0] === giftModalState.forUserId) {\n          global = updateTabState(global, {\n            giftModal: {\n              ...giftModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n      }\n\n      if (inputInvoice?.type === 'starsgift') {\n        if (!inputInvoice.userId) {\n          return;\n        }\n        const starsModalState = selectTabState(global, tabId).starsGiftModal;\n\n        if (starsModalState?.isOpen && inputInvoice.userId === starsModalState.forUserId) {\n          global = updateTabState(global, {\n            starsGiftModal: {\n              ...starsModalState,\n              isCompleted: true,\n            },\n          }, tabId);\n        }\n\n        actions.requestConfetti({ withStars: true, tabId });\n      }\n      break;\n    }\n\n    case 'updateStarsBalance': {\n      const stars = global.stars;\n      if (!stars) {\n        return;\n      }\n\n      global = updateStarsBalance(global, update.balance);\n\n      setGlobal(global);\n\n      actions.loadStarStatus();\n      break;\n    }\n  }\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/windowEnvironment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default ActiveCallHeaderAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GroupCall';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default GroupCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default PhoneCallAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default RatePhoneCallModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CustomEmojiSetsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default CustomEmojiSetsModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteMessageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default DeleteMessageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './StickerSetModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default StickerSetModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { updateAppBadge } from '../../util/appBadge';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ArchivedChats';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default ArchivedChatsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useOldLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon icon-new-chat-filled\" />\n        <i className=\"icon icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default NewChatButton;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './LeftSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default LeftSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder, ApiChatlistExportedInvite, ApiSession } from '../../../api/types';\nimport type { GlobalState } from '../../../global/types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { MenuItemContextAction } from '../../ui/ListItem';\nimport type { TabWithProperties } from '../../ui/TabList';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { selectCanShareFolder, selectTabState } from '../../../global/selectors';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport StoryRibbon from '../../story/StoryRibbon';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n  isForumPanelOpen?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  folderInvitesById: Record<number, ApiChatlistExportedInvite[]>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  maxChatLists: number;\n  maxFolderInvites: number;\n  hasArchivedChats?: boolean;\n  hasArchivedStories?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isStoryRibbonShown?: boolean;\n  sessions?: Record<string, ApiSession>;\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  maxChatLists,\n  shouldHideFolderTabs,\n  folderInvitesById,\n  maxFolderInvites,\n  hasArchivedChats,\n  hasArchivedStories,\n  archiveSettings,\n  isStoryRibbonShown,\n  sessions,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n    openShareChatFolderModal,\n    openDeleteChatFolderModal,\n    openEditChatFolder,\n    openLimitReachedModal,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n\n  useEffect(() => {\n    loadChatFolders();\n  }, []);\n\n  const {\n    ref,\n    shouldRender: shouldRenderStoryRibbon,\n    getIsClosing: getIsStoryRibbonClosing,\n  } = useShowTransition({\n    isOpen: isStoryRibbonShown,\n    className: false,\n    withShouldRender: true,\n  });\n  const isStoryRibbonClosing = useDerivedState(getIsStoryRibbonClosing);\n\n  const allChatsFolder: ApiChatFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n      includedChatIds: MEMO_EMPTY_ARRAY,\n      excludedChatIds: MEMO_EMPTY_ARRAY,\n    } satisfies ApiChatFolder;\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map((folder, i) => {\n      const { id, title } = folder;\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n      const canShareFolder = selectCanShareFolder(getGlobal(), id);\n      const contextActions: MenuItemContextAction[] = [];\n\n      if (canShareFolder) {\n        contextActions.push({\n          title: lang('ChatList.ContextMenuShare'),\n          icon: 'link',\n          handler: () => {\n            const chatListCount = Object.values(chatFoldersById).reduce((acc, el) => acc + (el.isChatList ? 1 : 0), 0);\n            if (chatListCount >= maxChatLists && !folder.isChatList) {\n              openLimitReachedModal({\n                limit: 'chatlistJoined',\n              });\n              return;\n            }\n\n            // Greater amount can be after premium downgrade\n            if (folderInvitesById[id]?.length >= maxFolderInvites) {\n              openLimitReachedModal({\n                limit: 'chatlistInvites',\n              });\n              return;\n            }\n\n            openShareChatFolderModal({\n              folderId: id,\n            });\n          },\n        });\n      }\n\n      if (id !== ALL_FOLDER_ID) {\n        contextActions.push({\n          title: lang('FilterEdit'),\n          icon: 'edit',\n          handler: () => {\n            openEditChatFolder({ folderId: id });\n          },\n        });\n\n        contextActions.push({\n          title: lang('FilterDeleteItem'),\n          icon: 'delete',\n          destructive: true,\n          handler: () => {\n            openDeleteChatFolderModal({ folderId: id });\n          },\n        });\n      }\n\n      return {\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n        contextActions: contextActions?.length ? contextActions : undefined,\n      } satisfies TabWithProperties;\n    });\n  }, [\n    displayedFolders, maxFolders, folderCountersById, lang, chatFoldersById, maxChatLists, folderInvitesById,\n    maxFolderInvites,\n  ]);\n\n  const handleSwitchTab = useLastCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  });\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    ref: placeholderRef,\n    shouldRender: shouldRenderPlaceholder,\n  } = useShowTransition({\n    isOpen: !orderedFolderIds,\n    noMountTransition: true,\n    withShouldRender: true,\n  });\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={(hasArchivedChats || hasArchivedStories) && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n        sessions={sessions}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n        shouldRenderStoryRibbon && 'with-story-ribbon',\n      )}\n    >\n      {shouldRenderStoryRibbon && <StoryRibbon isClosing={isStoryRibbonClosing} />}\n      {shouldRenderFolders ? (\n        <TabList\n          contextRootElementSelector=\"#LeftColumn\"\n          tabs={folderTabs}\n          activeTab={activeChatFolder}\n          onSwitchTab={handleSwitchTab}\n          areFolders\n        />\n      ) : shouldRenderPlaceholder ? (\n        <div ref={placeholderRef} className=\"tabs-placeholder\" />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n        invites: folderInvitesById,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      stories: {\n        orderedPeerIds: {\n          archived: archivedStories,\n        },\n      },\n      activeSessions: {\n        byHash: sessions,\n      },\n      currentUserId,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n    const { storyViewer: { isRibbonShown: isStoryRibbonShown } } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      folderInvitesById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      hasArchivedStories: Boolean(archivedStories?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      maxFolderInvites: selectCurrentLimit(global, 'chatlistInvites'),\n      maxChatLists: selectCurrentLimit(global, 'chatlistJoined'),\n      archiveSettings,\n      isStoryRibbonShown,\n      sessions,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ContactList';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default ContactListAsync;\n","import type { GlobalState } from '../global/types';\nimport type { LangFn } from './useOldLang';\n\nimport useBrowserOnline from './window/useBrowserOnline';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: boolean | undefined,\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useOldLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slideFade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../../types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_LEVEL_MIN,\n  ARCHIVED_FOLDER_ID,\n  BETA_CHANGELOG_URL,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n  WEB_VERSION_BASE,\n} from '../../../config';\nimport {\n  INITIAL_PERFORMANCE_STATE_MAX,\n  INITIAL_PERFORMANCE_STATE_MID,\n  INITIAL_PERFORMANCE_STATE_MIN,\n} from '../../../global/initialState';\nimport { selectTabState, selectTheme } from '../../../global/selectors';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport { switchPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\n\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AttachBotItem from '../../middle/composer/AttachBotItem';\nimport MenuItem from '../../ui/MenuItem';\nimport Switcher from '../../ui/Switcher';\nimport Toggle from '../../ui/Toggle';\n\ntype OwnProps = {\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onBotMenuOpened: NoneToVoidFunction;\n  onBotMenuClosed: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  animationLevel: AnimationLevel;\n  theme: ThemeKey;\n  canInstall?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n} & Pick<GlobalState, 'currentUserId' | 'archiveSettings'>;\n\nconst LeftSideMenuItems = ({\n  currentUserId,\n  archiveSettings,\n  animationLevel,\n  theme,\n  canInstall,\n  attachBots,\n  onSelectArchived,\n  onSelectContacts,\n  onSelectSettings,\n  onBotMenuOpened,\n  onBotMenuClosed,\n}: OwnProps & StateProps) => {\n  const {\n    openChat,\n    setSettingOption,\n    updatePerformanceSettings,\n    openChatByUsername,\n    openUrl,\n    openChatWithInfo,\n  } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  const animationLevelValue = animationLevel !== ANIMATION_LEVEL_MIN\n    ? (animationLevel === ANIMATION_LEVEL_MAX ? 'max' : 'mid') : 'min';\n\n  const withOtherVersions = !IS_ELECTRON && (window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST);\n\n  const archivedUnreadChatsCount = useFolderManagerForUnreadCounters()[ARCHIVED_FOLDER_ID]?.chatsCount || 0;\n\n  const bots = useMemo(() => Object.values(attachBots).filter((bot) => bot.isForSideMenu), [attachBots]);\n\n  const handleSelectSaved = useLastCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleDarkModeToggle = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n  });\n\n  const handleAnimationLevelChange = useLastCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    let newLevel = animationLevel + 1;\n    if (newLevel > ANIMATION_LEVEL_MAX) {\n      newLevel = ANIMATION_LEVEL_MIN;\n    }\n    const performanceSettings = newLevel === ANIMATION_LEVEL_MIN\n      ? INITIAL_PERFORMANCE_STATE_MIN\n      : (newLevel === ANIMATION_LEVEL_MAX ? INITIAL_PERFORMANCE_STATE_MAX : INITIAL_PERFORMANCE_STATE_MID);\n\n    setSettingOption({ animationLevel: newLevel as AnimationLevel });\n    updatePerformanceSettings(performanceSettings);\n  });\n\n  const handleChangelogClick = useLastCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  });\n\n  const handleSwitchToWebK = useLastCallback(() => {\n    switchPermanentWebVersion('K');\n  });\n\n  const handleOpenTipsChat = useLastCallback(() => {\n    openChatByUsername({ username: oldLang('Settings.TipsUsername') });\n  });\n\n  const handleBugReportClick = useLastCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  });\n\n  const handleOpenMyStories = useLastCallback(() => {\n    openChatWithInfo({ id: currentUserId, shouldReplaceHistory: true, profileTab: 'stories' });\n  });\n\n  return (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {oldLang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{oldLang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {oldLang('Contacts')}\n      </MenuItem>\n      {bots.map((bot) => (\n        <AttachBotItem\n          bot={bot}\n          theme={theme}\n          isInSideMenu\n          canShowNew\n          onMenuOpened={onBotMenuOpened}\n          onMenuClosed={onBotMenuClosed}\n        />\n      ))}\n      <MenuItem\n        icon=\"play-story\"\n        onClick={handleOpenMyStories}\n      >\n        {oldLang('Settings.MyStories')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {oldLang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{oldLang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={oldLang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{oldLang('Appearance.Animations').toLowerCase()}</span>\n        <Toggle value={animationLevelValue} />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {oldLang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        {lang('MenuReportBug')}\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          {lang('MenuBetaChangelog')}\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"K\"\n          isCharIcon\n          href={`${WEB_VERSION_BASE}k`}\n          onClick={handleSwitchToWebK}\n        >\n          {lang('MenuSwitchToK')}\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          {lang('MenuInstallApp')}\n        </MenuItem>\n      )}\n    </>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      currentUserId, archiveSettings,\n    } = global;\n    const { animationLevel } = global.settings.byKey;\n    const attachBots = global.attachMenu.bots;\n\n    return {\n      currentUserId,\n      theme: selectTheme(global),\n      animationLevel,\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n      attachBots,\n    };\n  },\n)(LeftSideMenuItems));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default StatusPickerMenuAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport StarIcon from '../../common/icons/StarIcon';\nimport CustomEmojiEffect from '../../common/reactions/CustomEmojiEffect';\nimport Button from '../../ui/Button';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect]);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <StarIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global): StateProps => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\n\nimport {\n  APP_NAME,\n  DEBUG,\n  IS_BETA,\n} from '../../../config';\nimport {\n  selectCanSetPasscode,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectTabState,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { formatDateToString } from '../../../util/dates/dateFormat';\nimport { IS_APP, IS_ELECTRON, IS_MAC_OS } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport useElectronDrag from '../../../hooks/useElectronDrag';\nimport useFlag from '../../../hooks/useFlag';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport { useFullscreenStatus } from '../../../hooks/window/useFullscreen';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\n\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport StoryToggler from '../../story/StoryToggler';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport SearchInput from '../../ui/SearchInput';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport LeftSideMenuItems from './LeftSideMenuItems';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: NoneToVoidFunction;\n  onSelectContacts: NoneToVoidFunction;\n  onSelectArchived: NoneToVoidFunction;\n  onReset: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n    canSetPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'isFetchingDifference'>;\n\nconst CLEAR_DATE_SEARCH_PARAM = { date: undefined };\nconst CLEAR_CHAT_SEARCH_PARAM = { id: undefined };\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  isClosingSearch,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  connectionState,\n  isSyncing,\n  isFetchingDifference,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canSetPasscode,\n  onSearchQuery,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    lockScreen,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const oldLang = useOldLang();\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  const [isBotMenuOpen, markBotMenuOpen, unmarkBotMenuOpen] = useFlag();\n\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    oldLang,\n    connectionState,\n    isSyncing || isFetchingDifference,\n    isMessageListOpen,\n    isConnectionStatusMinimized,\n    !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  });\n\n  useHotkeys(useMemo(() => (canSetPasscode ? {\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_APP && { 'Mod+L': handleLockScreenHotkey }),\n  } : undefined), [canSetPasscode]));\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? oldLang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, oldLang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useLastCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  });\n\n  const toggleConnectionStatus = useLastCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  });\n\n  const handleLockScreen = useLastCallback(() => {\n    lockScreen();\n  });\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  const searchContent = useMemo(() => {\n    return (\n      <>\n        {selectedSearchDate && (\n          <PickerSelectedItem\n            icon=\"calendar\"\n            title={selectedSearchDate}\n            fluid\n            canClose\n            isMinimized={Boolean(globalSearchChatId)}\n            className=\"left-search-picker-item search-date\"\n            onClick={setGlobalSearchDate}\n            clickArg={CLEAR_DATE_SEARCH_PARAM}\n          />\n        )}\n        {globalSearchChatId && (\n          <PickerSelectedItem\n            className=\"left-search-picker-item\"\n            peerId={globalSearchChatId}\n            onClick={setGlobalSearchChatId}\n            fluid\n            canClose\n            isMinimized\n            clickArg={CLEAR_CHAT_SEARCH_PARAM}\n          />\n        )}\n      </>\n    );\n  }, [globalSearchChatId, selectedSearchDate]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\" ref={headerRef}>\n        {oldLang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            'main-menu',\n            oldLang.isRtl && 'rtl',\n            shouldHideSearch && oldLang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && oldLang.isRtl && 'disable-transition',\n          )}\n          forceOpen={isBotMenuOpen}\n          positionX={shouldHideSearch && oldLang.isRtl ? 'right' : 'left'}\n          transformOriginX={IS_ELECTRON && IS_MAC_OS && !isFullscreen ? 90 : undefined}\n          onTransitionEnd={oldLang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          <LeftSideMenuItems\n            onSelectArchived={onSelectArchived}\n            onSelectContacts={onSelectContacts}\n            onSelectSettings={onSelectSettings}\n            onBotMenuOpened={markBotMenuOpen}\n            onBotMenuClosed={unmarkBotMenuOpen}\n          />\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          resultsItemSelector=\".LeftSearch .ListItem-button\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {searchContent}\n          <StoryToggler canShow={!isSearchFocused && !selectedSearchDate && !globalSearchChatId} />\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${oldLang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, minDate,\n    } = tabState.globalSearch;\n    const {\n      connectionState, isSyncing, isFetchingDifference,\n    } = global;\n    const { isConnectionStatusMinimized } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      globalSearchChatId: chatId,\n      searchDate: minDate,\n      theme: selectTheme(global),\n      connectionState,\n      isSyncing,\n      isFetchingDifference,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canSetPasscode: selectCanSetPasscode(global),\n    };\n  },\n)(LeftMainHeader));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\n\nimport { PRODUCTION_URL } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ELECTRON, IS_TOUCH_ENV } from '../../../util/windowEnvironment';\n\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../../hooks/useShowTransitionDeprecated';\n\nimport Button from '../../ui/Button';\nimport Transition from '../../ui/Transition';\nimport NewChatButton from '../NewChatButton';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ChatFolders from './ChatFolders';\nimport ContactList from './ContactList.async';\nimport ForumPanel from './ForumPanel';\nimport LeftMainHeader from './LeftMainHeader';\n\nimport './LeftMain.scss';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n  const [isElectronAutoUpdateEnabled, setIsElectronAutoUpdateEnabled] = useState(false);\n\n  useEffect(() => {\n    window.electron?.getIsAutoUpdateEnabled().then(setIsElectronAutoUpdateEnabled);\n  }, []);\n\n  const {\n    shouldRenderForumPanel, handleForumPanelAnimationEnd,\n    handleForumPanelAnimationStart, isAnimationStarted,\n  } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelRendered = isForumPanelOpen && content === LeftColumnContent.ChatList;\n  const isForumPanelVisible = isForumPanelRendered && isAnimationStarted;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransitionDeprecated(isAppUpdateAvailable || isElectronUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useLastCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  });\n\n  const handleMouseLeave = useLastCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  });\n\n  const handleSelectSettings = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  });\n\n  const handleSelectContacts = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  });\n\n  const handleSelectArchived = useLastCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  });\n\n  const handleUpdateClick = useLastCallback(() => {\n    if (IS_ELECTRON && !isElectronAutoUpdateEnabled) {\n      window.open(`${PRODUCTION_URL}/get`, '_blank', 'noopener');\n    } else if (isElectronUpdateAvailable) {\n      window.electron?.installUpdate();\n    } else {\n      window.location.reload();\n    }\n  });\n\n  const handleSelectNewChannel = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  });\n\n  const handleSelectNewGroup = useLastCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  });\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useOldLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoomFade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n        shouldWrap\n        wrapExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                  isForumPanelOpen={isForumPanelVisible}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelRendered}\n          onTopicSearch={onTopicSearch}\n          onOpenAnimationStart={handleForumPanelAnimationStart}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './NewChat';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default NewChatAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Settings';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default SettingsAsync;\n","import type { RefObject } from 'react';\nimport React, {\n  memo, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { FoldersActions } from '../../hooks/reducers/useFoldersReducer';\nimport type { ReducerAction } from '../../hooks/useReducer';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { selectCurrentChat, selectIsForumPanelOpen, selectTabState } from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { captureControlledSwipe } from '../../util/swipeController';\nimport {\n  IS_APP, IS_FIREFOX, IS_MAC_OS, IS_TOUCH_ENV, LAYERS_ANIMATION_NAME,\n} from '../../util/windowEnvironment';\n\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePrevious from '../../hooks/usePrevious';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport ArchivedChats from './ArchivedChats.async';\nimport LeftMain from './main/LeftMain';\nimport NewChat from './newChat/NewChat.async';\nimport Settings from './settings/Settings.async';\n\nimport './LeftColumn.scss';\n\ninterface OwnProps {\n  ref: RefObject<HTMLDivElement>;\n}\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  nextFoldersAction?: ReducerAction<FoldersActions>;\n  isChatOpen: boolean;\n  isAppUpdateAvailable?: boolean;\n  isElectronUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n  isArchivedStoryRibbonShown?: boolean;\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nfunction LeftColumn({\n  ref,\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  nextFoldersAction,\n  isChatOpen,\n  isAppUpdateAvailable,\n  isElectronUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n  isArchivedStoryRibbonShown,\n}: OwnProps & StateProps) {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useLastCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setSettingsScreen(SettingsScreens.Main);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.Performance:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyAddByPhone:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyBio:\n        case SettingsScreens.PrivacyBirthday:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyBioAllowedContacts:\n        case SettingsScreens.PrivacyBioDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBio);\n          return;\n        case SettingsScreens.PrivacyBirthdayAllowedContacts:\n        case SettingsScreens.PrivacyBirthdayDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyBirthday);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersShare:\n          setSettingsScreen(SettingsScreens.FoldersEditFolder);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n        case SettingsScreens.FoldersEditFolderInvites:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  });\n\n  const handleSearchQuery = useLastCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  });\n\n  const handleTopicSearch = useLastCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  });\n\n  useEffect(\n    () => {\n      const isArchived = content === LeftColumnContent.Archived;\n      const isChatList = content === LeftColumnContent.ChatList;\n      const noChatOrForumOpen = !isChatOpen && !isForumPanelOpen;\n      // We listen for escape key only in these cases:\n      // 1. When we are in archived chats and no chat or forum is open.\n      // 2. When we are in any other screen except chat list and archived chat list.\n      // 3. When we are in chat list and first chat folder is active and no chat or forum is open.\n      if ((isArchived && noChatOrForumOpen) || (!isChatList && !isArchived)\n        || (isFirstChatFolderActive && noChatOrForumOpen)) {\n        return captureEscKeyListener(() => {\n          handleReset();\n        });\n      } else {\n        return undefined;\n      }\n    },\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useLastCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  });\n\n  const handleHotkeySavedMessages = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  });\n\n  const handleArchivedChats = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  });\n\n  const handleHotkeySettings = useLastCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+Shift+F': handleHotkeySearch,\n    // https://support.mozilla.org/en-US/kb/take-screenshots-firefox\n    ...(!IS_FIREFOX && {\n      'Mod+Shift+S': handleHotkeySavedMessages,\n    }),\n    ...(IS_APP && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_APP && { 'Mod+,': handleHotkeySettings }),\n  }), []));\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n\n    if (nextFoldersAction) {\n      foldersDispatch(nextFoldersAction);\n    }\n  }, [foldersDispatch, nextFoldersAction, nextSettingsScreen, requestNextSettingsScreen]);\n\n  const handleSettingsScreenSelect = useLastCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  });\n\n  const prevSettingsScreenRef = useStateRef(usePrevious(contentType === ContentType.Settings ? settingsScreen : -1));\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureControlledSwipe(ref.current!, {\n      excludedClosestSelector: '.ProfileInfo, .color-picker, .hue-picker',\n      selectorToPreventScroll: '#Settings .custom-scroll',\n      onSwipeRightStart: handleReset,\n      onCancel: () => {\n        setContent(LeftColumnContent.Settings);\n        handleSettingsScreenSelect(prevSettingsScreenRef.current!);\n      },\n    });\n  }, [prevSettingsScreenRef, ref]);\n\n  function renderContent(isActive: boolean) {\n    switch (contentType) {\n      case ContentType.Archived:\n        return (\n          <ArchivedChats\n            isActive={isActive}\n            onReset={handleReset}\n            onTopicSearch={handleTopicSearch}\n            foldersDispatch={foldersDispatch}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onLeftColumnContentChange={setContent}\n            isForumPanelOpen={isForumPanelOpen}\n            archiveSettings={archiveSettings}\n            isStoryRibbonShown={isArchivedStoryRibbonShown}\n          />\n        );\n      case ContentType.Settings:\n        return (\n          <Settings\n            isActive={isActive}\n            currentScreen={settingsScreen}\n            foldersState={foldersState}\n            foldersDispatch={foldersDispatch}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            onScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewChannel:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            isChannel\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      case ContentType.NewGroup:\n        return (\n          <NewChat\n            key={lastResetTime}\n            isActive={isActive}\n            content={content}\n            onContentChange={setContent}\n            onReset={handleReset}\n          />\n        );\n      default:\n        return (\n          <LeftMain\n            content={content}\n            isClosingSearch={isClosingSearch}\n            searchQuery={searchQuery}\n            searchDate={searchDate}\n            contactsFilter={contactsFilter}\n            foldersDispatch={foldersDispatch}\n            onContentChange={setContent}\n            onSearchQuery={handleSearchQuery}\n            onSettingsScreenSelect={handleSettingsScreenSelect}\n            onReset={handleReset}\n            shouldSkipTransition={shouldSkipHistoryAnimations}\n            isAppUpdateAvailable={isAppUpdateAvailable}\n            isElectronUpdateAvailable={isElectronUpdateAvailable}\n            isForumPanelOpen={isForumPanelOpen}\n            onTopicSearch={handleTopicSearch}\n          />\n        );\n    }\n  }\n\n  return (\n    <Transition\n      ref={ref}\n      name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={contentType}\n      shouldCleanup\n      cleanupExceptionKey={ContentType.Main}\n      shouldWrap\n      wrapExceptionKey={ContentType.Main}\n      id=\"LeftColumn\"\n      withSwipeControl\n    >\n      {renderContent}\n    </Transition>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        minDate,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n      nextFoldersAction,\n      storyViewer: {\n        isArchivedRibbonShown,\n      },\n    } = tabState;\n    const {\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: minDate,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      nextFoldersAction,\n      isChatOpen,\n      isAppUpdateAvailable,\n      isElectronUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n      isArchivedStoryRibbonShown: isArchivedRibbonShown,\n    };\n  },\n)(LeftColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default MediaViewerAsync;\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMediaHash, getMessageContent, getSenderTitle,\n} from '../global/helpers';\nimport { resizeImage, scaleImage } from '../util/imageResize';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\nimport useAsync from './useAsync';\nimport useMedia from './useMedia';\nimport useOldLang from './useOldLang';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiPeer, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useOldLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMediaHash(audio, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiPeer,\n} from '../../api/types';\nimport type { AudioOrigin } from '../../types';\n\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectSender, selectTabState } from '../../global/selectors';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport buildClassName from '../../util/buildClassName';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport RangeSlider from '../ui/RangeSlider';\nimport RippleEffect from '../ui/RippleEffect';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiPeer;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useLastCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleClose = useLastCallback(() => {\n    if (!stop) {\n      return;\n    }\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  });\n\n  const handleVolumeChange = useLastCallback((value: number) => {\n    if (!setVolume) {\n      return;\n    }\n    setAudioPlayerVolume({ volume: value / 100 });\n    setVolume(value / 100);\n  });\n\n  const handleVolumeClick = useLastCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    if (!toggleMuted) {\n      return;\n    }\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  });\n\n  const updatePlaybackRate = useLastCallback((newRate: number, isActive = true) => {\n    if (!setPlaybackRate) {\n      return;\n    }\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  });\n\n  const handlePlaybackClick = useLastCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  });\n\n  const PlaybackRateButton = useLastCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  });\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst?.()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon icon-play\" />\n        <i className=\"icon icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast?.()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={buildClassName('icon', volumeIcon)} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactionPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst ReactionPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactionPicker = useModuleLoader(Bundles.Extra, 'ReactionPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactionPicker ? <ReactionPicker {...props} /> : undefined;\n};\n\nexport default ReactionPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { createLocationHash } from '../../util/routing';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import { useEffect, useSignal } from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ThreadId } from '../../../types';\n\nimport { selectFocusedMessageId, selectListedIds, selectOutlyingListByMessageId } from '../../../global/selectors';\nimport cycleRestrict from '../../../util/cycleRestrict';\nimport { unique } from '../../../util/iteratees';\n\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport type OnIntersectPinnedMessage = (params: {\n  viewportPinnedIdsToAdd?: number[];\n  viewportPinnedIdsToRemove?: number[];\n  shouldCancelWaiting?: boolean;\n}) => void;\n\nlet viewportPinnedIds: number[] | undefined;\nlet lastFocusedId: number | undefined;\n\nexport default function usePinnedMessage(\n  chatId?: string, threadId?: ThreadId, pinnedIds?: number[],\n) {\n  const [getPinnedIndexByKey, setPinnedIndexByKey] = useSignal<Record<string, number>>({});\n  const [getLoadingPinnedId, setLoadingPinnedId] = useSignal<number | undefined>();\n  const key = chatId ? `${chatId}_${threadId}` : undefined;\n  const getCurrentPinnedIndex = useDerivedSignal(\n    () => (getPinnedIndexByKey()[key!] ?? 0),\n    [getPinnedIndexByKey, key],\n  );\n\n  // Reset when switching chat\n  useEffect(() => {\n    viewportPinnedIds = undefined;\n    setLoadingPinnedId(undefined);\n  }, [\n    chatId, setPinnedIndexByKey, setLoadingPinnedId, threadId,\n  ]);\n\n  useEffect(() => {\n    if (!key) return;\n    const currentPinnedIndex = getPinnedIndexByKey()[key];\n    const pinnedLength = pinnedIds?.length || 0;\n    if (currentPinnedIndex >= pinnedLength) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: Math.max(0, pinnedLength - 1),\n      });\n    }\n  }, [getPinnedIndexByKey, key, pinnedIds?.length, setPinnedIndexByKey]);\n\n  const handleIntersectPinnedMessage: OnIntersectPinnedMessage = useLastCallback(({\n    viewportPinnedIdsToAdd = [],\n    viewportPinnedIdsToRemove = [],\n    shouldCancelWaiting,\n  }) => {\n    if (!chatId || !threadId || !key || !pinnedIds?.length) return;\n\n    if (shouldCancelWaiting) {\n      lastFocusedId = undefined;\n      setLoadingPinnedId(undefined);\n      return;\n    }\n\n    const loadingPinnedId = getLoadingPinnedId();\n    if (loadingPinnedId) {\n      const newPinnedIndex = pinnedIds.indexOf(loadingPinnedId);\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newPinnedIndex,\n      });\n      setLoadingPinnedId(undefined);\n    }\n\n    viewportPinnedIds = unique(\n      (viewportPinnedIds?.filter((id) => !viewportPinnedIdsToRemove.includes(id)) ?? [])\n        .concat(viewportPinnedIdsToAdd),\n    );\n\n    // Sometimes this callback is called after focus has been reset in global, so we leverage `lastFocusedId`\n    const focusedMessageId = selectFocusedMessageId(getGlobal(), chatId) || lastFocusedId;\n\n    if (lastFocusedId && viewportPinnedIds.includes(lastFocusedId)) {\n      lastFocusedId = undefined;\n    }\n\n    if (focusedMessageId) {\n      const pinnedIndexAboveFocused = pinnedIds.findIndex((id) => id < focusedMessageId);\n      const newIndex = pinnedIndexAboveFocused !== -1 ? pinnedIndexAboveFocused : 0;\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    } else if (viewportPinnedIds.length) {\n      const maxViewportPinnedId = Math.max(...viewportPinnedIds);\n      const newIndex = pinnedIds.indexOf(maxViewportPinnedId);\n\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key]: newIndex,\n      });\n    }\n  });\n\n  const handleFocusPinnedMessage = useLastCallback((messageId: number) => {\n    // Focusing on a post in comments\n    if (!chatId || !threadId || !pinnedIds?.length) {\n      return;\n    }\n\n    lastFocusedId = messageId;\n\n    const global = getGlobal();\n    const listedIds = selectListedIds(global, chatId, threadId);\n    const isMessageLoaded = listedIds?.includes(messageId)\n      || selectOutlyingListByMessageId(global, chatId, threadId, messageId);\n\n    const currentIndex = pinnedIds.indexOf(messageId);\n    const newIndex = cycleRestrict(pinnedIds.length, currentIndex + 1);\n\n    if (isMessageLoaded) {\n      setPinnedIndexByKey({\n        ...getPinnedIndexByKey(),\n        [key!]: newIndex,\n      });\n    } else {\n      setLoadingPinnedId(pinnedIds[newIndex]);\n    }\n  });\n\n  return {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PrivacySettingsNoticeModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PrivacySettingsNoticeModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PrivacySettingsNoticeModal = useModuleLoader(Bundles.Extra, 'PrivacySettingsNoticeModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PrivacySettingsNoticeModal ? <PrivacySettingsNoticeModal {...props} /> : undefined;\n};\n\nexport default PrivacySettingsNoticeModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SeenByModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default SeenByModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './UnpinAllMessagesModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default UnpinAllMessagesModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ChatLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ChatLanguageModal = useModuleLoader(Bundles.Extra, 'ChatLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatLanguageModal ? <ChatLanguageModal {...props} /> : undefined;\n};\n\nexport default ChatLanguageModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EmojiInteractionAnimation';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default EmojiInteractionAnimationAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { IconName } from '../../types/icons';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: IconName;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, 'icon', `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Y2NKrpKj\",\"button\":\"cxwA6gDO\",\"icon\":\"F4zNUFhH\",\"unread-count\":\"GovSzpfQ\",\"unreadCount\":\"GovSzpfQ\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"VWoOZCD5\",\"hidden\":\"UMXbiYB3\",\"reactions\":\"eO_Fz8SD\",\"transform-down\":\"gn3iLVq1\",\"transformDown\":\"gn3iLVq1\",\"unread\":\"u62x81QI\",\"revealed\":\"iozW83la\",\"no-composer\":\"yzzjqibi\",\"noComposer\":\"yzzjqibi\",\"no-extra-shift\":\"wDwOdyQH\",\"noExtraShift\":\"wDwOdyQH\",\"hide-scroll-down\":\"UBa5kAK5\",\"hideScrollDown\":\"UBa5kAK5\",\"is-symbol-menu-open\":\"qoyRzwL6\",\"isSymbolMenuOpen\":\"qoyRzwL6\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList, selectCurrentMiddleSearch } from '../../global/selectors';\nimport animateScroll from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\n\nimport useLastCallback from '../../hooks/useLastCallback';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  withScrollDown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  unreadReactions?: number[];\n  unreadMentions?: number[];\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  withScrollDown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  unreadReactions,\n  unreadMentions,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId && !unreadReactions?.length) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions, unreadReactions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId && !unreadMentions?.length) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions, unreadMentions?.length]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleScrollDownClick = useLastCallback(() => {\n    if (!withScrollDown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>(\n        '.Transition_slide-active > .MessageList',\n      )!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      animateScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  });\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (withScrollDown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !withScrollDown && styles.hideScrollDown,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleScrollDownClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n    const hasActiveMiddleSearch = Boolean(selectCurrentMiddleSearch(global));\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread'\n      && !hasActiveMiddleSearch;\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      unreadReactions: shouldShowCount ? chat.unreadReactions : undefined,\n      unreadMentions: shouldShowCount ? chat.unreadMentions : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { isActionMessage } from '../../../global/helpers';\nimport { getDayStartAt } from '../../../util/dates/dateFormat';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(\n  messages: ApiMessage[], firstUnreadId?: number, topMessageId?: number, isChatWithSelf?: boolean,\n) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n          hasMultipleCaptions: false,\n        } satisfies IAlbum;\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.hasComments) {\n          currentAlbum.commentsMessage = message;\n        }\n        if (message.content.text && !currentAlbum.hasMultipleCaptions) {\n          if (currentAlbum.captionMessage) {\n            currentAlbum.hasMultipleCaptions = true;\n            currentAlbum.captionMessage = undefined;\n          } else {\n            currentAlbum.captionMessage = message;\n          }\n        }\n      }\n    } else if ((message.content.paidMedia?.extendedMedia.length || 0) > 1) {\n      currentSenderGroup.push({\n        albumId: `paid-${message.id}`,\n        messages: [message],\n        mainMessage: message,\n        hasMultipleCaptions: false,\n        isPaidMedia: true,\n      } satisfies IAlbum);\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n\n    const lastSenderGroupItem = currentSenderGroup[currentSenderGroup.length - 1];\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || message.postAuthorTitle !== nextMessage.postAuthorTitle\n        || (isActionMessage(message) && !message.content.action?.phoneCall)\n        || (isActionMessage(nextMessage) && !nextMessage.content.action?.phoneCall)\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n        || (topMessageId\n          && (message.id === topMessageId\n            || (lastSenderGroupItem\n              && 'mainMessage' in lastSenderGroupItem && lastSenderGroupItem.mainMessage?.id === topMessageId))\n          && nextMessage.id !== topMessageId)\n        || (isChatWithSelf && message.forwardInfo?.fromId !== nextMessage.forwardInfo?.fromId)\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"osdROIcA\",\"wrapper\":\"c3NtU3JZ\",\"explainer\":\"WIbO6rja\",\"title\":\"n2KO1cAv\",\"description\":\"MVSedxKc\",\"sticker\":\"qsfxNv7L\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBusinessIntro, ApiSticker, ApiUpdateConnectionStateType, ApiUser,\n} from '../../api/types';\nimport type { MessageList } from '../../global/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatLastMessage,\n  selectCurrentMessageList,\n  selectUser,\n  selectUserFullInfo,\n} from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport StickerView from '../common/StickerView';\n\nimport styles from './ContactGreeting.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  defaultStickers?: ApiSticker[];\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n  currentMessageList?: MessageList;\n  businessIntro?: ApiBusinessIntro;\n  user?: ApiUser;\n};\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  defaultStickers,\n  connectionState,\n  lastUnreadMessageId,\n  currentMessageList,\n  businessIntro,\n  user,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const sticker = useMemo(() => {\n    if (businessIntro?.sticker) return businessIntro.sticker;\n    if (!defaultStickers?.length) return undefined;\n\n    const randomIndex = Math.floor(Math.random() * defaultStickers.length);\n    return defaultStickers[randomIndex];\n  }, [businessIntro?.sticker, defaultStickers]);\n\n  useEffect(() => {\n    if (defaultStickers?.length || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, defaultStickers]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useLastCallback(() => {\n    if (!currentMessageList) {\n      return;\n    }\n\n    sendMessage({\n      sticker: {\n        ...sticker!,\n        isPreloadedGlobally: true,\n      },\n      messageList: currentMessageList,\n    });\n  });\n\n  const title = businessIntro?.title || lang('Conversation.EmptyPlaceholder');\n  const description = businessIntro?.description || lang('Conversation.GreetingText');\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.wrapper}>\n        <p className={styles.title} dir=\"auto\">{title}</p>\n        <p className={styles.description} dir=\"auto\">{description}</p>\n\n        <div ref={containerRef} className={styles.sticker} onClick={handleStickerSelect}>\n          {sticker && (\n            <StickerView\n              containerRef={containerRef}\n              sticker={sticker}\n              size={160}\n              shouldLoop\n            />\n          )}\n        </div>\n      </div>\n      {businessIntro && (\n        <div className={styles.explainer}>\n          {lang('Chat.EmptyStateIntroFooter', getUserFullName(user!))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    const user = selectUser(global, userId);\n    const fullInfo = selectUserFullInfo(global, userId);\n\n    const lastMessage = selectChatLastMessage(global, chat.id);\n\n    return {\n      defaultStickers: stickers,\n      lastUnreadMessageId: lastMessage && lastMessage.id !== chat.lastReadInboxMessageId\n        ? lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n      currentMessageList: selectCurrentMessageList(global),\n      businessIntro: fullInfo?.businessIntro,\n      user,\n    };\n  },\n)(ContactGreeting));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"sqThK406\",\"bot-info\":\"XhDB6LWO\",\"botInfo\":\"XhDB6LWO\",\"bot-info-description\":\"lbMO1XqP\",\"botInfoDescription\":\"lbMO1XqP\",\"bot-info-title\":\"ELYpyMpR\",\"botInfoTitle\":\"ELYpyMpR\",\"media\":\"zLLIV9Iw\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiBotInfo } from '../../api/types';\n\nimport {\n  getBotCoverMediaHash,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  getVideoMediaHash,\n  isChatWithVerificationCodesBot,\n} from '../../global/helpers';\nimport { selectBot, selectUserFullInfo } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport OptimizedVideo from '../ui/OptimizedVideo';\nimport Skeleton from '../ui/placeholder/Skeleton';\n\nimport styles from './MessageListBotInfo.module.scss';\n\ntype OwnProps = {\n  chatId: string;\n  isInMessageList?: boolean;\n};\n\ntype StateProps = {\n  botInfo?: ApiBotInfo;\n  isLoadingBotInfo?: boolean;\n};\n\nconst MessageListBotInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  botInfo,\n  isLoadingBotInfo,\n  isInMessageList,\n}) => {\n  const lang = useOldLang();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getVideoMediaHash(botInfo.gif, 'full') : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const isVerifyCodes = isChatWithVerificationCodesBot(chatId);\n\n  const { width, height } = botInfoDimensions || {};\n\n  const isEmptyOrLoading = isBotInfoEmpty || isLoadingBotInfo;\n\n  if (isEmptyOrLoading && isInMessageList) return undefined;\n\n  return (\n    <div className={buildClassName(styles.root, 'empty')}>\n      {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n      {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n      {botInfo && (\n        <div\n          className={styles.botInfo}\n          style={buildStyle(\n            width ? `width: ${width}px` : undefined,\n          )}\n        >\n          {botInfoPhotoUrl && (\n            <img\n              className={styles.media}\n              src={botInfoPhotoUrl}\n              width={width}\n              height={height}\n              alt=\"Bot info\"\n            />\n          )}\n          {botInfoGifUrl && (\n            <OptimizedVideo\n              canPlay\n              className={styles.media}\n              src={botInfoGifUrl}\n              loop\n              disablePictureInPicture\n              muted\n              playsInline\n              style={buildStyle(Boolean(width) && `width: ${width}px`, Boolean(height) && `height: ${height}px`)}\n            />\n          )}\n          {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n            <Skeleton\n              className={styles.media}\n              width={width}\n              height={height}\n              forceAspectRatio\n            />\n          )}\n          {isVerifyCodes && (\n            <div className={styles.botInfoDescription}>\n              {lang('VerifyChatInfo')}\n            </div>\n          )}\n          {!isVerifyCodes && botInfo.description && (\n            <div className={styles.botInfoDescription}>\n              <p className={styles.botInfoTitle}>{lang('BotInfoTitle')}</p>\n              {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }) => {\n    const chatBot = selectBot(global, chatId);\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (chatBot) {\n      const chatBotFullInfo = selectUserFullInfo(global, chatBot.id);\n      if (chatBotFullInfo) {\n        botInfo = chatBotFullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n    return {\n      botInfo,\n      isLoadingBotInfo,\n    };\n  },\n)(MessageListBotInfo));\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { OnIntersectPinnedMessage } from './usePinnedMessage';\n\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode, { isBackgroundModeActive } from '../../../hooks/window/useBackgroundMode';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n  onIntersectPinnedMessage: OnIntersectPinnedMessage,\n  chatId: string,\n) {\n  const {\n    markMessageListRead, markMentionsRead, animateUnreadReaction,\n    scheduleForViewsIncrement,\n  } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread' || isBackgroundModeActive()) {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n    const viewportPinnedIdsToAdd: number[] = [];\n    const viewportPinnedIdsToRemove: number[] = [];\n    const scheduledToUpdateViews: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      const { dataset } = target as HTMLDivElement;\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      const shouldUpdateViews = dataset.shouldUpdateViews === 'true';\n      const albumMainId = dataset.albumMainId ? Number(dataset.albumMainId) : undefined;\n\n      if (!isIntersecting) {\n        if (dataset.isPinned) {\n          viewportPinnedIdsToRemove.push(albumMainId || messageId);\n        }\n        return;\n      }\n\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n\n      if (dataset.isPinned) {\n        viewportPinnedIdsToAdd.push(albumMainId || messageId);\n      }\n\n      if (shouldUpdateViews) {\n        scheduledToUpdateViews.push(albumMainId || messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n\n    if (viewportPinnedIdsToAdd.length || viewportPinnedIdsToRemove.length) {\n      onIntersectPinnedMessage({ viewportPinnedIdsToAdd, viewportPinnedIdsToRemove });\n    }\n\n    if (scheduledToUpdateViews.length) {\n      scheduleForViewsIncrement({ chatId, ids: scheduledToUpdateViews });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiPaidMedia } from '../../../../api/types';\n\nexport default function getSingularPaidMedia(media?: ApiPaidMedia) {\n  if (!media || media.extendedMedia.length !== 1) {\n    return {\n      photo: undefined,\n      video: undefined,\n    };\n  }\n\n  const singularMedia = media.extendedMedia[0];\n  const isPreview = 'mediaType' in singularMedia;\n  const photo = isPreview ? (!singularMedia.duration ? singularMedia : undefined) : singularMedia.photo;\n  const video = isPreview ? (singularMedia.duration ? singularMedia : undefined) : singularMedia.video;\n\n  return { photo, video };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { ApiDimensions, ApiMessage } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { getMessageContent } from '../../../../global/helpers';\nimport { clamp } from '../../../../util/math';\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isSingleMessage?: boolean, isMobile?: boolean) {\n  const isOutgoing = messages[0].isOutgoing;\n  const allMedia = (isSingleMessage\n    ? messages[0].content.paidMedia!.extendedMedia.map((media) => (\n      'mediaType' in media ? media : (media.photo || media.video)\n    ))\n    : messages.map((message) => (\n      getMessageContent(message).photo || getMessageContent(message).video\n    ))\n  ).filter(Boolean);\n  return allMedia.map(\n    (media) => {\n      const dimensions = calculateMediaDimensions({\n        media,\n        isOwn: isOutgoing,\n        isMobile,\n      }) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, album.isPaidMedia, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { IS_TRANSLATION_SUPPORTED } from './windowEnvironment';\n\nimport Deferred from './Deferred';\nimport { createConnector } from './PostMessageConnector';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nif (IS_TRANSLATION_SUPPORTED) {\n  setTimeout(initWorker, WORKER_INIT_DELAY);\n}\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport LimitedMap from '../../../../util/primitives/LimitedMap';\nimport { throttle } from '../../../../util/schedulers';\n\n// https://github.com/DrKLO/Telegram/blob/dfd74f809e97d1ecad9672fc7388cb0223a95dfc/TMessagesProj/src/main/java/org/telegram/messenger/TranslateController.java#L35\nconst MIN_MESSAGES_CHECKED = 8;\nconst MIN_TRANSLATABLE_RATIO = 0.3;\nconst MIN_DETECTABLE_RATIO = 0.6;\n\nconst THROTTLE_DELAY = 1000;\nconst MESSAGES_LIMIT = 150;\n\ntype MessageMetadata = {\n  id: number;\n  isTranslatable: boolean;\n  detectedLanguage: string | undefined;\n};\n\nconst CHAT_STATS = new Map<string, LimitedMap<number, MessageMetadata>>();\n\nexport default function useDetectChatLanguage(\n  message: ApiMessage, detectedLanguage?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>,\n) {\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    const isTranslatable = Boolean(message.content.text?.text.length);\n    processMessageMetadata(message.chatId, message.id, isTranslatable, detectedLanguage);\n  }, [message, detectedLanguage, isDisabled, getIsReady]);\n}\n\nconst throttledMakeChatDecision = throttle(makeChatDecision, THROTTLE_DELAY);\n\nfunction processMessageMetadata(chatId: string, id: number, isTranslatable: boolean, detectedLanguage?: string) {\n  const chatStats = CHAT_STATS.get(chatId) || new LimitedMap<number, MessageMetadata>(MESSAGES_LIMIT);\n\n  const previousMetadata = chatStats.get(id);\n  if (previousMetadata && previousMetadata.detectedLanguage === detectedLanguage\n    && previousMetadata.isTranslatable === isTranslatable\n  ) {\n    return;\n  }\n\n  chatStats.set(id, {\n    id,\n    isTranslatable,\n    detectedLanguage,\n  });\n\n  CHAT_STATS.set(chatId, chatStats);\n\n  throttledMakeChatDecision(chatId);\n}\n\nfunction makeChatDecision(chatId: string) {\n  const { updateChatDetectedLanguage } = getActions();\n  const chatStats = CHAT_STATS.get(chatId);\n  if (!chatStats) {\n    return;\n  }\n\n  const messagesChecked = chatStats.size;\n  if (messagesChecked < MIN_MESSAGES_CHECKED) {\n    return;\n  }\n\n  let translatableCount = 0;\n  let detectableCount = 0;\n  const languageOccurrences = new Map<string, number>();\n\n  for (const metadata of chatStats.values()) {\n    if (metadata.isTranslatable) {\n      translatableCount++;\n    }\n\n    if (metadata.detectedLanguage) {\n      detectableCount++;\n    }\n\n    const language = metadata.detectedLanguage;\n    if (language) {\n      const occurrences = languageOccurrences.get(language) || 0;\n      languageOccurrences.set(language, occurrences + 1);\n    }\n  }\n\n  const translatableRatio = translatableCount / messagesChecked;\n  const detectableRatio = detectableCount / messagesChecked;\n\n  if (translatableRatio < MIN_TRANSLATABLE_RATIO || detectableRatio < MIN_DETECTABLE_RATIO) {\n    return;\n  }\n\n  const mostFrequentLanguage = Array.from(languageOccurrences.entries())\n    .sort(([, a], [, b]) => b - a)[0][0];\n\n  updateChatDetectedLanguage({\n    chatId,\n    detectedLanguage: mostFrequentLanguage,\n  });\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { Signal } from '../../../../util/signals';\n\nimport { requestMeasure } from '../../../../lib/fasterdom/fasterdom';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport stopEvent from '../../../../util/stopEvent';\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/windowEnvironment';\nimport windowSize from '../../../../util/windowSize';\nimport { REM } from '../../../common/helpers/mediaDimensions';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useThrottledCallback from '../../../../hooks/useThrottledCallback';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  quickReactionRef: RefObject<HTMLDivElement>,\n  shouldHandleMouseLeave: boolean,\n  getIsMessageListReady: Signal<boolean>,\n) {\n  const { updateDraftReplyInfo, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  const handleMouseMove = useThrottledCallback((e: React.MouseEvent) => {\n    const quickReactionContainer = quickReactionRef.current;\n    if (!quickReactionContainer) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x: quickReactionX, width: quickReactionWidth, y: quickReactionY, height: quickReactionHeight,\n    } = quickReactionContainer.getBoundingClientRect();\n    const x = quickReactionX + quickReactionWidth / 2;\n    const y = quickReactionY + quickReactionHeight / 2;\n\n    const isVisibleX = Math.abs(x - clientX) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }, [quickReactionRef], requestMeasure);\n\n  function handleSendQuickReaction(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    updateDraftReplyInfo({ replyToMsgId: messageId, replyToPeerId: undefined, quoteText: undefined });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown || !getIsMessageListReady()) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        updateDraftReplyInfo({ replyToMsgId: messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n    getIsMessageListReady,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    // Because `mousemove` event is throttled, we need to also throttle `mouseleave` event,\n    // so the order of events is preserved\n    requestMeasure(unmarkQuickReactionVisible);\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPeer, ApiTypeStory } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  getSenderTitle,\n  getStoryMediaHash,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { getPictogramDimensions } from '../helpers/mediaDimensions';\nimport { getPeerColorClass } from '../helpers/peerColor';\nimport renderText from '../helpers/renderText';\n\nimport { useFastClick } from '../../../hooks/useFastClick';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../icons/Icon';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  story?: ApiTypeStory;\n  sender?: ApiPeer;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedStory: FC<OwnProps> = ({\n  story,\n  sender,\n  noUserColors,\n  isProtected,\n  observeIntersectionForLoading,\n  onClick,\n}) => {\n  const { showNotification } = getActions();\n\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isFullStory = story && 'content' in story;\n  const isExpiredStory = story && 'isDeleted' in story;\n  const isVideoStory = isFullStory && Boolean(story.content.video);\n  const title = isFullStory ? 'Story' : (isExpiredStory ? 'ExpiredStory' : 'Loading');\n\n  const mediaBlobUrl = useMedia(isFullStory && getStoryMediaHash(story, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = isVideoStory ? story.content.video!.thumbnail?.dataUri : undefined;\n  const pictogramUrl = mediaBlobUrl || mediaThumbnail;\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : undefined;\n  const handleFastClick = useLastCallback(() => {\n    if (story && !isExpiredStory) {\n      onClick();\n    } else {\n      showNotification({\n        message: lang('StoryNotFound'),\n      });\n    }\n  });\n\n  const { handleClick, handleMouseDown } = useFastClick(handleFastClick);\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        getPeerColorClass(sender, noUserColors, true),\n        pictogramUrl && 'with-thumb',\n      )}\n      onClick={handleClick}\n      onMouseDown={handleMouseDown}\n    >\n      {pictogramUrl && renderPictogram(pictogramUrl, isProtected)}\n      <div className=\"message-text with-message-color\">\n        <p className=\"embedded-text-wrapper\">\n          {isExpiredStory && (\n            <Icon name=\"story-expired\" className=\"embedded-origin-icon\" />\n          )}\n          {isFullStory && (\n            <Icon name=\"story-reply\" className=\"embedded-origin-icon\" />\n          )}\n          {lang(title)}\n        </p>\n        <div className=\"message-title\">{renderText(senderTitle || NBSP)}</div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  srcUrl: string,\n  isProtected?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  return (\n    <div className=\"embedded-thumb\">\n      <img\n        src={srcUrl}\n        width={width}\n        height={height}\n        alt=\"\"\n        className=\"pictogram\"\n        draggable={false}\n      />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedStory;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport renderText from './helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\n\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useOldLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" draggable={false} />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon icon-lock\" />}\n      <i className=\"icon icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JldIqqof\"};","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\ntype OwnProps<T> =\n  (PhotoProps<T> | VideoProps<T>) & {\n    clickArg: number;\n    noSelectControls?: boolean;\n  };\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  // eslint-disable-next-line @typescript-eslint/comma-dangle\n  const ComponentWithSelectControl = <T,>(props: OwnProps<T> & StateProps) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      dimensions,\n      clickArg,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useLastCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: clickArg, withShift: e?.shiftKey });\n    });\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps<unknown>>(\n    (global, ownProps) => {\n      const { clickArg, noSelectControls } = ownProps;\n      return {\n        isInSelectMode: !noSelectControls && selectIsInSelectMode(global),\n        isSelected: !noSelectControls && selectIsMessageSelected(global, clickArg),\n      };\n    },\n  )(ComponentWithSelectControl)) as typeof ComponentWithSelectControl;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { GlobalState, TabState } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\n\nimport {\n  getIsDownloading, getMessageContent, getMessageHtmlId, getMessagePhoto,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\nimport withSelectControl from './hocs/withSelectControl';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number, index?: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsByKey: GlobalState['fileUploads']['byMessageKey'];\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsByKey,\n  activeDownloads,\n  theme,\n}) => {\n  const { cancelUploadMedia } = getActions();\n\n  const { content: { paidMedia } } = album.mainMessage;\n\n  const mediaCount = album.isPaidMedia ? paidMedia!.extendedMedia.length : album.messages.length;\n\n  const handlePaidMediaClick = useLastCallback((index: number) => {\n    onMediaClick(album.mainMessage.id, index);\n  });\n\n  const handleAlbumMessageClick = useLastCallback((messageId: number) => {\n    onMediaClick(messageId);\n  });\n\n  const handleCancelUpload = useLastCallback((messageId: number) => {\n    cancelUploadMedia({ chatId: album.mainMessage.chatId, messageId });\n  });\n\n  const messages = useMemo(() => {\n    if (album.isPaidMedia) {\n      return album.mainMessage.content.paidMedia!.extendedMedia.map(() => album.mainMessage);\n    }\n\n    return album.messages;\n  }, [album]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const renderingPaidMedia = album.isPaidMedia ? message.content.paidMedia?.extendedMedia[index] : undefined;\n    const paidPhotoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.photo;\n    const paidVideoOrPreview = renderingPaidMedia && 'mediaType' in renderingPaidMedia\n      ? renderingPaidMedia : renderingPaidMedia?.video;\n    const photo = paidPhotoOrPreview || getMessagePhoto(message);\n    const video = paidVideoOrPreview || getMessageContent(message).video;\n\n    const fileUpload = uploadsByKey[getMessageKey(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id, album.isPaidMedia ? index : undefined)}`}\n          photo={photo}\n          isOwn={isOwn}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={photo.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, photo)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          video={video}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          clickArg={album.isPaidMedia ? index : message.id}\n          onClick={album.isPaidMedia ? handlePaidMediaClick : handleAlbumMessageClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={video.mediaType !== 'extendedMediaPreview' && getIsDownloading(activeDownloads, video)}\n          theme={theme}\n          noSelectControls={album.isPaidMedia}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const activeDownloads = selectActiveDownloads(global);\n\n    return {\n      theme,\n      uploadsByKey: global.fileUploads.byMessageKey,\n      activeDownloads,\n    };\n  },\n)(Album);\n","import { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport buildStyle from '../../../util/buildStyle';\nimport safePlay from '../../../util/safePlay';\nimport { IS_ELECTRON } from '../../../util/windowEnvironment';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && !IS_ELECTRON && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useLastCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  });\n\n  const play = useLastCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  });\n\n  const handleClick = useLastCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  });\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n  selectCanPlayAnimatedEmojis,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\n\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n  noPlay?: boolean;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  noPlay,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      noPlay={noPlay}\n      withSharedAnimation\n      forceOnHeavyAnimation={Boolean(effect && activeEmojiInteractions?.length)}\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n    noPlay: !selectCanPlayAnimatedEmojis(global),\n  };\n})(AnimatedCustomEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects?: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      play={isIntersecting}\n      forceAlways\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { ApiCommentsInfo } from '../../../api/types';\n\nimport { selectPeer } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Avatar from '../../common/Avatar';\nimport Spinner from '../../ui/Spinner';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiCommentsInfo;\n  disabled?: boolean;\n  isLoading?: boolean;\n  isCustomShape?: boolean;\n};\n\nconst SHOW_LOADER_DELAY = 450;\n\nconst CommentButton: FC<OwnProps> = ({\n  isCustomShape,\n  threadInfo,\n  disabled,\n  isLoading,\n}) => {\n  const { openThread } = getActions();\n\n  const shouldRenderLoading = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n\n  const lang = useOldLang();\n  const {\n    originMessageId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useLastCallback(() => {\n    openThread({\n      isComments: true, chatId, originMessageId, originChannelId,\n    });\n  });\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const global = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return selectPeer(global, peerId);\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      Boolean(recentRepliers?.length) && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers!.map((peer) => (\n            <Avatar\n              key={peer.id}\n              size=\"small\"\n              peer={peer}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('CommentsCount', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName(\n        'CommentButton',\n        hasUnread && 'has-unread',\n        disabled && 'disabled',\n        isCustomShape && 'CommentButton-custom-shape',\n        isLoading && 'loading',\n      )}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <i\n        className={buildClassName(\n          'CommentButton_icon-comments icon icon-comments-sticker',\n          isLoading && shouldRenderLoading && 'CommentButton_hidden',\n        )}\n        aria-hidden\n      />\n      {!recentRepliers?.length && <i className=\"icon icon-comments\" aria-hidden />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <div className=\"CommentButton_right\">\n        {isLoading && (\n          <Spinner\n            className={buildClassName(\n              'CommentButton_loading',\n              !shouldRenderLoading && 'CommentButton_hidden',\n            )}\n            color={isCustomShape ? 'white' : 'blue'}\n          />\n        ) }\n        <i\n          className={buildClassName(\n            'CommentButton_icon-open icon icon-next',\n            isLoading && shouldRenderLoading && 'CommentButton_hidden',\n          )}\n          aria-hidden\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiPeer, ApiPeerColor } from '../../api/types';\n\nimport buildClassName from '../../util/buildClassName';\nimport { getApiPeerColorClass, getPeerColorClass } from './helpers/peerColor';\n\nimport EmojiIconBackground from './embedded/EmojiIconBackground';\n\nimport styles from './PeerColorWrapper.module.scss';\n\ninterface OwnProps extends React.HTMLAttributes<HTMLDivElement> {\n  peer?: ApiPeer;\n  peerColor?: ApiPeerColor;\n  noUserColors?: boolean;\n  shoudReset?: boolean;\n  className?: string;\n  emojiIconClassName?: string;\n  children: React.ReactNode;\n}\n\nfunction PeerColorWrapper({\n  peer, peerColor, noUserColors, shoudReset, className, emojiIconClassName, children, ...otherProps\n}: OwnProps) {\n  const color = peerColor || peer?.color;\n\n  return (\n    <div\n      className={buildClassName(\n        styles.root,\n        peer && getPeerColorClass(peer, noUserColors, shoudReset),\n        peerColor && getApiPeerColorClass(peerColor),\n        className,\n      )}\n      // eslint-disable-next-line react/jsx-props-no-spreading\n      {...otherProps}\n    >\n      {color?.backgroundEmojiId && (\n        <EmojiIconBackground\n          className={emojiIconClassName}\n          emojiDocumentId={color.backgroundEmojiId}\n        />\n      )}\n      {children}\n    </div>\n  );\n}\n\nexport default memo(PeerColorWrapper);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"nRjVJOQv\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"AAHWWWvU\",\"info-container\":\"tpDpg82n\",\"infoContainer\":\"tpDpg82n\",\"info\":\"fpYynE5s\",\"name\":\"_PNTJc_V\",\"phone\":\"JP_3wes8\",\"divider\":\"_OSJcuqH\",\"buttons\":\"Blui4M4G\",\"button\":\"ReDHhQHm\",\"disabled\":\"XAeKpuIZ\",\"emoji-icon-background\":\"SjZYi3sJ\",\"emojiIconBackground\":\"SjZYi3sJ\"};","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiContact, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { getCanAddContact, getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Avatar from '../../common/Avatar';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\n\nimport styles from './Contact.module.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n  noUserColors?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, noUserColors,\n}) => {\n  const lang = useOldLang();\n  const {\n    openChat, openAddContactDialog, showNotification, openChatWithInfo,\n  } = getActions();\n\n  const { phoneNumber, userId } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n  const canAddContact = isRegistered && user && getCanAddContact(user);\n\n  const handleOpenChat = useLastCallback(() => {\n    openChat({ id: userId });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: user?.id });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (user) {\n      openChatWithInfo({ id: userId });\n    } else {\n      copyTextToClipboard(phoneNumber);\n      showNotification({ message: lang('PhoneCopied') });\n    }\n  });\n\n  return (\n    <PeerColorWrapper\n      noUserColors={noUserColors}\n      peer={user}\n      emojiIconClassName={styles.emojiIconBackground}\n      className={styles.root}\n    >\n      <div className={styles.infoContainer} onClick={handleClick}>\n        <Avatar size=\"large\" peer={user} text={getContactName(contact)} />\n        <div className={styles.info}>\n          <div className={styles.name}>\n            {user ? getUserFullName(user) : getContactName(contact)}\n          </div>\n          <div className={styles.phone}>\n            {formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}\n          </div>\n        </div>\n      </div>\n      {isRegistered && (\n        <>\n          <div className={styles.divider} />\n          <div className={styles.buttons}>\n            <Button\n              isText\n              color=\"translucent\"\n              ripple\n              onClick={handleOpenChat}\n              className={styles.button}\n            >\n              {lang('SharedContactMessage')}\n            </Button>\n            {canAddContact && (\n              <Button\n                isText\n                color=\"translucent\"\n                ripple\n                onClick={handleAddContact}\n                className={styles.button}\n              >\n                {lang('SharedContactAdd')}\n              </Button>\n            )}\n          </div>\n        </>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nfunction getContactName(contact: ApiContact) {\n  if (contact.firstName && contact.lastName) {\n    return `${contact.firstName} ${contact.lastName}`;\n  }\n\n  if (contact.firstName) {\n    return contact.firstName;\n  }\n\n  if (contact.lastName) {\n    return contact.lastName;\n  }\n\n  return '';\n}\n\nexport default withGlobal<OwnProps>((global, { contact }): StateProps => {\n  const {\n    countryList: { phoneCodes: phoneCodeList },\n  } = global;\n  const user = selectUser(global, contact.userId);\n\n  return {\n    user,\n    phoneCodeList,\n  };\n})(Contact);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HMB5LgeX\",\"title\":\"vZnCPl3t\",\"content\":\"k_dGolcu\",\"separator\":\"qRaSs5iA\",\"footnote\":\"EDmr0wJG\",\"collapsed\":\"hYzpXwTM\",\"cutoutWrapper\":\"nfCzKu78\",\"collapseIcon\":\"mxPizZpR\",\"clickable\":\"Cj2cLczd\"};","import React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiFactCheck } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useCollapsibleLines from '../../../hooks/element/useCollapsibleLines';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Separator from '../../ui/Separator';\n\nimport styles from './FactCheck.module.scss';\n\ntype OwnProps = {\n  factCheck: ApiFactCheck;\n  isToggleDisabled?: boolean;\n};\n\nconst COLOR = {\n  color: 0,\n};\nconst MAX_LINES = 4;\n\nconst FactCheck = ({ factCheck, isToggleDisabled }: OwnProps) => {\n  const lang = useOldLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const cutoutRef = useRef<HTMLDivElement>(null);\n  const {\n    isCollapsed, isCollapsible, setIsCollapsed,\n  } = useCollapsibleLines(ref, MAX_LINES, cutoutRef);\n\n  const countryLocalized = useMemo(() => {\n    if (!factCheck.countryCode || !lang.code) return undefined;\n\n    const displayNames = new Intl.DisplayNames([lang.code], { type: 'region' });\n    return displayNames.of(factCheck.countryCode);\n  }, [factCheck.countryCode, lang.code]);\n\n  const canExpand = !isToggleDisabled && isCollapsed;\n\n  const handleExpand = useLastCallback(() => {\n    setIsCollapsed(false);\n  });\n\n  const handleToggle = useLastCallback(() => {\n    setIsCollapsed((prev) => !prev);\n  });\n\n  if (!factCheck.text) {\n    return undefined;\n  }\n\n  return (\n    <PeerColorWrapper peerColor={COLOR} className={styles.root} onClick={canExpand ? handleExpand : undefined}>\n      <div\n        ref={cutoutRef}\n        className={buildClassName(styles.cutoutWrapper, isCollapsed && styles.collapsed)}\n      >\n        <div className={styles.title}>{lang('FactCheck')}</div>\n        <div ref={ref} className={styles.content}>\n          {renderTextWithEntities({\n            text: factCheck.text.text,\n            entities: factCheck.text.entities,\n          })}\n        </div>\n        <Separator className={styles.separator} />\n        <div className={styles.footnote}>{lang('FactCheckFooter', countryLocalized)}</div>\n      </div>\n      {isCollapsible && (\n        <div\n          className={buildClassName(styles.collapseIcon, !isToggleDisabled && styles.clickable)}\n          onClick={!isToggleDisabled ? handleToggle : undefined}\n          aria-hidden\n        >\n          <Icon name={isCollapsed ? 'down' : 'up'} />\n        </div>\n      )}\n    </PeerColorWrapper>\n  );\n};\n\nexport default memo(FactCheck);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = getGamePreviewPhotoHash(game);\n  const videoHash = getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      chatId: message.chatId,\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n            draggable={false}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"CbpKtOey\",\"title\":\"ogvcv3mr\",\"sticker\":\"hjjKhvVv\",\"resultSticker\":\"JEiR48jJ\",\"count\":\"n_QCMv_A\",\"section\":\"MSFa9BPf\",\"description\":\"HfZ6SuLI\",\"peers\":\"rPyyNYxK\",\"peer\":\"FV70u896\",\"button\":\"jMBw7STU\",\"result\":\"ZQ4aVVkI\",\"separator\":\"ao0x1YnS\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiGiveaway, ApiGiveawayInfo, ApiGiveawayResults, ApiMessage, ApiPeer, ApiSticker,\n} from '../../../api/types';\n\nimport {\n  getChatTitle, getUserFullName, isOwnMessage,\n} from '../../../global/helpers';\nimport { isApiPeerChat } from '../../../global/helpers/peers';\nimport {\n  selectCanPlayAnimatedEmojis,\n  selectChat,\n  selectForwardedSender,\n  selectGiftStickerForDuration,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime, formatDateTimeToString } from '../../../util/dates/dateFormat';\nimport { isoToEmoji } from '../../../util/emoji/emoji';\nimport { getServerTime } from '../../../util/serverTime';\nimport { callApi } from '../../../api/gramjs';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport renderText from '../../common/helpers/renderText';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\nimport AnimatedIconWithPreview from '../../common/AnimatedIconWithPreview';\nimport PickerSelectedItem from '../../common/pickers/PickerSelectedItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Separator from '../../ui/Separator';\n\nimport styles from './Giveaway.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  sender?: ApiPeer;\n  giftSticker?: ApiSticker;\n  canPlayAnimatedEmojis?: boolean;\n};\n\nconst NBSP = '\\u00A0';\nconst GIFT_STICKER_SIZE = 175;\nconst RESULT_STICKER_SIZE = 150;\n\nconst Giveaway = ({\n  chat,\n  sender,\n  message,\n  canPlayAnimatedEmojis,\n  giftSticker,\n}: OwnProps & StateProps) => {\n  const { openChat } = getActions();\n\n  const isLoadingInfo = useRef(false);\n  const [giveawayInfo, setGiveawayInfo] = useState<ApiGiveawayInfo | undefined>();\n\n  const lang = useOldLang();\n  const { giveaway, giveawayResults } = message.content;\n  const isResults = Boolean(giveawayResults);\n  const {\n    months, untilDate, prizeDescription, stars,\n  } = (giveaway || giveawayResults)!;\n\n  const isOwn = isOwnMessage(message);\n\n  const quantity = isResults ? giveawayResults.winnersCount : giveaway!.quantity;\n\n  const hasEnded = getServerTime() > untilDate;\n\n  const countryList = useMemo(() => {\n    if (isResults) return undefined;\n    const translatedNames = new Intl.DisplayNames([lang.code!, 'en'].filter(Boolean), { type: 'region' });\n    return giveaway?.countries?.map((countryCode) => (\n      `${isoToEmoji(countryCode)}${NBSP}${translatedNames.of(countryCode)}`\n    )).join(', ');\n  }, [giveaway, isResults, lang.code]);\n\n  const handlePeerClick = useLastCallback((channelId: string) => {\n    openChat({ id: channelId });\n  });\n\n  const handleShowInfoClick = useLastCallback(async () => {\n    if (isLoadingInfo.current) return;\n\n    isLoadingInfo.current = true;\n    const result = await callApi('fetchGiveawayInfo', {\n      peer: chat,\n      messageId: message.id,\n    });\n    setGiveawayInfo(result);\n    isLoadingInfo.current = false;\n  });\n\n  const handleCloseInfo = useLastCallback(() => {\n    setGiveawayInfo(undefined);\n  });\n\n  const giveawayInfoTitle = useMemo(() => {\n    if (!giveawayInfo) return undefined;\n    return lang(giveawayInfo.type === 'results' ? 'BoostingGiveawayEnd' : 'BoostingGiveAwayAbout');\n  }, [giveawayInfo, lang]);\n\n  function renderGiveawayDescription(media: ApiGiveaway) {\n    const channelIds = media.channelIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayPrizes'), ['simple_markdown'])}\n          </strong>\n          {prizeDescription && (\n            <>\n              <p className={styles.description}>\n                {renderText(\n                  lang('BoostingGiveawayMsgPrizes', [quantity, prizeDescription], undefined, quantity),\n                  ['simple_markdown'],\n                )}\n              </p>\n              <Separator>{lang('BoostingGiveawayMsgWithDivider')}</Separator>\n            </>\n          )}\n          <p className={styles.description}>\n            {message?.content?.giveaway?.stars ? (\n              <>\n                {renderText(\n                  lang('Chat.Giveaway.Message.Stars.PrizeText', lang('Stars', message?.content?.giveaway?.stars)),\n                  ['simple_markdown'],\n                )}\n                <br />\n                {renderText(lang('AmongWinners', quantity), ['simple_markdown'])}\n              </>\n            ) : (\n              <>\n                {renderText(lang('Chat.Giveaway.Info.Subscriptions', quantity), ['simple_markdown'])}\n                <br />\n                {renderText(lang(\n                  'ActionGiftPremiumSubtitle',\n                  lang('Chat.Giveaway.Info.Months', months),\n                ), ['simple_markdown'])}\n              </>\n            )}\n          </p>\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayMsgParticipants'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayMsgAllSubsPlural', channelIds.length), ['simple_markdown'])}\n          </p>\n          <div className={styles.peers}>\n            {channelIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n          {countryList && (\n            <span>{renderText(lang('Chat.Giveaway.Message.CountriesFrom', countryList))}</span>\n          )}\n        </div>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingWinnersDate'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {formatDateTimeToString(untilDate * 1000, lang.code, true)}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayResultsDescription(media: ApiGiveawayResults) {\n    const winnerIds = media.winnerIds;\n    return (\n      <>\n        <div className={styles.section}>\n          <strong className={styles.title}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersSelected'), ['simple_markdown'])}\n          </strong>\n          <p className={styles.description}>\n            {renderText(lang('BoostingGiveawayResultsMsgWinnersTitle', winnerIds.length), ['simple_markdown'])}\n          </p>\n          <strong className={styles.title}>\n            {lang('lng_prizes_results_winners')}\n          </strong>\n          <div className={styles.peers}>\n            {winnerIds.map((peerId) => (\n              <PickerSelectedItem\n                peerId={peerId}\n                forceShowSelf\n                fluid\n                withPeerColors={!isOwn}\n                className={styles.peer}\n                clickArg={peerId}\n                onClick={handlePeerClick}\n              />\n            ))}\n          </div>\n        </div>\n        <div className={styles.section}>\n          <p className={styles.description}>\n            {lang('BoostingGiveawayResultsMsgAllWinnersReceivedLinks')}\n          </p>\n        </div>\n      </>\n    );\n  }\n\n  function renderGiveawayInfo() {\n    if (!sender || !giveawayInfo) return undefined;\n    const isResultsInfo = giveawayInfo.type === 'results';\n\n    const chatTitle = isApiPeerChat(sender) ? getChatTitle(lang, sender) : getUserFullName(sender);\n    const endDate = formatDateAtTime(lang, untilDate * 1000);\n    const otherChannelsCount = giveaway?.channelIds ? giveaway.channelIds.length - 1 : 0;\n    const otherChannelsString = lang('Chat.Giveaway.Info.OtherChannels', otherChannelsCount);\n    const isSeveral = otherChannelsCount > 0;\n\n    const firstKey = isResultsInfo ? 'BoostingGiveawayHowItWorksTextEnd' : 'BoostingGiveawayHowItWorksText';\n    const giveawayDuration = isResultsInfo ? lang('Chat.Giveaway.Info.Months', months) : lang('Stars', stars, 'i');\n    const firstParagraph = lang(firstKey, [chatTitle, quantity, giveawayDuration], undefined, quantity);\n\n    const additionalPrizes = prizeDescription\n      ? lang('BoostingGiveawayHowItWorksIncludeText', [chatTitle, quantity, prizeDescription], undefined, quantity)\n      : undefined;\n\n    let secondKey = '';\n    if (isResultsInfo) {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveralEnd' : 'BoostingGiveawayHowItWorksSubTextEnd';\n    } else {\n      secondKey = isSeveral ? 'BoostingGiveawayHowItWorksSubTextSeveral' : 'BoostingGiveawayHowItWorksSubText';\n    }\n    let secondParagraph = lang(secondKey, [endDate, quantity, chatTitle, otherChannelsCount], undefined, quantity);\n    if (isResultsInfo && giveawayInfo.activatedCount) {\n      secondParagraph += ` ${lang('BoostingGiveawayUsedLinksPlural', giveawayInfo.activatedCount)}`;\n    }\n\n    let result = '';\n\n    if (isResultsInfo) {\n      if (giveawayInfo.isRefunded) {\n        result = lang('BoostingGiveawayCanceledByPayment');\n      } else {\n        result = lang(giveawayInfo.isWinner ? 'BoostingGiveawayYouWon' : 'BoostingGiveawayYouNotWon');\n      }\n    }\n\n    let lastParagraph = '';\n    if (isResultsInfo) {\n      // Nothing\n    } else if (giveawayInfo.disallowedCountry) {\n      lastParagraph = lang('BoostingGiveawayNotEligibleCountry');\n    } else if (giveawayInfo.adminDisallowedChatId) {\n      // Since rerenders are not expected, we can use the global state directly\n      const chatsById = getGlobal().chats.byId;\n      const disallowedChat = chatsById[giveawayInfo.adminDisallowedChatId];\n      const disallowedChatTitle = disallowedChat && getChatTitle(lang, disallowedChat);\n      lastParagraph = lang('BoostingGiveawayNotEligibleAdmin', disallowedChatTitle);\n    } else if (giveawayInfo.joinedTooEarlyDate) {\n      const joinedTooEarlyDate = formatDateAtTime(lang, giveawayInfo.joinedTooEarlyDate * 1000);\n      lastParagraph = lang('BoostingGiveawayNotEligible', joinedTooEarlyDate);\n    } else if (giveawayInfo.isParticipating) {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.ParticipatingMany', [chatTitle, otherChannelsCount])\n        : lang('Chat.Giveaway.Info.Participating', chatTitle);\n    } else {\n      lastParagraph = isSeveral\n        ? lang('Chat.Giveaway.Info.NotQualifiedMany', [chatTitle, otherChannelsString, endDate])\n        : lang('Chat.Giveaway.Info.NotQualified', [chatTitle, endDate]);\n    }\n\n    return (\n      <>\n        {result && (\n          <p className={styles.result}>\n            {renderText(result, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(firstParagraph, ['simple_markdown'])}\n        </p>\n        {additionalPrizes && (\n          <p>\n            {renderText(additionalPrizes, ['simple_markdown'])}\n          </p>\n        )}\n        <p>\n          {renderText(secondParagraph, ['simple_markdown'])}\n        </p>\n        {lastParagraph && (\n          <p>\n            {renderText(lastParagraph, ['simple_markdown'])}\n          </p>\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className={styles.root}>\n      <div className={buildClassName(styles.sticker, isResults && styles.resultSticker)}>\n        {isResults ? (\n          <AnimatedIconWithPreview\n            size={RESULT_STICKER_SIZE}\n            tgsUrl={LOCAL_TGS_URLS.PartyPopper}\n            nonInteractive\n            noLoop\n          />\n        ) : (\n          <AnimatedIconFromSticker\n            sticker={giftSticker}\n            play={canPlayAnimatedEmojis && hasEnded}\n            noLoop\n            nonInteractive\n            size={GIFT_STICKER_SIZE}\n          />\n        )}\n        <span className={styles.count}>\n          {`x${quantity}`}\n        </span>\n      </div>\n      {isResults ? renderGiveawayResultsDescription(giveawayResults) : renderGiveawayDescription(giveaway!)}\n      <Button\n        className={styles.button}\n        color=\"adaptive\"\n        size=\"smaller\"\n        onClick={handleShowInfoClick}\n      >\n        {lang('BoostingHowItWork')}\n      </Button>\n      <ConfirmDialog\n        isOpen={Boolean(giveawayInfo)}\n        isOnlyConfirm\n        title={giveawayInfoTitle}\n        confirmHandler={handleCloseInfo}\n        onClose={handleCloseInfo}\n      >\n        {renderGiveawayInfo()}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { giveaway } = message.content;\n    const chat = selectChat(global, message.chatId)!;\n    const sender = selectChat(global, giveaway?.channelIds[0]!)\n      || selectForwardedSender(global, message) || chat;\n\n    const sticker = giveaway && selectGiftStickerForDuration(global, giveaway.months);\n\n    return {\n      chat,\n      sender,\n      giftSticker: sticker,\n      canPlayAnimatedEmojis: selectCanPlayAnimatedEmojis(global),\n    };\n  },\n)(Giveaway));\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\nimport type { ActionPayloads } from '../../../global/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderKeyboardButtonText from '../composer/helpers/renderKeyboardButtonText';\n\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: (payload: ActionPayloads['clickBotInlineButton']) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useOldLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <Icon className=\"corner-icon\" name=\"arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <Icon className=\"corner-icon\" name=\"card\" />;\n      case 'switchBotInline':\n        return <Icon className=\"corner-icon\" name=\"share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <Icon className=\"corner-icon\" name=\"webapp\" />;\n      case 'copy':\n        return <Icon className=\"corner-icon\" name=\"copy\" />;\n    }\n    return undefined;\n  };\n\n  const buttonTexts = useMemo(() => {\n    const texts: TeactNode[][] = [];\n    message.inlineButtons!.forEach((row) => {\n      texts.push(row.map((button) => renderKeyboardButtonText(lang, button)));\n    });\n    return texts;\n  }, [lang, message.inlineButtons]);\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row, i) => (\n        <div className=\"row\">\n          {row.map((button, j) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ chatId: message.chatId, messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">\n                {buttonTexts[i][j]}\n              </span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(InlineButtons);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport buildStyle from '../../../util/buildStyle';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n  forcedWidth?: number;\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n  forcedWidth,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    description,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n  const withBlurredBackground = Boolean(forcedWidth);\n  const blurredBackgroundRef = useBlurredMediaThumbRef(photoUrl, !withBlurredBackground);\n  const messageId = message.id;\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, messageId, isSelected, theme).then((appendixBg) => {\n        requestMutation(() => {\n          contentEl.style.setProperty('--appendix-bg', appendixBg);\n          contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n        });\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme, messageId]);\n\n  const width = forcedWidth || photo?.dimensions?.width;\n\n  const style = buildStyle(\n    photo?.dimensions && `width: ${width}px`,\n    photo?.dimensions && `aspect-ratio: ${photo.dimensions.width} / ${photo.dimensions.height}`,\n    Boolean(!photo?.dimensions && forcedWidth) && `width: ${forcedWidth}px`,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {description && (\n        <div>{renderText(description, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {Boolean(photo) && (\n          <div className=\"invoice-image-container\">\n            {withBlurredBackground && <canvas ref={blurredBackgroundRef} className=\"thumbnail blurred-bg\" />}\n            {photoUrl && (\n              <img\n                className=\"invoice-image\"\n                src={photoUrl}\n                alt=\"\"\n                style={style}\n                crossOrigin=\"anonymous\"\n                draggable={false}\n              />\n            )}\n            {!photoUrl && photo && (\n              <Skeleton\n                width={width}\n                height={photo.dimensions?.height}\n                forceAspectRatio\n              />\n            )}\n          </div>\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code, { iconClassName: 'invoice-currency-icon' })}\n          {isTest && <span className=\"test-invoice\">{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"dCK8GQ_8\",\"duration\":\"CWT8ZMwV\",\"buy\":\"C38zhCDM\",\"spoiler\":\"CG55VZP1\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { formatCurrencyAsString } from '../../../util/formatCurrency';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isConnected: boolean;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  isConnected,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useOldLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useLastCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  });\n\n  useInterval(refreshExtendedMedia, isConnected ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useLastCallback(() => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon', 'icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrencyAsString(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, ApiPeer } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { requestMutation } from '../../../lib/fasterdom/fasterdom';\nimport {\n  buildStaticMapHash,\n  getMessageLocation,\n  isGeoLiveExpired,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dates/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useInterval from '../../../hooks/schedulers/useInterval';\nimport useTimeout from '../../../hooks/schedulers/useTimeout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useDevicePixelRatio from '../../../hooks/window/useDevicePixelRatio';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/placeholder/Skeleton';\n\nimport './Location.scss';\n\nimport mapPin from '../../../assets/map-pin.svg';\n\nconst TIMER_RADIUS = 12;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiPeer;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n}) => {\n  const { openMapModal } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { mediaType, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message);\n  const secondsBeforeEnd = (mediaType === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = mediaType === 'venue' || (mediaType === 'geoLive' && !isExpired);\n  const { width, height, zoom } = DEFAULT_MAP_CONFIG;\n  const dpr = useDevicePixelRatio();\n\n  const mediaHash = buildStaticMapHash(point, width, height, zoom, dpr);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePreviousDeprecated(mediaBlobUrl, true);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (mediaType !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [mediaType, point, zoom]);\n\n  const handleClick = () => {\n    openMapModal({ geoPoint: point, zoom });\n  };\n\n  const updateCountdown = useLastCallback((countdownEl: HTMLDivElement) => {\n    if (mediaType !== 'geoLive') return;\n    const svgEl = countdownEl.lastElementChild!;\n    const timerEl = countdownEl.firstElementChild!;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * TIMER_CIRCUMFERENCE;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n    timerEl.textContent = text;\n    svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  });\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    requestMutation(() => {\n      const countdownEl = countdownRef.current;\n      if (countdownEl) {\n        updateCountdown(countdownEl);\n      }\n    });\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (mediaType === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (mediaType === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && (\n            <div className=\"geo-countdown\" ref={countdownRef}>\n              <span className=\"geo-countdown-text\" />\n              <svg width=\"32px\" height=\"32px\">\n                <circle\n                  cx=\"16\"\n                  cy=\"16\"\n                  r={TIMER_RADIUS}\n                  className=\"geo-countdown-progress\"\n                  transform=\"rotate(-90, 16, 16)\"\n                  stroke-dasharray={TIMER_CIRCUMFERENCE}\n                  stroke-dashoffset=\"0\"\n                />\n              </svg>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        draggable={false}\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      mediaType,\n      isExpired && 'expired',\n    );\n    if (mediaType === 'geoLive') {\n      return (\n        <div className={pinClassName}>\n          <PinSvg />\n          <Avatar peer={peer} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (mediaType === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      if (iconSrc) {\n        return (\n          <div className={pinClassName} style={`--pin-color: ${color}`}>\n            <PinSvg />\n            <img src={iconSrc} draggable={false} className=\"venue-icon\" alt=\"\" />\n          </div>\n        );\n      }\n    }\n\n    return (\n      <img className={pinClassName} draggable={false} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nfunction PinSvg() {\n  return (\n    <svg className=\"round-pin\" style=\"enable-background:new 0 0 64 64\" viewBox=\"0 0 64 64\">\n      <circle cx=\"32\" cy=\"32\" r=\"24.5\" />\n      <path d=\"M32 8c13.23 0 24 10.77 24 24S45.23 56 32 56 8 45.23 8 32 18.77 8 32 8m0-1C18.19 7 7 18.19 7 32s11.19 25 25 25 25-11.19 25-25S45.81 7 32 7z\" />\n      <path d=\"m29.38 57.67-1.98-1.59 3.02-1.66L32 51.54l1.58 2.88 3.02 1.66-1.91 1.53L32 60.73z\" />\n      <path d=\"m32 52.58 1.07 1.95.14.26.26.14 2.24 1.22-1.33 1.06-.07.06-.06.07L32 59.96l-2.24-2.61-.06-.07-.07-.06-1.33-1.06 2.24-1.22.26-.14.14-.26L32 52.58m0-2.08-1.94 3.56L26.5 56l2.5 2 3 3.5 3-3.5 2.5-2-3.56-1.94L32 50.5z\" />\n    </svg>\n  );\n}\n\nexport default memo(Location);\n","import React from '../../../lib/teact/teact';\n\ninterface OwnProps {\n  isOwn?: boolean;\n}\n\nfunction MessageAppendix({ isOwn } : OwnProps) {\n  const path = isOwn\n    ? 'M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z'\n    : 'M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z';\n  return (\n    <svg width=\"9\" height=\"20\" className=\"svg-appendix\">\n      <defs>\n        <filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"messageAppendix\">\n          <feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\" />\n          <feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\" />\n          <feColorMatrix\n            values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\"\n            in=\"shadowBlurOuter1\"\n          />\n        </filter>\n      </defs>\n      <g fill=\"none\" fill-rule=\"evenodd\">\n        <path d={path} fill=\"#000\" filter=\"url(#messageAppendix)\" />\n        <path d={path} fill={isOwn ? '#EEFFDE' : 'FFF'} className=\"corner\" />\n      </g>\n    </svg>\n  );\n}\n\nexport default MessageAppendix;\n","import type { FC, TeactNode } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString, formatPastTimeShort, formatTime } from '../../../util/dates/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedCounter from '../../common/AnimatedCounter';\nimport Icon from '../../common/icons/Icon';\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  isPinned?: boolean;\n  withFullDate?: boolean;\n  effectEmoji?: string;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onEffectClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  renderQuickReactionButton?: () => TeactNode | undefined;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  renderQuickReactionButton,\n  noReplies,\n  isTranslated,\n  isPinned,\n  withFullDate,\n  effectEmoji,\n  onClick,\n  onTranslationClick,\n  onEffectClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useOldLang();\n  const [isActivated, markActivated] = useFlag();\n\n  function handleImportedClick(e: React.MouseEvent) {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  }\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code, undefined, lang.timeFormat);\n    const editDateTime = message.isEdited\n      && formatDateTimeToString(message.editDate! * 1000, lang.code, undefined, lang.timeFormat);\n    const forwardedDateTime = message.forwardInfo\n      && formatDateTimeToString(\n        (message.forwardInfo.savedDate || message.forwardInfo.date) * 1000,\n        lang.code,\n        undefined,\n        lang.timeFormat,\n      );\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n    // We need to listen to timeformat change\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isActivated, lang, message, lang.timeFormat]);\n\n  const date = useMemo(() => {\n    const time = formatTime(lang, message.date * 1000);\n    if (!withFullDate) {\n      return time;\n    }\n\n    return formatPastTimeShort(lang, (message.forwardInfo?.date || message.date) * 1000, true);\n  }, [lang, message.date, message.forwardInfo?.date, withFullDate]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {effectEmoji && (\n        <span className=\"message-effect-icon\" onClick={onEffectClick}>\n          {renderText(effectEmoji)}\n        </span>\n      )}\n      {isTranslated && (\n        <Icon name=\"language\" className=\"message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.viewsCount) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.viewsCount!)}\n          </span>\n          <Icon name=\"channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread} className=\"message-replies-wrapper\">\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <Icon name=\"reply-filled\" />\n        </span>\n      )}\n      {isPinned && (\n        <Icon name=\"pinned-message\" className=\"message-pinned\" />\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleImportedClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleImportedClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {date}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n      {renderQuickReactionButton && renderQuickReactionButton()}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTime, formatTimeDuration } from '../../../util/dates/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/windowEnvironment';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useOldLang();\n  const {\n    isOutgoing, isVideo, reason, duration,\n  } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' || duration === undefined;\n\n  const handleCall = useLastCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  });\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const formattedDuration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={buildClassName('icon', isVideo ? 'icon-video-outlined' : 'icon-phone')} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon',\n              'icon-arrow-right',\n              styles.arrow,\n              isMissed && styles.missed,\n              isCancelled && styles.canceled,\n              !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {formattedDuration ? lang('CallMessageWithDuration', [timeFormatted, formattedDuration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wqsZyy8u\",\"button\":\"NGmo4ADz\",\"info\":\"iFn6m6hd\",\"reason\":\"l8QfocIQ\",\"arrow\":\"ONmpzmUS\",\"incoming\":\"BfgDXljM\",\"missed\":\"Alra_BWu\",\"canceled\":\"J7xsuCAm\",\"meta\":\"rF5tkx92\",\"duration\":\"kKPKwFzu\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"mVaSjZRJ\",\"buyButton\":\"GnKGu6D9\",\"boughtStatus\":\"IGXW5hWr\",\"star\":\"ywiOugiH\",\"buttonText\":\"gLaaVQXr\"};","import React, { memo, type TeactNode, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiPaidMedia } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE, STARS_ICON_PLACEHOLDER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { replaceWithTeact } from '../../../util/replaceWithTeact';\nimport stopEvent from '../../../util/stopEvent';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport StarIcon from '../../common/icons/StarIcon';\nimport Button from '../../ui/Button';\n\nimport styles from './PaidMediaOverlay.module.scss';\n\ntype OwnProps = {\n  paidMedia: ApiPaidMedia;\n  chatId: string;\n  messageId: number;\n  isOutgoing?: boolean;\n  children?: TeactNode;\n};\n\nconst PaidMediaOverlay = ({\n  paidMedia,\n  chatId,\n  messageId,\n  isOutgoing,\n  children,\n}: OwnProps) => {\n  const { openInvoice } = getActions();\n  const lang = useOldLang();\n\n  const isClickable = !paidMedia.isBought;\n\n  const buttonText = useMemo(() => {\n    const value = lang('UnlockPaidContent', paidMedia.starsAmount);\n\n    return replaceWithTeact(\n      value, STARS_ICON_PLACEHOLDER, <StarIcon className={styles.star} type=\"gold\" size=\"adaptive\" />,\n    );\n  }, [lang, paidMedia]);\n\n  const handleClick = useLastCallback((e: React.MouseEvent) => {\n    openInvoice({\n      type: 'message',\n      chatId,\n      messageId,\n    });\n    stopEvent(e);\n  });\n\n  return (\n    <div\n      className={styles.root}\n      onClick={isClickable ? handleClick : undefined}\n    >\n      {children}\n      {isClickable && (\n        <Button\n          className={styles.buyButton}\n          color=\"dark\"\n          size=\"tiny\"\n          fluid\n          pill\n        >\n          <span className={styles.buttonText}>{buttonText}</span>\n        </Button>\n      )}\n      {paidMedia.isBought && (\n        <div className={buildClassName('message-paid-media-status', styles.boughtStatus)}>\n          {isOutgoing ? formatCurrency(paidMedia.starsAmount, STARS_CURRENCY_CODE) : lang('Chat.PaidMedia.Purchased')}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(PaidMediaOverlay);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect,\n  useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport Icon from '../../common/icons/Icon';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <Icon name={correctAnswer ? 'check' : 'close'} className=\"poll-option-icon\" />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderTextWithEntities({\n            text: answer.text.text,\n            entities: answer.text.entities,\n          })}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          {shouldAnimate && (\n            <svg\n              className=\"poll-line\"\n              style={!isAnimationDoesNotStart ? 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44' : ''}\n            >\n              <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\" />\n            </svg>\n          )}\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiPoll, ApiPollAnswer,\n} from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { LangFn } from '../../../hooks/useOldLang';\n\nimport { selectPeer } from '../../../global/selectors';\nimport { formatMediaDuration } from '../../../util/dates/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AvatarList from '../../common/AvatarList';\nimport Button from '../../ui/Button';\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport Notification from '../../ui/Notification';\nimport RadioGroup from '../../ui/RadioGroup';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onSendVote: (options: string[]) => void;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst TIMER_RADIUS = 6;\nconst TIMER_CIRCUMFERENCE = TIMER_RADIUS * 2 * Math.PI;\nconst TIMER_UPDATE_INTERVAL = 1000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps> = ({\n  message,\n  poll,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - getServerTime(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const timerCircleRef = useRef<SVGCircleElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const recentVoterIds = results.recentVoterIds;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = useMemo(() => {\n    return voteResults?.filter((r) => r.isCorrect).map((r) => r.option) || [];\n  }, [voteResults]);\n  const answers = useMemo(() => summary.answers.map((a) => ({\n    label: renderTextWithEntities({\n      text: a.text.text,\n      entities: a.text.entities,\n      observeIntersectionForLoading,\n      observeIntersectionForPlaying,\n    }),\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  })), [\n    closePeriod, observeIntersectionForLoading, observeIntersectionForPlaying,\n    summary.answers, summary.closePeriod, summary.quiz,\n  ]);\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti({});\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useLayoutEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), TIMER_UPDATE_INTERVAL);\n    }\n    if (!timerCircleRef.current) return;\n\n    if (closePeriod <= 5) {\n      countdownRef.current!.classList.add('hurry-up');\n    }\n\n    const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * TIMER_CIRCUMFERENCE;\n    timerCircleRef.current.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    // No need for expensive global updates on chats or users, so we avoid them\n    const global = getGlobal();\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiPeer[], id) => {\n      const peer = selectPeer(global, id);\n      if (peer) {\n        result.push(peer);\n      }\n\n      return result;\n    }, []) : [];\n  }, [recentVoterIds]);\n\n  const handleRadioChange = useLastCallback((option: string) => {\n    setChosenOptions([option]);\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote([option]);\n  });\n\n  const handleCheckboxChange = useLastCallback((options: string[]) => {\n    setChosenOptions(options);\n  });\n\n  const handleVoteClick = useLastCallback(() => {\n    setIsSubmitting(true);\n    setWasSubmitted(true);\n    onSendVote(chosenOptions);\n  });\n\n  const handleViewResultsClick = useLastCallback(() => {\n    openPollResults({ chatId, messageId });\n  });\n\n  const handleSolutionShow = useLastCallback(() => {\n    setIsSolutionShown(true);\n  });\n\n  const handleSolutionHide = useLastCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  });\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useOldLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          <AvatarList\n            size=\"micro\"\n            peers={recentVoters}\n          />\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities({ text: poll.results.solution, entities: poll.results.solutionEntities })}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">\n        {renderTextWithEntities({\n          text: summary.question.text,\n          entities: summary.question.entities,\n          observeIntersectionForLoading,\n          observeIntersectionForPlaying,\n        })}\n      </div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && (\n          <div ref={countdownRef} className=\"poll-countdown\">\n            <span>{formatMediaDuration(closePeriod)}</span>\n            <svg width=\"16px\" height=\"16px\">\n              <circle\n                ref={timerCircleRef}\n                cx=\"8\"\n                cy=\"8\"\n                r={TIMER_RADIUS}\n                className=\"poll-countdown-progress\"\n                transform=\"rotate(-90, 8, 8)\"\n                stroke-dasharray={TIMER_CIRCUMFERENCE}\n                stroke-dashoffset=\"0\"\n              />\n            </svg>\n          </div>\n        )}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                isRound\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(Poll);\n","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiReaction, ApiReactionPaid } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { isSameReaction } from '../../../global/helpers';\nimport { selectPerformanceSettingsValue, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID, IS_IOS } from '../../../util/windowEnvironment';\nimport { LOCAL_TGS_URLS } from '../helpers/animatedAssets';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useShowTransition from '../../../hooks/useShowTransition';\n\nimport AnimatedIcon from '../AnimatedIcon';\nimport StarIcon from '../icons/StarIcon';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  containerId: string;\n  reaction: ApiReactionPaid;\n  className?: string;\n  size?: number;\n  effectSize?: number;\n  localAmount?: number;\n  observeIntersection?: ObserveFn;\n};\n\ntype StateProps = {\n  activeReactions?: ApiReaction[];\n  withEffects?: boolean;\n};\n\nconst ICON_SIZE = 1.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\nconst MAX_EFFECT_COUNT = (IS_IOS || IS_ANDROID) ? 2 : 5;\nconst QUALITY = (IS_IOS || IS_ANDROID) ? 2 : 3;\n\nconst PaidReactionEmoji = ({\n  containerId,\n  reaction,\n  className,\n  size = ICON_SIZE,\n  effectSize = EFFECT_SIZE,\n  activeReactions,\n  localAmount,\n  withEffects,\n  observeIntersection,\n}: OwnProps & StateProps) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const [effectsIds, setEffectsIds] = useState<number[]>([]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlayEffect = Boolean(\n    withEffects && activeReaction,\n  );\n  const canAddMoreEffects = effectsIds.length < MAX_EFFECT_COUNT;\n\n  useEffectWithPrevDeps(([prevLocalAmount]) => {\n    if (!shouldPlayEffect) {\n      setEffectsIds([]);\n      return;\n    }\n\n    if (!localAmount || localAmount <= (prevLocalAmount || 0)) {\n      return;\n    }\n\n    if (canAddMoreEffects) {\n      setEffectsIds((prev) => [...prev, Date.now()]);\n    }\n  }, [localAmount, canAddMoreEffects, shouldPlayEffect]);\n\n  const {\n    shouldRender: shouldRenderEffect,\n  } = useShowTransition({\n    ref: effectRef,\n    noMountTransition: true,\n    isOpen: shouldPlayEffect,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  const handleEnded = useLastCallback(() => {\n    const newEffectsIds = effectsIds.slice(1);\n    setEffectsIds(newEffectsIds);\n    if (!newEffectsIds.length) {\n      stopActiveReaction({ containerId, reaction });\n    }\n  });\n\n  const rootClassName = buildClassName(\n    styles.root,\n    shouldRenderEffect && styles.animating,\n    className,\n  );\n\n  return (\n    <div className={rootClassName} ref={ref} teactFastList>\n      <StarIcon key=\"icon\" type=\"gold\" size=\"adaptive\" style={`width: ${size}px; height: ${size}px`} />\n      {shouldRenderEffect && effectsIds.map((id) => (\n        <AnimatedIcon\n          key={id}\n          ref={effectRef}\n          className={styles.effect}\n          size={effectSize}\n          tgsUrl={LOCAL_TGS_URLS.StarReactionEffect}\n          play={isIntersecting}\n          noLoop\n          forceAlways\n          nonInteractive\n          quality={QUALITY}\n          onEnded={handleEnded}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { containerId }) => {\n    const { activeReactions } = selectTabState(global);\n\n    const withEffects = selectPerformanceSettingsValue(global, 'reactionEffects');\n\n    return {\n      activeReactions: activeReactions?.[containerId],\n      withEffects,\n    };\n  },\n)(PaidReactionEmoji));\n","import React, { memo, useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiPeer, ApiReaction, ApiReactionCount,\n} from '../../../../api/types';\nimport type { GlobalState } from '../../../../global/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport { isReactionChosen } from '../../../../global/helpers';\nimport buildClassName from '../../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../../util/textFormat';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nimport useSelector from '../../../../hooks/data/useSelector';\nimport useContextMenuHandlers from '../../../../hooks/useContextMenuHandlers';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport usePrevious from '../../../../hooks/usePrevious';\nimport useShowTransition from '../../../../hooks/useShowTransition';\n\nimport AnimatedCounter from '../../../common/AnimatedCounter';\nimport AvatarList from '../../../common/AvatarList';\nimport PaidReactionEmoji from '../../../common/reactions/PaidReactionEmoji';\nimport ReactionAnimatedEmoji from '../../../common/reactions/ReactionAnimatedEmoji';\nimport Sparkles from '../../../common/Sparkles';\nimport Button from '../../../ui/Button';\n\nimport styles from './ReactionButton.module.scss';\n\nconst REACTION_SIZE = 1.25 * REM;\nconst MAX_SCALE = 3;\n\ntype OwnProps = {\n  chatId: string;\n  messageId: number;\n  reaction: ApiReactionCount;\n  containerId: string;\n  isOwnMessage?: boolean;\n  recentReactors?: ApiPeer[];\n  className?: string;\n  chosenClassName?: string;\n  availableStars?: number;\n  observeIntersection?: ObserveFn;\n  onClick?: (reaction: ApiReaction) => void;\n  onPaidClick?: (count: number) => void;\n};\n\nfunction selectAreStarsLoaded(global: GlobalState) {\n  return Boolean(global.stars);\n}\n\nconst ReactionButton = ({\n  reaction,\n  containerId,\n  isOwnMessage,\n  recentReactors,\n  className,\n  chosenClassName,\n  availableStars,\n  chatId,\n  messageId,\n  observeIntersection,\n  onClick,\n  onPaidClick,\n}: OwnProps) => {\n  const {\n    openStarsBalanceModal,\n    resetLocalPaidReactions,\n    openPaidReactionModal,\n    requestWave,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLButtonElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const counterRef = useRef<HTMLSpanElement>(null);\n  const animationRef = useRef<Animation>();\n\n  const isPaid = reaction.reaction.type === 'paid';\n\n  const areStarsLoaded = useSelector(selectAreStarsLoaded);\n\n  const handlePaidClick = useLastCallback((count = 1) => {\n    onPaidClick?.(count);\n  });\n\n  const handleClick = useLastCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (reaction.reaction.type === 'paid') {\n      e.stopPropagation(); // Prevent default message double click behavior\n      handlePaidClick();\n\n      return;\n    }\n\n    onClick?.(reaction.reaction);\n  });\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, reaction.reaction.type !== 'paid', undefined, undefined, undefined, true);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      openPaidReactionModal({\n        chatId,\n        messageId,\n      });\n\n      handleContextMenuClose();\n      handleContextMenuHide();\n    }\n  }, [handleContextMenuClose, handleContextMenuHide, isContextMenuOpen, chatId, messageId]);\n\n  useEffectWithPrevDeps(([prevReaction]) => {\n    const amount = reaction.localAmount;\n    const button = ref.current;\n    if (!amount || !button || amount === prevReaction?.localAmount) return;\n\n    if (areStarsLoaded && (!availableStars || amount > availableStars)) {\n      openStarsBalanceModal({\n        originReaction: {\n          chatId,\n          messageId,\n          amount,\n        },\n      });\n      resetLocalPaidReactions({\n        chatId,\n        messageId,\n      });\n      return;\n    }\n\n    if (reaction.localAmount) {\n      const { left, top } = button.getBoundingClientRect();\n      const startX = left + button.offsetWidth / 2;\n      const startY = top + button.offsetHeight / 2;\n      requestWave({ startX, startY });\n    }\n\n    const currentScale = Number(getComputedStyle(button).scale) || 1;\n    animationRef.current?.cancel();\n    // Animate scaling by 20%, and then returning to 1\n    animationRef.current = button.animate([\n      { scale: currentScale },\n      { scale: Math.min(currentScale * 1.2, MAX_SCALE), offset: 0.2 },\n      { scale: 1 },\n    ], {\n      duration: 500 * currentScale,\n      easing: 'ease-out',\n    });\n  }, [reaction, availableStars, areStarsLoaded, chatId, messageId]);\n\n  const prevAmount = usePrevious(reaction.localAmount);\n\n  const {\n    shouldRender: shouldRenderPaidCounter,\n  } = useShowTransition({\n    isOpen: Boolean(reaction.localAmount),\n    ref: counterRef,\n    className: 'slow',\n    withShouldRender: true,\n  });\n\n  return (\n    <Button\n      className={buildClassName(\n        styles.root,\n        isOwnMessage && styles.own,\n        isPaid && styles.paid,\n        isReactionChosen(reaction) && styles.chosen,\n        isReactionChosen(reaction) && chosenClassName,\n        className,\n      )}\n      size=\"tiny\"\n      ref={ref}\n      onMouseDown={handleBeforeContextMenu}\n      onContextMenu={handleContextMenu}\n      onClick={handleClick}\n    >\n      {reaction.reaction.type === 'paid' ? (\n        <>\n          <Sparkles preset=\"button\" />\n          <PaidReactionEmoji\n            className={styles.animatedEmoji}\n            containerId={containerId}\n            reaction={reaction.reaction}\n            size={REACTION_SIZE}\n            localAmount={reaction.localAmount}\n            observeIntersection={observeIntersection}\n          />\n          {shouldRenderPaidCounter && (\n            <AnimatedCounter\n              ref={counterRef}\n              text={`+${formatIntegerCompact(reaction.localAmount || prevAmount!)}`}\n              className={styles.paidCounter}\n            />\n          )}\n        </>\n      ) : (\n        <ReactionAnimatedEmoji\n          className={styles.animatedEmoji}\n          containerId={containerId}\n          reaction={reaction.reaction}\n          size={REACTION_SIZE}\n          observeIntersection={observeIntersection}\n        />\n      )}\n      {recentReactors?.length ? (\n        <AvatarList size=\"mini\" peers={recentReactors} />\n      ) : (\n        <AnimatedCounter\n          text={formatIntegerCompact(reaction.count + (reaction.localAmount || 0))}\n          className={styles.counter}\n        />\n      )}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useEffect, useMemo } from '../../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../../global';\n\nimport type {\n  ApiMessage,\n  ApiPeer,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n} from '../../../../api/types';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\nimport type { ThreadId } from '../../../../types';\n\nimport { getReactionKey, isReactionChosen } from '../../../../global/helpers';\nimport { selectPeer } from '../../../../global/selectors';\nimport buildClassName from '../../../../util/buildClassName';\nimport { getMessageKey } from '../../../../util/keys/messageKey';\n\nimport useEffectOnce from '../../../../hooks/useEffectOnce';\nimport useLastCallback from '../../../../hooks/useLastCallback';\nimport useOldLang from '../../../../hooks/useOldLang';\n\nimport ReactionButton from './ReactionButton';\nimport SavedTagButton from './SavedTagButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  threadId?: ThreadId;\n  isOutside?: boolean;\n  maxWidth?: number;\n  metaChildren?: React.ReactNode;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  isCurrentUserPremium?: boolean;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n  availableStars?: number;\n};\n\nconst MAX_RECENT_AVATARS = 3;\nconst PAID_SEND_DELAY = 5000;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  threadId,\n  isOutside,\n  maxWidth,\n  metaChildren,\n  observeIntersection,\n  noRecentReactors,\n  isCurrentUserPremium,\n  tags,\n  availableStars,\n}) => {\n  const {\n    toggleReaction,\n    addLocalPaidReaction,\n    updateMiddleSearch,\n    performMiddleSearch,\n    openPremiumModal,\n    resetLocalPaidReactions,\n    showNotification,\n  } = getActions();\n  const lang = useOldLang();\n\n  const { results, areTags, recentReactions } = message.reactions!;\n\n  const totalCount = useMemo(() => (\n    results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [results]);\n\n  const recentReactorsByReactionKey = useMemo(() => {\n    const global = getGlobal();\n\n    return recentReactions?.reduce((acc, recentReaction) => {\n      const { reaction, peerId } = recentReaction;\n      const key = getReactionKey(reaction);\n      const peer = selectPeer(global, peerId);\n\n      if (!peer) return acc;\n\n      const peers = acc[key] || [];\n      peers.push(peer);\n      acc[key] = peers;\n      return acc;\n    }, {} as Record<ApiReactionKey, ApiPeer[]>);\n  }, [recentReactions]);\n\n  const props = useMemo(() => {\n    const messageKey = getMessageKey(message);\n    return results.map((reaction) => {\n      const reactionKey = getReactionKey(reaction.reaction);\n      const recentReactors = recentReactorsByReactionKey?.[reactionKey];\n      const shouldHideRecentReactors = totalCount > MAX_RECENT_AVATARS || noRecentReactors;\n      const tag = areTags ? tags?.[reactionKey] : undefined;\n\n      return {\n        reaction,\n        reactionKey,\n        messageKey,\n        recentReactors: !shouldHideRecentReactors ? recentReactors : undefined,\n        isChosen: isReactionChosen(reaction),\n        tag,\n      };\n    });\n  }, [message, noRecentReactors, recentReactorsByReactionKey, results, areTags, tags, totalCount]);\n\n  const handleClick = useLastCallback((reaction: ApiReaction) => {\n    if (areTags) {\n      if (!isCurrentUserPremium) {\n        openPremiumModal({\n          initialSection: 'saved_tags',\n        });\n        return;\n      }\n\n      updateMiddleSearch({ chatId: message.chatId, threadId, update: { savedTag: reaction } });\n      performMiddleSearch({ chatId: message.chatId, threadId });\n      return;\n    }\n\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  const paidLocalCount = useMemo(() => results.find((r) => r.reaction.type === 'paid')?.localAmount || 0, [results]);\n\n  const handlePaidClick = useLastCallback((count: number) => {\n    addLocalPaidReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      count,\n    });\n  });\n\n  useEffect(() => {\n    if (!paidLocalCount) return;\n\n    showNotification({\n      localId: getMessageKey(message),\n      title: lang('StarsSentTitle'),\n      message: lang('StarsSentText', paidLocalCount),\n      actionText: lang('StarsSentUndo'),\n      cacheBreaker: paidLocalCount.toString(),\n      action: {\n        action: 'resetLocalPaidReactions',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      dismissAction: {\n        action: 'sendPaidReaction',\n        payload: { chatId: message.chatId, messageId: message.id },\n      },\n      duration: PAID_SEND_DELAY,\n      shouldShowTimer: true,\n      disableClickDismiss: true,\n      icon: 'star',\n    });\n  }, [lang, message, paidLocalCount]);\n\n  const handleRemoveReaction = useLastCallback((reaction: ApiReaction) => {\n    toggleReaction({\n      chatId: message.chatId,\n      messageId: message.id,\n      reaction,\n    });\n  });\n\n  // Reset paid reactions on unmount\n  useEffectOnce(() => () => {\n    resetLocalPaidReactions({\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  });\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n    >\n      {props.map(({\n        reaction, recentReactors, messageKey, reactionKey, isChosen, tag,\n      }) => (\n        areTags ? (\n          <SavedTagButton\n            key={reactionKey}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            isChosen={isChosen}\n            reaction={reaction.reaction as ApiReaction}\n            tag={tag}\n            withContextMenu={isCurrentUserPremium}\n            onClick={handleClick}\n            onRemove={handleRemoveReaction}\n            observeIntersection={observeIntersection}\n          />\n        ) : (\n          <ReactionButton\n            key={reactionKey}\n            chatId={message.chatId}\n            messageId={message.id}\n            className=\"message-reaction\"\n            chosenClassName=\"chosen\"\n            containerId={messageKey}\n            isOwnMessage={message.isOutgoing}\n            recentReactors={recentReactors}\n            reaction={reaction}\n            onClick={handleClick}\n            onPaidClick={handlePaidClick}\n            observeIntersection={observeIntersection}\n            availableStars={availableStars}\n          />\n        )\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"FPceNkgD\",\"inactive\":\"hruUWBuj\",\"mirrored\":\"GydRBA08\",\"effect\":\"WMMaWlOL\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getStickerMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/windowEnvironment';\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\nimport useOverlayPosition from './hooks/useOverlayPosition';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport StickerView from '../../common/StickerView';\nimport Portal from '../../ui/Portal';\n\nimport styles from './Sticker.module.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  shouldPlayEffect?: boolean;\n  withEffect?: boolean;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop,\n  shouldPlayEffect, withEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useOldLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const effectRef = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n  const isMirrored = !message.isOutgoing;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getStickerMediaHash(sticker, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect || !withEffect,\n    ApiMediaFormat.BlobUrl,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useLastCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  });\n\n  useEffect(() => {\n    if (hasEffect && withEffect && canPlay && shouldPlayEffect) {\n      startPlayingEffect();\n    }\n  }, [hasEffect, canPlay, shouldPlayEffect, startPlayingEffect, withEffect]);\n\n  const shouldRenderEffect = hasEffect && withEffect && effectBlobUrl && isPlayingEffect;\n  useOverlayPosition({\n    anchorRef: ref,\n    overlayRef: effectRef,\n    isMirrored,\n    isDisabled: !shouldRenderEffect,\n  });\n\n  const openModal = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  });\n\n  const handleClick = useLastCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect || !withEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else if (withEffect) {\n        startPlayingEffect();\n        return;\n      }\n    }\n    openModal();\n  });\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'media-inner',\n    styles.root,\n    isMemojiSticker && styles.inactive,\n    hasEffect && isMirrored && styles.mirrored,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n      />\n      {shouldRenderEffect && (\n        <Portal>\n          <AnimatedSticker\n            ref={effectRef}\n            key={mediaHashEffect}\n            className={buildClassName(styles.effect, isMirrored && styles.mirrored)}\n            tgsUrl={effectBlobUrl}\n            size={width * EFFECT_SIZE_MULTIPLIER}\n            play\n            isLowPriority\n            noLoop\n            onEnded={handleEffectEnded}\n          />\n        </Portal>\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiTypeStory,\n} from '../../../api/types';\n\nimport { selectPeerStory } from '../../../global/selectors';\n\nimport BaseStory from './BaseStory';\n\ninterface OwnProps {\n  message: ApiMessage;\n  isProtected?: boolean;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  isConnected?: boolean;\n}\n\nfunction Story({\n  message, story, isProtected, isConnected,\n}: OwnProps & StateProps) {\n  const { storyData } = message.content;\n\n  return (\n    <BaseStory\n      story={story || storyData}\n      isProtected={isProtected}\n      isConnected={isConnected}\n    />\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    isConnected: global.connectionState === 'connectionStateReady',\n  };\n})(Story));\n","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiTypeStory, ApiUser,\n} from '../../../api/types';\n\nimport { getSenderTitle, getStoryMediaHash, getUserFirstOrLastName } from '../../../global/helpers';\nimport {\n  selectPeer,\n  selectPeerStories,\n  selectPeerStory,\n  selectUser,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useMedia from '../../../hooks/useMedia';\nimport useOldLang from '../../../hooks/useOldLang';\n\ninterface OwnProps {\n  message: ApiMessage;\n}\n\ninterface StateProps {\n  story?: ApiTypeStory;\n  peer?: ApiPeer;\n  targetUser?: ApiUser;\n  isUnread?: boolean;\n}\n\nfunction StoryMention({\n  message, story, peer, isUnread, targetUser,\n}: OwnProps & StateProps) {\n  const { openStoryViewer } = getActions();\n\n  const lang = useOldLang();\n\n  const { storyData } = message.content;\n\n  const handleClick = useLastCallback(() => {\n    openStoryViewer({\n      peerId: story!.peerId,\n      storyId: story!.id,\n      isSinglePeer: true,\n      isSingleStory: true,\n    });\n  });\n\n  const isDeleted = story && 'isDeleted' in story;\n  const isLoaded = story && 'content' in story;\n  const video = isLoaded ? story.content.video : undefined;\n  const imageHash = isLoaded\n    ? getStoryMediaHash(story, 'pictogram')\n    : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEnsureStory(storyData!.peerId, storyData!.id, story);\n\n  function getTitle() {\n    if (peer && 'isSelf' in peer && peer.isSelf) {\n      return isDeleted\n        ? lang('ExpiredStoryMentioned', getUserFirstOrLastName(targetUser))\n        : lang('StoryYouMentionedTitle', getUserFirstOrLastName(targetUser));\n    }\n\n    return isDeleted\n      ? lang('ExpiredStoryMention')\n      : lang('StoryMentionedTitle', getSenderTitle(lang, peer!));\n  }\n\n  return (\n    <div\n      className={buildClassName('action-message-story-mention', isUnread && 'is-unread', isLoaded && 'with-preview')}\n      tabIndex={0}\n      role=\"button\"\n      onClick={isLoaded ? handleClick : undefined}\n    >\n      {isLoaded && (\n        <span className=\"story-media-wrapper\">\n          {thumbUrl && (\n            <img src={thumbUrl} alt=\"\" className=\"story-media\" />\n          )}\n        </span>\n      )}\n\n      <span className=\"story-title\">{renderText(getTitle(), ['emoji', 'simple_markdown'])}</span>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { message }): StateProps => {\n  const { id, peerId } = message.content.storyData!;\n  const lastReadId = selectPeerStories(global, peerId)?.lastReadId;\n\n  return {\n    story: selectPeerStory(global, peerId, id),\n    peer: selectPeer(global, peerId),\n    targetUser: selectUser(global, message.chatId),\n    isUnread: Boolean(lastReadId && lastReadId < id),\n  };\n})(StoryMention));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation,\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n  useUnmountCleanup,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiAvailableEffect,\n  ApiAvailableReaction,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiPeer,\n  ApiPoll,\n  ApiReaction,\n  ApiReactionKey,\n  ApiSavedReactionTag,\n  ApiThreadInfo,\n  ApiTopic,\n  ApiTypeStory,\n  ApiUser,\n} from '../../../api/types';\nimport type { ActiveEmojiInteraction, ChatTranslatedMessages, MessageListType } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  FocusDirection, IAlbum, ISettings, ScrollTargetPosition, ThreadId,\n} from '../../../types';\nimport type { Signal } from '../../../util/signals';\nimport type { OnIntersectPinnedMessage } from '../hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { AudioOrigin } from '../../../types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport {\n  areReactionsEmpty,\n  getIsDownloading,\n  getMessageContent,\n  getMessageCustomShape,\n  getMessageDownloadableMedia,\n  getMessageHtmlId,\n  getMessageSingleCustomEmoji,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  hasMessageText,\n  hasMessageTtl,\n  isAnonymousForwardsChat,\n  isAnonymousOwnMessage,\n  isChatChannel,\n  isChatGroup,\n  isChatPublic,\n  isGeoLiveExpired,\n  isMessageLocal,\n  isMessageTranslatable,\n  isOwnMessage,\n  isReplyToMessage,\n  isSystemBot,\n  isUserId,\n} from '../../../global/helpers';\nimport { getMessageReplyInfo, getStoryReplyInfo } from '../../../global/helpers/replies';\nimport {\n  selectActiveDownloads,\n  selectAnimatedEmoji,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectCanReplyToMessage,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectChatTranslations,\n  selectCurrentMiddleSearch,\n  selectDefaultReaction,\n  selectForwardedSender,\n  selectIsChatProtected,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsDocumentGroupSelected,\n  selectIsInSelectMode,\n  selectIsMessageFocused,\n  selectIsMessageProtected,\n  selectIsMessageSelected,\n  selectMessageIdsByGroupId,\n  selectOutgoingStatus,\n  selectPeer,\n  selectPeerStory,\n  selectPerformanceSettingsValue,\n  selectPollFromMessage,\n  selectRequestedChatTranslationLanguage,\n  selectRequestedMessageTranslationLanguage,\n  selectSender,\n  selectSenderFromHeader,\n  selectShouldDetectChatLanguage,\n  selectShouldLoopStickers,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopicFromMessage,\n  selectUploadProgress,\n  selectUser,\n} from '../../../global/selectors';\nimport { isAnimatingScroll } from '../../../util/animateScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getMessageKey } from '../../../util/keys/messageKey';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_ANDROID, IS_ELECTRON, IS_TRANSLATION_SUPPORTED } from '../../../util/windowEnvironment';\nimport {\n  calculateDimensionsForMessageMedia,\n  getStickerDimensions,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { getPeerColorClass } from '../../common/helpers/peerColor';\nimport renderText from '../../common/helpers/renderText';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport getSingularPaidMedia from './helpers/getSingularPaidMedia';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useEnsureStory from '../../../hooks/useEnsureStory';\nimport useFlag from '../../../hooks/useFlag';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../../hooks/usePreviousDeprecated';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useDetectChatLanguage from './hooks/useDetectChatLanguage';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport useOuterHandlers from './hooks/useOuterHandlers';\n\nimport Audio from '../../common/Audio';\nimport Avatar from '../../common/Avatar';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport Document from '../../common/Document';\nimport DotAnimation from '../../common/DotAnimation';\nimport EmbeddedMessage from '../../common/embedded/EmbeddedMessage';\nimport EmbeddedStory from '../../common/embedded/EmbeddedStory';\nimport FakeIcon from '../../common/FakeIcon';\nimport Icon from '../../common/icons/Icon';\nimport StarIcon from '../../common/icons/StarIcon';\nimport MessageText from '../../common/MessageText';\nimport ReactionStaticEmoji from '../../common/reactions/ReactionStaticEmoji';\nimport TopicChip from '../../common/TopicChip';\nimport Button from '../../ui/Button';\nimport Album from './Album';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport CommentButton from './CommentButton';\nimport Contact from './Contact';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport FactCheck from './FactCheck';\nimport Game from './Game';\nimport Giveaway from './Giveaway';\nimport InlineButtons from './InlineButtons';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport MessageAppendix from './MessageAppendix';\nimport MessageEffect from './MessageEffect';\nimport MessageMeta from './MessageMeta';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport PaidMediaOverlay from './PaidMediaOverlay';\nimport Photo from './Photo';\nimport Poll from './Poll';\nimport Reactions from './reactions/Reactions';\nimport RoundVideo from './RoundVideo';\nimport Sticker from './Sticker';\nimport Story from './Story';\nimport StoryMention from './StoryMention';\nimport Video from './Video';\nimport WebPage from './WebPage';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: ThreadId;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    isJustAdded: boolean;\n    memoFirstUnreadIdRef: { current: number | undefined };\n    getIsMessageListReady: Signal<boolean>;\n    onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  sender?: ApiPeer;\n  canShowSender: boolean;\n  originSender?: ApiPeer;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiPeer;\n  replyMessageForwardSender?: ApiPeer;\n  replyMessageChat?: ApiChat;\n  isReplyPrivate?: boolean;\n  replyStory?: ApiTypeStory;\n  storySender?: ApiPeer;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  focusedQuote?: string;\n  noFocusHighlight?: boolean;\n  scrollTargetPosition?: ScrollTargetPosition;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  hasActiveReactions?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading?: boolean;\n  threadId?: ThreadId;\n  isPinnedList?: boolean;\n  isPinned?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  hasLinkedChat?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  shouldDetectChatLanguage?: boolean;\n  requestedTranslationLanguage?: string;\n  requestedChatTranslationLanguage?: string;\n  withAnimatedEffects?: boolean;\n  webPageStory?: ApiTypeStory;\n  isConnected: boolean;\n  isLoadingComments?: boolean;\n  shouldWarnAboutSvg?: boolean;\n  senderBoosts?: number;\n  tags?: Record<ApiReactionKey, ApiSavedReactionTag>;\n  canTranscribeVoice?: boolean;\n  viaBusinessBot?: ApiUser;\n  effect?: ApiAvailableEffect;\n  availableStars?: number;\n  poll?: ApiPoll;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\ntype QuickReactionPosition =\n  'in-content'\n  | 'in-meta';\n\nconst NBSP = '\\u00A0';\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\nconst RESIZE_ANIMATION_DURATION = 400;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isJustAdded,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  replyMessageForwardSender,\n  replyMessageChat,\n  replyStory,\n  isReplyPrivate,\n  storySender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isLoadingComments,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  focusedQuote,\n  noFocusHighlight,\n  scrollTargetPosition,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isAnonymousForwards,\n  isChannel,\n  isGroup,\n  canReply,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  hasActiveReactions,\n  hasLinkedChat,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isPinned,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  shouldDetectChatLanguage,\n  requestedTranslationLanguage,\n  requestedChatTranslationLanguage,\n  withAnimatedEffects,\n  webPageStory,\n  isConnected,\n  getIsMessageListReady,\n  shouldWarnAboutSvg,\n  senderBoosts,\n  tags,\n  canTranscribeVoice,\n  viaBusinessBot,\n  effect,\n  availableStars,\n  poll,\n  onIntersectPinnedMessage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n    markMentionsRead,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const quickReactionRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useOldLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [shouldPlayEffect, requestEffect, hideEffect] = useFlag();\n  const { isMobile, isTouchScreen } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen,\n    contextMenuAnchor,\n    contextMenuTarget,\n    handleBeforeContextMenu,\n    handleContextMenu: onContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(\n    ref,\n    isTouchScreen && isInSelectMode,\n    !IS_ELECTRON,\n    IS_ANDROID,\n    getIsMessageListReady,\n  );\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  useShowTransition({\n    ref,\n    isOpen: isShown || isJustAdded,\n    noMountTransition: noAppearanceAnimation && !isJustAdded,\n    className: false,\n  });\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError, factCheck,\n  } = message;\n\n  useUnmountCleanup(() => {\n    if (message.isPinned) {\n      const id = album ? album.mainMessage.id : messageId;\n      onIntersectPinnedMessage({ viewportPinnedIdsToRemove: [id] });\n    }\n  });\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasMessageReply = isReplyToMessage(message) && !shouldHideReply;\n\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo, audio,\n    voice, document, sticker, contact,\n    webPage, invoice, location,\n    action, game, storyData, giveaway,\n    giveawayResults,\n  } = getMessageContent(message);\n\n  const messageReplyInfo = getMessageReplyInfo(message);\n  const storyReplyInfo = getStoryReplyInfo(message);\n\n  const hasStoryReply = Boolean(storyReplyInfo);\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !isAnonymousForwards\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  ) || Boolean(storyData && !storyData.isMention);\n  const canShowSenderBoosts = Boolean(senderBoosts) && !asForwarded && isFirstInGroup;\n  const isStoryMention = storyData?.isMention;\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isAlbum = Boolean(album)\n    && (\n      (album.isPaidMedia && paidMedia!.extendedMedia.length > 1)\n      || album.messages.length > 1\n    ) && !album.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuAnchor !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n    && !isStoryMention\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || isChatWithSelf || isRepliesChat || isAnonymousForwards)\n      && forwardInfo.fromMessageId\n    ));\n\n  const noUserColors = isOwn && !isCustomShape;\n\n  const hasFactCheck = Boolean(factCheck?.text);\n\n  const hasSubheader = hasTopicChip || hasMessageReply || hasStoryReply;\n\n  const selectMessage = useLastCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  });\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const shouldPreferOriginSender = forwardInfo\n    && (isChatWithSelf || isRepliesChat || isAnonymousForwards || !messageSender);\n  const avatarPeer = shouldPreferOriginSender ? originSender : messageSender;\n  const messageColorPeer = originSender || sender;\n  const senderPeer = (forwardInfo || storyData) ? originSender : messageSender;\n  const hasTtl = hasMessageTtl(message);\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    quickReactionRef,\n    isInDocumentGroupNotLast,\n    getIsMessageListReady,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n    handleStoryClick,\n  } = useInnerHandlers({\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n    isTranslatingChat: Boolean(requestedChatTranslationLanguage),\n    story: replyStory && 'content' in replyStory ? replyStory : undefined,\n    isReplyPrivate,\n    isRepliesChat,\n    isSavedMessages: isChatWithSelf,\n  });\n\n  const handleEffectClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    requestEffect();\n  });\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const textMessage = album?.hasMultipleCaptions ? undefined : (album?.captionMessage || message);\n  const hasTextContent = textMessage && hasMessageText(textMessage);\n  const hasText = hasTextContent || hasFactCheck;\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && !hasTextContent ? 'is-protected' : 'allow-selection',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.viewsCount) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasMessageReply && 'has-reply',\n    isContextMenuOpen && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    isJustAdded && 'is-just-added',\n    (hasActiveReactions || shouldPlayEffect) && 'has-active-effect',\n    isStoryMention && 'is-story-mention',\n  );\n\n  const text = textMessage && getMessageContent(textMessage).text;\n  const isInvertedMedia = Boolean(message.isInvertedMedia);\n\n  const { replyToMsgId, replyToPeerId, isQuote } = messageReplyInfo || {};\n  const { peerId: storyReplyPeerId, storyId: storyReplyId } = storyReplyInfo || {};\n\n  useEffect(() => {\n    if ((sticker?.hasEffect || effect) && ((\n      memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n    ) || isLocal)) {\n      requestEffect();\n    }\n  }, [effect, isLocal, memoFirstUnreadIdRef, messageId, sticker?.hasEffect]);\n\n  const detectedLanguage = useTextLanguage(\n    text?.text,\n    !(areTranslationsEnabled || shouldDetectChatLanguage),\n    getIsMessageListReady,\n  );\n  useDetectChatLanguage(message, detectedLanguage, !shouldDetectChatLanguage, getIsMessageListReady);\n\n  const shouldTranslate = isMessageTranslatable(message, !requestedChatTranslationLanguage);\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, shouldTranslate ? messageId : undefined, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePreviousDeprecated(translatedText, Boolean(shouldTranslate));\n\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const isMediaWithCommentButton = (repliesThreadInfo || (hasLinkedChat && isChannel && isLocal))\n    && !isInDocumentGroupNotLast\n    && messageListType === 'thread'\n    && !noComments;\n  const withCommentButton = repliesThreadInfo?.isCommentsInfo\n    && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !isTouchScreen && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast && !isStoryMention && !hasTtl;\n\n  const hasOutsideReactions = hasReactions\n    && (isCustomShape || ((photo || video || storyData || (location?.mediaType === 'geo')) && !hasText));\n\n  const contentClassName = buildContentClassName(message, album, {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasCommentCounter: hasThread && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.mediaType === 'geoLive' && !isGeoLiveExpired(message),\n    withVoiceTranscription,\n    peerColorClass: getPeerColorClass(messageColorPeer, noUserColors),\n    hasOutsideReactions,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !emojiSize && !isInvertedMedia) {\n    metaPosition = 'in-text';\n  } else if (isInvertedMedia && !emojiSize && (hasFactCheck || webPage)) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (hasOutsideReactions) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  const quickReactionPosition: QuickReactionPosition = isCustomShape ? 'in-meta' : 'in-content';\n\n  useEnsureMessage(\n    replyToPeerId || chatId,\n    replyToMsgId,\n    replyMessage,\n    message.id,\n    shouldHideReply || isQuote || isReplyPrivate,\n  );\n\n  useEnsureStory(\n    storyReplyPeerId || chatId,\n    storyReplyId,\n    replyStory,\n  );\n\n  useFocusMessage(\n    ref,\n    chatId,\n    isFocused,\n    focusDirection,\n    noFocusHighlight,\n    isResizingContainer,\n    isJustAdded,\n    Boolean(focusedQuote),\n    scrollTargetPosition,\n  );\n\n  const viaBusinessBotTitle = viaBusinessBot ? getSenderTitle(lang, viaBusinessBot) : undefined;\n\n  const canShowPostAuthor = !message.senderId;\n  const signature = viaBusinessBotTitle || (canShowPostAuthor && message.postAuthorTitle)\n    || ((asForwarded || isChatWithSelf) && forwardInfo?.postAuthorTitle)\n    || undefined;\n\n  const shouldFocusOnResize = isLastInList;\n\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.contentRect.height;\n    messageHeightRef.current = newHeight;\n\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    beginHeavyAnimation(RESIZE_ANIMATION_DURATION);\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  });\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(ref, throttledResize, !shouldFocusOnResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (!bottomMarker || !isElementInViewport(bottomMarker)) return;\n\n    if (hasUnreadReaction) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n\n    if (message.hasUnreadMention) {\n      markMentionsRead({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction, message.hasUnreadMention]);\n\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    let noMediaCorners = false;\n    let style = '';\n    let reactionsMaxWidth;\n\n    if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      } else if (video) {\n        if (isRoundVideo) {\n          width = ROUND_VIDEO_DIMENSIONS_PX;\n        } else {\n          width = calculateMediaDimensions({\n            media: video,\n            isOwn,\n            asForwarded,\n            noAvatars,\n            isMobile,\n          }).width;\n        }\n      } else if (invoice?.extendedMedia && (\n        invoice.extendedMedia.width && invoice.extendedMedia.height\n      )) {\n        const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n        width = calculateDimensionsForMessageMedia({\n          width: previewWidth,\n          height: previewHeight,\n          fromOwnMessage: isOwn,\n          asForwarded,\n          noAvatars,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(text?.text, isMediaWithCommentButton), width);\n        if (!asForwarded && invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n          noMediaCorners = true;\n        }\n      }\n    } else if (albumLayout) {\n      calculatedWidth = Math.max(\n        getMinMediaWidth(text?.text, isMediaWithCommentButton), albumLayout.containerStyle.width,\n      );\n      if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth}px`;\n      reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n    } else if (sticker && !hasSubheader) {\n      const { width } = getStickerDimensions(sticker, isMobile);\n      style = `width: ${width + extraPadding}px`;\n      reactionsMaxWidth = width + EXTRA_SPACE_FOR_REACTIONS;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style, reactionsMaxWidth,\n    };\n  }, [\n    albumLayout, asForwarded, extraPadding, hasSubheader, invoice?.extendedMedia, isAlbum, isMediaWithCommentButton,\n    isMobile, isOwn, noAvatars, photo, sticker, text?.text, video, isRoundVideo,\n  ]);\n\n  const {\n    contentWidth, noMediaCorners, style, reactionsMaxWidth,\n  } = sizeCalculations;\n\n  function renderAvatar() {\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        peer={avatarPeer}\n        text={hiddenName}\n        onClick={avatarPeer ? handleAvatarClick : undefined}\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    if (!textMessage) return undefined;\n    return (\n      <MessageText\n        messageOrStory={textMessage}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        focusedQuote={focusedQuote}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n        isInSelectMode={isInSelectMode}\n        canBeEmpty={hasFactCheck}\n      />\n    );\n  }\n\n  const renderQuickReactionButton = useCallback(() => {\n    if (!defaultReaction) return undefined;\n\n    return (\n      <div\n        className={buildClassName('quick-reaction', isQuickReactionVisible && !hasActiveReactions && 'visible')}\n        onClick={handleSendQuickReaction}\n        ref={quickReactionRef}\n      >\n        <ReactionStaticEmoji\n          reaction={defaultReaction}\n          size={QUICK_REACTION_SIZE}\n          availableReactions={availableReactions}\n          observeIntersection={observeIntersectionForPlaying}\n        />\n      </div>\n    );\n  }, [\n    hasActiveReactions, availableReactions, defaultReaction, handleSendQuickReaction, isQuickReactionVisible,\n    observeIntersectionForPlaying,\n  ]);\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        isPinned={isPinned}\n        withFullDate={isChatWithSelf && !isOwn}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        renderQuickReactionButton={\n          withQuickReactionButton && quickReactionPosition === 'in-meta' ? renderQuickReactionButton : undefined\n        }\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        effectEmoji={effect?.emoticon}\n        onClick={handleMetaClick}\n        onEffectClick={handleEffectClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        message={reactionMessage!}\n        threadId={threadId}\n        metaChildren={meta}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n        tags={tags}\n        isCurrentUserPremium={isPremium}\n        availableStars={availableStars}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup\n      && (!hasText || (isInvertedMedia && !hasFactCheck && !hasReactions)) && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n    const shouldReadMedia = !hasTtl || !isOwn || isChatWithSelf;\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {!asForwarded && renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasMessageReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                replyInfo={messageReplyInfo}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                senderChat={replyMessageChat}\n                forwardSender={replyMessageForwardSender}\n                chatTranslations={chatTranslations}\n                requestedChatTranslationLanguage={requestedChatTranslationLanguage}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n            {hasStoryReply && (\n              <EmbeddedStory\n                story={replyStory}\n                sender={storySender}\n                noUserColors={noUserColors}\n                isProtected={isProtected}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                onClick={handleStoryClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            shouldPlayEffect={shouldPlayEffect}\n            withEffect={withAnimatedEffects}\n            onStopEffect={hideEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={withAnimatedEffects && isUserId(chatId) && !effect}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {withAnimatedEffects && effect && !isLocal && (\n          <MessageEffect\n            shouldPlay={shouldPlayEffect}\n            messageId={message.id}\n            isMirrored={!message.isOutgoing}\n            effect={effect}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            onStop={hideEffect}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && isRoundVideo && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            isDownloading={isDownloading}\n            onReadMedia={shouldReadMedia ? handleReadMedia : undefined}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && shouldReadMedia ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={canTranscribeVoice && !hasTtl}\n          />\n        )}\n        {document && (\n          <Document\n            document={document}\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            shouldWarnAboutSvg={shouldWarnAboutSvg}\n          />\n        )}\n        {storyData && !isStoryMention && (\n          <Story\n            message={message}\n            isProtected={isProtected}\n          />\n        )}\n        {isStoryMention && <StoryMention message={message} />}\n        {contact && (\n          <Contact contact={contact} noUserColors={isOwn} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {(giveaway || giveawayResults) && (\n          <Giveaway message={message} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            isConnected={isConnected}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {isInvertedMedia && renderInvertedMediaContent(hasCustomAppendix)}\n\n        {!isInvertedMedia && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {hasText && !hasAnimatedEmoji && (\n              <div className={textContentClass} dir=\"auto\">\n                {renderMessageText()}\n                {isTranslationPending && (\n                  <div className=\"translation-animation\">\n                    <div className=\"text-loading\">\n                      {renderMessageText(true)}\n                    </div>\n                  </div>\n                )}\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {metaPosition === 'in-text' && renderReactionsAndMeta()}\n              </div>\n            )}\n            {renderWebPage()}\n          </>\n        )}\n\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix && !hasReactions}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            forcedWidth={contentWidth}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderInvertedMediaContent(hasCustomAppendix: boolean) {\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n    );\n    const footerClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    const hasMediaAfterText = isAlbum || (!isAlbum && photo) || (!isAlbum && video && !isRoundVideo);\n    const hasContentAfterText = hasMediaAfterText || (!hasAnimatedEmoji && hasFactCheck);\n    const isMetaInText = metaPosition === 'in-text';\n\n    return (\n      <>\n        {renderWebPage()}\n        {hasText && !hasAnimatedEmoji && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {!hasContentAfterText && isMetaInText && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {hasContentAfterText && (\n          <>\n            {renderInvertibleMediaContent(hasCustomAppendix)}\n            {!hasAnimatedEmoji && (\n              <div className={footerClass} dir=\"auto\">\n                {hasFactCheck && (\n                  <FactCheck factCheck={factCheck} isToggleDisabled={isInSelectMode} />\n                )}\n                {isMetaInText && renderReactionsAndMeta()}\n              </div>\n            )}\n          </>\n        )}\n\n      </>\n    );\n  }\n\n  function renderWebPage() {\n    return webPage && (\n      <WebPage\n        message={message}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        noAvatars={noAvatars}\n        canAutoLoad={canAutoLoadMedia}\n        canAutoPlay={canAutoPlayMedia}\n        asForwarded={asForwarded}\n        isDownloading={isDownloading}\n        isProtected={isProtected}\n        theme={theme}\n        story={webPageStory}\n        isConnected={isConnected}\n        backgroundEmojiId={sender?.color?.backgroundEmojiId}\n        shouldWarnAboutSvg={shouldWarnAboutSvg}\n        autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n        onAudioPlay={handleAudioPlay}\n        onMediaClick={handleMediaClick}\n        onCancelMediaTransfer={handleCancelUpload}\n      />\n    );\n  }\n\n  function renderInvertibleMediaContent(hasCustomAppendix: boolean) {\n    const content = (\n      <>\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            messageText={text?.text}\n            photo={photo}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            forcedWidth={contentWidth}\n            onClick={handlePhotoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && !isRoundVideo && (\n          <Video\n            video={video}\n            isOwn={isOwn}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            forcedWidth={contentWidth}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleVideoMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n      </>\n    );\n\n    if (paidMedia) {\n      return (\n        <PaidMediaOverlay chatId={chatId} messageId={messageId} paidMedia={paidMedia} isOutgoing={isOwn}>\n          {content}\n        </PaidMediaOverlay>\n      );\n    }\n\n    return content;\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location || paidMedia;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasMessageReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    } else if (storyData && originSender) {\n      senderTitle = getSenderTitle(lang, originSender!);\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    const shouldRenderForwardAvatar = asForwarded && senderPeer;\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {(senderTitle || asForwarded) ? (\n          <span\n            className={buildClassName(\n              'message-title-name-container',\n              forwardInfo?.hiddenUserName ? 'sender-hidden' : 'interactive',\n              senderColor,\n            )}\n            dir=\"ltr\"\n          >\n            <span className=\"forward-title-container\">\n              {asForwarded && (\n                <Icon name={forwardInfo?.hiddenUserName ? 'forward' : 'share-filled'} />\n              )}\n              {asForwarded && (\n                <span className=\"forward-title\">\n                  {lang('ForwardedFrom')}\n                </span>\n              )}\n            </span>\n            <span className=\"message-title-name\">\n              {storyData && <Icon name=\"play-story\" />}\n              {shouldRenderForwardAvatar && (\n                <Avatar\n                  className=\"forward-avatar\"\n                  peer={senderPeer}\n                  size=\"micro\"\n                />\n              )}\n              <span\n                className=\"sender-title\"\n                onClick={handleSenderClick}\n              >\n                {senderTitle ? renderText(senderTitle) : (asForwarded ? NBSP : undefined)}\n              </span>\n              {!asForwarded && senderEmojiStatus && (\n                <CustomEmoji\n                  documentId={senderEmojiStatus.documentId}\n                  loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                  observeIntersectionForLoading={observeIntersectionForLoading}\n                  observeIntersectionForPlaying={observeIntersectionForPlaying}\n                />\n              )}\n              {!asForwarded && !senderEmojiStatus && senderIsPremium && <StarIcon />}\n              {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n            </span>\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender?.usernames?.length && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames[0].username}`)}\n            </span>\n          </>\n        )}\n        <div className=\"title-spacer\" />\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded && !viaBotId ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n        {canShowSenderBoosts && (\n          <span className=\"sender-boosts\" aria-hidden>\n            <Icon name={senderBoosts > 1 ? 'boosts' : 'boost'} />\n            {senderBoosts > 1 ? senderBoosts : undefined}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      data-message-id={messageId}\n      onCopy={isProtected ? stopEvent : undefined}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-album-main-id={album ? album.mainMessage.id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n        data-is-pinned={isPinned || undefined}\n        data-should-update-views={message.viewsCount !== undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <Icon name=\"select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <Icon name=\"select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper',\n          contentClassName.includes('text') && 'can-select-text',\n          contentClassName.includes('giveaway') && 'giveaway-result-content')}\n      >\n        <div\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <>\n              {renderSenderName()}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && !isStoryMention && renderReactionsAndMeta()}\n          {canShowActionButton && (\n            <div className={buildClassName(\n              'message-action-buttons',\n              isLoadingComments && 'message-action-buttons-shown',\n            )}\n            >\n              {canForward && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel={lang('lng_context_forward_msg')}\n                  onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n                >\n                  <Icon name=\"share-filled\" />\n                </Button>\n              )}\n              {canFocus && (\n                <Button\n                  className=\"message-action-button\"\n                  color=\"translucent-white\"\n                  round\n                  size=\"tiny\"\n                  ariaLabel=\"Focus message\"\n                  onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n                >\n                  <Icon name=\"arrow-right\" />\n                </Button>\n              )}\n            </div>\n          )}\n          {withCommentButton && (\n            <CommentButton\n              threadInfo={repliesThreadInfo}\n              disabled={noComments}\n              isLoading={isLoadingComments}\n              isCustomShape={isCustomShape}\n            />\n          )}\n          {withAppendix && <MessageAppendix isOwn={isOwn} />}\n          {withQuickReactionButton && quickReactionPosition === 'in-content' && renderQuickReactionButton()}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && !isStoryMention && (\n          <Reactions\n            message={reactionMessage!}\n            threadId={threadId}\n            isOutside\n            isCurrentUserPremium={isPremium}\n            maxWidth={reactionsMaxWidth}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n            tags={tags}\n            availableStars={availableStars}\n          />\n        )}\n      </div>\n      {contextMenuAnchor && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          targetHref={contextMenuTarget?.matches('a[href]') ? (contextMenuTarget as HTMLAnchorElement).href : undefined}\n          message={message}\n          album={album}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n      loadingThread,\n    } = selectTabState(global);\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, isOutgoing, forwardInfo, transcriptionId, isPinned, viaBusinessBotId, effectId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isSystemBotChat = isSystemBot(chatId);\n    const isAnonymousForwards = isAnonymousForwardsChat(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const webPageStoryData = message.content.webPage?.story;\n    const webPageStory = webPageStoryData\n      ? selectPeerStory(global, webPageStoryData.peerId, webPageStoryData.id)\n      : undefined;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chatFullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const isThreadTop = message.id === threadId;\n\n    const { replyToMsgId, replyToPeerId, replyFrom } = getMessageReplyInfo(message) || {};\n    const { peerId: storyReplyPeerId, storyId: storyReplyId } = getStoryReplyInfo(message) || {};\n\n    const shouldHideReply = replyToMsgId && replyToMsgId === threadId;\n    const replyMessage = replyToMsgId ? selectChatMessage(global, replyToPeerId || chatId, replyToMsgId) : undefined;\n    const forwardHeader = forwardInfo || replyFrom;\n    const replyMessageSender = replyMessage ? selectSender(global, replyMessage)\n      : forwardHeader && !isSystemBotChat && !isAnonymousForwards\n        ? selectSenderFromHeader(global, forwardHeader) : undefined;\n    const replyMessageForwardSender = replyMessage && selectForwardedSender(global, replyMessage);\n    const replyMessageChat = replyToPeerId ? selectChat(global, replyToPeerId) : undefined;\n    const isReplyPrivate = !isSystemBotChat && !isAnonymousForwards && replyMessageChat\n      && !isChatPublic(replyMessageChat)\n      && (replyMessageChat.isNotJoined || replyMessageChat.isRestricted);\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n    const replyStory = storyReplyId && storyReplyPeerId\n      ? selectPeerStory(global, storyReplyPeerId, storyReplyId)\n      : undefined;\n    const storySender = storyReplyPeerId ? selectPeer(global, storyReplyPeerId) : undefined;\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m, threadId))\n        : selectIsMessageFocused(global, message, threadId)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n      quote: focusedQuote, scrollTargetPosition,\n    } = (isFocused && focusedMessage) || {};\n\n    const middleSearch = selectCurrentMiddleSearch(global);\n    const highlight = middleSearch?.results?.query\n      && `${middleSearch.isHashtag ? '#' : ''}${middleSearch.results.query}`;\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const canReply = messageListType === 'thread' && selectCanReplyToMessage(global, message, threadId);\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = getMessageDownloadableMedia(message);\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    const repliesThreadInfo = selectThreadInfo(global, chatId, album?.commentsMessage?.id || id);\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? selectTopicFromMessage(global, message) : undefined;\n\n    const chatTranslations = selectChatTranslations(global, chatId);\n\n    const requestedTranslationLanguage = selectRequestedMessageTranslationLanguage(global, chatId, message.id);\n    const requestedChatTranslationLanguage = selectRequestedChatTranslationLanguage(global, chatId);\n\n    const areTranslationsEnabled = IS_TRANSLATION_SUPPORTED && global.settings.byKey.canTranslate\n      && !requestedChatTranslationLanguage; // Stop separate language detection if chat translation is requested\n\n    const isConnected = global.connectionState === 'connectionStateReady';\n\n    const hasActiveReactions = Boolean(reactionMessage && activeReactions[getMessageKey(reactionMessage)]?.length);\n\n    const isPremium = selectIsCurrentUserPremium(global);\n    const senderBoosts = sender && selectIsChatWithSelf(global, sender.id)\n      ? (chatFullInfo?.boostsApplied ?? message.senderBoosts) : message.senderBoosts;\n\n    const chatLevel = chat?.boostLevel || 0;\n    const transcribeMinLevel = global.appConfig?.groupTranscribeLevelMin;\n    const canTranscribeVoice = isPremium || Boolean(transcribeMinLevel && chatLevel >= transcribeMinLevel);\n\n    const viaBusinessBot = viaBusinessBotId ? selectUser(global, viaBusinessBotId) : undefined;\n\n    const effect = effectId ? global.availableEffectById[effectId] : undefined;\n\n    const { balance: availableStars } = global.stars || {};\n    const poll = selectPollFromMessage(global, message);\n\n    return {\n      theme: selectTheme(global),\n      forceSenderName,\n      sender,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      replyMessageForwardSender,\n      replyMessageChat,\n      replyStory,\n      isReplyPrivate,\n      storySender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat: isSystemBotChat,\n      isAnonymousForwards,\n      isChannel,\n      isGroup,\n      canReply,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      isPinned,\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo,\n      availableReactions: global.reactions.availableReactions,\n      defaultReaction: isMessageLocal(message) || messageListType === 'scheduled'\n        ? undefined : selectDefaultReaction(global, chatId),\n      hasActiveReactions,\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium,\n      senderAdminMember,\n      messageTopic,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled,\n      shouldDetectChatLanguage: selectShouldDetectChatLanguage(global, chatId),\n      requestedTranslationLanguage,\n      requestedChatTranslationLanguage,\n      hasLinkedChat: Boolean(chatFullInfo?.linkedChatId),\n      withAnimatedEffects: selectPerformanceSettingsValue(global, 'stickerEffects'),\n      webPageStory,\n      isConnected,\n      isLoadingComments: repliesThreadInfo?.isCommentsInfo\n        && loadingThread?.loadingChatId === repliesThreadInfo?.originChannelId\n        && loadingThread?.loadingMessageId === repliesThreadInfo?.originMessageId,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && {\n        focusDirection,\n        noFocusHighlight,\n        isResizingContainer,\n        focusedQuote,\n        scrollTargetPosition,\n      }),\n      senderBoosts,\n      tags: global.savedReactionTags?.byKey,\n      canTranscribeVoice,\n      viaBusinessBot,\n      effect,\n      availableStars,\n      poll,\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type {\n  ApiMessage, ApiPeer, ApiStory, ApiTopic, ApiUser,\n} from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useOldLang';\nimport type { IAlbum, ThreadId } from '../../../../types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport { MediaViewerOrigin } from '../../../../types';\n\nimport { getMessageReplyInfo } from '../../../../global/helpers/replies';\n\nimport useLastCallback from '../../../../hooks/useLastCallback';\n\nexport default function useInnerHandlers({\n  lang,\n  selectMessage,\n  message,\n  chatId,\n  threadId,\n  isInDocumentGroup,\n  asForwarded,\n  isScheduled,\n  album,\n  avatarPeer,\n  senderPeer,\n  botSender,\n  messageTopic,\n  isTranslatingChat,\n  story,\n  isReplyPrivate,\n  isRepliesChat,\n  isSavedMessages,\n}: {\n  lang: LangFn;\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void;\n  message: ApiMessage;\n  chatId: string;\n  threadId: ThreadId;\n  isInDocumentGroup: boolean;\n  asForwarded?: boolean;\n  isScheduled?: boolean;\n  album?: IAlbum;\n  avatarPeer?: ApiPeer;\n  senderPeer?: ApiPeer;\n  botSender?: ApiUser;\n  messageTopic?: ApiTopic;\n  isTranslatingChat?: boolean;\n  story?: ApiStory;\n  isReplyPrivate?: boolean;\n  isRepliesChat?: boolean;\n  isSavedMessages?: boolean;\n}) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelUploadMedia, sendPollVote, openForwardMenu,\n    openChatLanguageModal, openThread, openStoryViewer, searchChatMediaMessages,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, groupedId, content: { paidMedia },\n  } = message;\n\n  const {\n    replyToMsgId, replyToPeerId, replyToTopId, isQuote, quoteText,\n  } = getMessageReplyInfo(message) || {};\n\n  const handleAvatarClick = useLastCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  });\n\n  const handleSenderClick = useLastCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  });\n\n  const handleViaBotClick = useLastCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  });\n\n  const handleReplyClick = useLastCallback((): void => {\n    if (!replyToMsgId || isReplyPrivate) {\n      showNotification({\n        message: isQuote ? lang('QuotePrivate') : lang('ReplyPrivate'),\n      });\n      return;\n    }\n\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: isRepliesChat ? replyToTopId : threadId, // Open comments from Replies bot, otherwise, keep current thread\n      messageId: replyToMsgId,\n      replyMessageId: replyToPeerId ? undefined : messageId,\n      noForumTopicPanel: !replyToPeerId, // Open topic panel for cross-chat replies\n      ...(isQuote && { quote: quoteText?.text }),\n    });\n  });\n\n  const handleMediaClick = useLastCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  });\n  const openMediaViewerWithPhotoOrVideo = useLastCallback((withDynamicLoading: boolean): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n    if (withDynamicLoading) {\n      searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    }\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n      withDynamicLoading,\n    });\n  });\n  const handlePhotoMediaClick = useLastCallback((): void => {\n    const withDynamicLoading = !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n  const handleVideoMediaClick = useLastCallback(() => {\n    const isGif = message.content?.video?.isGif;\n    const withDynamicLoading = !isGif && !isScheduled && !paidMedia;\n    openMediaViewerWithPhotoOrVideo(withDynamicLoading);\n  });\n\n  const handleAudioPlay = useLastCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  });\n\n  const handleAlbumMediaClick = useLastCallback((albumMessageId: number, albumIndex?: number): void => {\n    if (paidMedia && !paidMedia.isBought) return;\n\n    searchChatMediaMessages({ chatId, threadId, currentMediaMessageId: messageId });\n    openMediaViewer({\n      chatId,\n      threadId,\n      messageId: albumMessageId,\n      mediaIndex: albumIndex,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n      withDynamicLoading: !paidMedia,\n    });\n  });\n\n  const handleReadMedia = useLastCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  });\n\n  const handleCancelUpload = useLastCallback(() => {\n    cancelUploadMedia({ chatId, messageId });\n  });\n\n  const handleVoteSend = useLastCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  });\n\n  const handleGroupForward = useLastCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  });\n\n  const handleForward = useLastCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  });\n\n  const handleFocus = useLastCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  });\n\n  const handleFocusForwarded = useLastCallback(() => {\n    const originalChatId = (isSavedMessages && forwardInfo!.savedFromPeerId) || forwardInfo!.fromChatId!;\n\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: originalChatId, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (replyToPeerId && replyToTopId) {\n      focusMessage({\n        chatId: replyToPeerId,\n        threadId: replyToTopId,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: originalChatId, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  });\n\n  const selectWithGroupedId = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  });\n\n  const handleTranslationClick = useLastCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openChatLanguageModal({ chatId, messageId: !isTranslatingChat ? messageId : undefined });\n  });\n\n  const handleOpenThread = useLastCallback(() => {\n    openThread({\n      chatId: message.chatId,\n      threadId: message.id,\n    });\n  });\n\n  const handleTopicChipClick = useLastCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: replyToPeerId || chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  });\n\n  const handleStoryClick = useLastCallback(() => {\n    if (!story) return;\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSingleStory: true,\n    });\n  });\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handlePhotoMediaClick,\n    handleVideoMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n    handleStoryClick,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { Signal } from '../util/signals';\n\nimport { detectLanguage } from '../util/languageDetection';\n\nexport default function useTextLanguage(text?: string, isDisabled?: boolean, getIsReady?: Signal<boolean>) {\n  const [language, setLanguage] = useState<string | undefined>();\n\n  useEffect(() => {\n    if (isDisabled || (getIsReady && !getIsReady())) return;\n\n    if (text) {\n      detectLanguage(text).then(setLanguage);\n    } else {\n      setLanguage(undefined);\n    }\n  }, [isDisabled, text, getIsReady]);\n\n  return language;\n}\n","import type { ApiMessage, ApiPoll } from '../../../../api/types';\nimport type { IAlbum } from '../../../../types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\nimport getSingularPaidMedia from './getSingularPaidMedia';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  album?: IAlbum,\n  {\n    poll,\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasCommentCounter,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n    peerColorClass,\n    hasOutsideReactions,\n  }: {\n    poll?: ApiPoll;\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasCommentCounter?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n    peerColorClass?: string;\n    hasOutsideReactions?: boolean;\n  } = {},\n) {\n  const { paidMedia } = getMessageContent(message);\n  const { photo: paidMediaPhoto, video: paidMediaVideo } = getSingularPaidMedia(paidMedia);\n\n  const content = getMessageContent(message);\n  const {\n    photo = paidMediaPhoto, video = paidMediaVideo,\n    audio, voice, document, webPage, contact, location, invoice, storyData,\n    giveaway, giveawayResults,\n  } = content;\n  const text = album?.hasMultipleCaptions ? undefined : getMessageContent(album?.captionMessage || message).text;\n  const hasFactCheck = Boolean(message.factCheck?.text);\n\n  const isRoundVideo = video?.mediaType === 'video' && video.isRound;\n  const isInvertedMedia = message.isInvertedMedia;\n  const isInvertibleMedia = photo || (video && !isRoundVideo) || album || webPage;\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = storyData || photo || video || location || invoice?.extendedMedia || paidMedia;\n  const hasText = text || location?.mediaType === 'venue' || isGeoLiveActive || hasFactCheck;\n  const isMediaWithNoText = isMedia && !hasText;\n  const hasInlineKeyboard = Boolean(message.inlineButtons);\n  const isViaBot = Boolean(message.viaBotId);\n\n  const hasFooter = (() => {\n    if (isInvertedMedia && isInvertibleMedia) {\n      if (hasReactions && !hasOutsideReactions) return true;\n      if (hasFactCheck) return true;\n      if (webPage && hasText) return true;\n      return false;\n    }\n    return hasText;\n  })();\n\n  if (peerColorClass) {\n    classNames.push(peerColorClass);\n  }\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  } else {\n    classNames.push('no-text');\n  }\n\n  if (!Object.keys(content).length) {\n    classNames.push('unsupported');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (isRoundVideo) {\n      classNames.push('round');\n    }\n\n    if (hasCommentCounter) {\n      classNames.push('has-comment-counter');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (giveaway || giveawayResults) {\n    classNames.push('giveaway');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n\n    if (webPage.document) {\n      classNames.push('document');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (storyData) {\n    classNames.push('story');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (hasOutsideReactions) {\n    classNames.push('has-outside-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasThread) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName || hasFactCheck) {\n      classNames.push('has-solid-background');\n    }\n\n    if (hasFactCheck) {\n      classNames.push('has-fact-check');\n    }\n\n    if (isLastInGroup && !hasInlineKeyboard && (photo || !isMediaWithNoText || (location && asForwarded))) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  if (isInvertibleMedia && isInvertedMedia) {\n    classNames.push('is-inverted-media');\n  }\n\n  if (hasFooter) {\n    classNames.push('has-footer');\n  } else {\n    classNames.push('no-footer');\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutAdsModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default AboutAdsModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default SponsoredMessageContextMenuContainerAsync;\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSponsoredMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport { MediaViewerOrigin } from '../../../types';\n\nimport {\n  getIsDownloading,\n  getMessageContent,\n  getMessageDownloadableMedia,\n} from '../../../global/helpers';\nimport {\n  selectActiveDownloads, selectCanAutoLoadMedia, selectCanAutoPlayMedia,\n  selectSponsoredMessage,\n  selectTheme,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_ANDROID } from '../../../util/windowEnvironment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport { calculateMediaDimensions, getMinMediaWidth, MIN_MEDIA_WIDTH_WITH_TEXT } from './helpers/mediaDimensions';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useFlag from '../../../hooks/useFlag';\nimport { type ObserveFn, useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport Avatar from '../../common/Avatar';\nimport Icon from '../../common/icons/Icon';\nimport PeerColorWrapper from '../../common/PeerColorWrapper';\nimport Button from '../../ui/Button';\nimport MessageAppendix from './MessageAppendix';\nimport Photo from './Photo';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\nimport Video from './Video';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  theme: ISettings['theme'];\n  isDownloading?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  theme,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openUrl,\n    hideSponsoredMessages,\n    clickSponsoredMessage,\n    reportSponsoredMessage,\n    openMediaViewer,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n\n  const { isMobile } = useAppLayout();\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, undefined, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleReportSponsoredMessage = useLastCallback(() => {\n    reportSponsoredMessage({ chatId, randomId: message!.randomId });\n  });\n\n  const handleHideSponsoredMessage = useLastCallback(() => {\n    hideSponsoredMessages();\n  });\n\n  const {\n    photo, video,\n  } = message ? getMessageContent(message) : { photo: undefined, video: undefined };\n\n  const isGif = video?.isGif;\n  const hasMedia = Boolean(photo || video);\n\n  const handleClick = useLastCallback(() => {\n    if (!message) return;\n\n    clickSponsoredMessage({ isMedia: photo || isGif ? true : undefined, chatId });\n    openUrl({ url: message!.url, shouldSkipModal: true });\n  });\n\n  const handleOpenMedia = useLastCallback(() => {\n    clickSponsoredMessage({ isMedia: true, chatId });\n    openMediaViewer({\n      origin: MediaViewerOrigin.SponsoredMessage,\n      chatId,\n      isSponsoredMessage: true,\n    });\n  });\n\n  const extraPadding = 0;\n\n  const sizeCalculations = useMemo(() => {\n    let calculatedWidth;\n    let contentWidth: number | undefined;\n    const noMediaCorners = false;\n    let style = '';\n\n    if (photo || video) {\n      let width: number | undefined;\n      if (photo) {\n        width = calculateMediaDimensions({\n          media: photo,\n          isMobile,\n        }).width;\n      } else if (video) {\n        width = calculateMediaDimensions({\n          media: video,\n          isMobile,\n        }).width;\n      }\n\n      if (width) {\n        if (width < MIN_MEDIA_WIDTH_WITH_TEXT) {\n          contentWidth = width;\n        }\n        calculatedWidth = Math.max(getMinMediaWidth(), width);\n      }\n    }\n\n    if (calculatedWidth) {\n      style = `width: ${calculatedWidth + extraPadding}px`;\n    }\n\n    return {\n      contentWidth, noMediaCorners, style,\n    };\n  }, [photo, video, isMobile]);\n\n  const {\n    contentWidth, style,\n  } = sizeCalculations;\n\n  if (!message || !message.content) {\n    return undefined;\n  }\n\n  function renderContent() {\n    if (!message) return undefined;\n    return (\n      <>\n        <div className=\"message-title message-peer\" dir=\"auto\">{message.title}</div>\n        {Boolean(message.content?.text) && (\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities({\n                text: message.content.text.text,\n                entities: message.content.text.entities,\n              })}\n            </span>\n          </div>\n        )}\n\n        <Button\n          className=\"SponsoredMessage__button\"\n          size=\"tiny\"\n          color=\"translucent\"\n          isRectangular\n          onClick={handleClick}\n        >\n          {message.buttonText}\n        </Button>\n      </>\n    );\n  }\n\n  function renderMediaContent() {\n    if (!message) return undefined;\n\n    if (photo) {\n      return (\n        <Photo\n          photo={photo}\n          theme={theme}\n          canAutoLoad={canAutoLoadMedia}\n          isDownloading={isDownloading}\n          observeIntersection={observeIntersectionForLoading}\n          noAvatars\n          onClick={handleClick}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n    if (video) {\n      return (\n        <Video\n          video={video}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n          noAvatars\n          canAutoLoad={canAutoLoadMedia}\n          canAutoPlay={canAutoPlayMedia}\n          isDownloading={isDownloading}\n          onClick={isGif ? handleClick : handleOpenMedia}\n          forcedWidth={contentWidth}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open sponsored-media-preview\"\n    >\n      <div\n        className=\"message-content media has-shadow has-solid-background has-appendix\"\n        dir=\"auto\"\n        style={style}\n        onMouseDown={handleMouseDown}\n        onContextMenu={handleContextMenu}\n      >\n        <PeerColorWrapper peerColor={message.peerColor} className=\"content-inner\" dir=\"auto\">\n          {renderMediaContent()}\n          {message.photo && (\n            <Avatar\n              size=\"large\"\n              photo={message.photo}\n              className={buildClassName('channel-avatar', lang.isRtl && 'is-rtl')}\n            />\n          )}\n          <span className={buildClassName('message-title message-type', hasMedia && 'has-media')}>\n            {message!.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n            <span onClick={openAboutAdsModal} className=\"ad-about\">{lang('SponsoredMessageAdWhatIsThis')}</span>\n          </span>\n          {renderContent()}\n        </PeerColorWrapper>\n        <MessageAppendix />\n        <div className=\"message-action-buttons\">\n          <Button\n            className=\"message-action-button\"\n            color=\"translucent-white\"\n            round\n            size=\"tiny\"\n            ariaLabel={lang('Close')}\n            onClick={handleHideSponsoredMessage}\n          >\n            <Icon name=\"close\" className=\"sponsored-action-icon\" />\n          </Button>\n          {message.canReport && (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('More')}\n              onClick={handleContextMenu}\n              onContextMenu={handleContextMenu}\n            >\n              <Icon name=\"more\" className=\"sponsored-action-icon\" />\n            </Button>\n          )}\n        </div>\n      </div>\n      {contextMenuAnchor && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          message={message!}\n          onAboutAdsClick={openAboutAdsModal}\n          onReportAd={handleReportSponsoredMessage}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        isMonetizationSharing={message.canReport}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n\n    const activeDownloads = selectActiveDownloads(global);\n    const downloadableMedia = message ? getMessageDownloadableMedia(message) : undefined;\n    const isDownloading = downloadableMedia && getIsDownloading(activeDownloads, downloadableMedia);\n\n    return {\n      message,\n      theme: selectTheme(global),\n      isDownloading,\n      canAutoLoadMedia: message ? selectCanAutoLoadMedia(global, message) : undefined,\n      canAutoPlayMedia: message ? selectCanAutoPlayMedia(global, message) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { getIsHeavyAnimating, memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport type { ThreadId } from '../../types';\nimport type { Signal } from '../../util/signals';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport {\n  getMessageHtmlId,\n  getMessageOriginalId,\n  isActionMessage,\n  isOwnMessage,\n  isServiceNotificationMessage,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatHumanDate } from '../../util/dates/dateFormat';\nimport { compact } from '../../util/iteratees';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useDerivedSignal from '../../hooks/useDerivedSignal';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useMessageObservers from './hooks/useMessageObservers';\nimport useScrollHooks from './hooks/useScrollHooks';\n\nimport ActionMessage from './ActionMessage';\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport MessageListBotInfo from './MessageListBotInfo';\n\ninterface OwnProps {\n  areAdsEnabled?: boolean;\n  chatId: string;\n  threadId: ThreadId;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  getContainerHeight: Signal<number | undefined>;\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isEmptyThread?: boolean;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  shouldRenderBotInfo?: boolean;\n  noAppearanceAnimation: boolean;\n  isSavedDialog?: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  areAdsEnabled,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  getContainerHeight,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  isEmptyThread,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  hasLinkedChat,\n  isSchedule,\n  shouldRenderBotInfo,\n  noAppearanceAnimation,\n  isSavedDialog,\n  onScrollDownToggle,\n  onNotchToggle,\n  onIntersectPinnedMessage,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const getIsHeavyAnimating2 = getIsHeavyAnimating;\n  const getIsReady = useDerivedSignal(() => isReady && !getIsHeavyAnimating2(), [isReady, getIsHeavyAnimating2]);\n\n  const areDatesClickable = !isSavedDialog && !isSchedule;\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef, onIntersectPinnedMessage, chatId);\n\n  const {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    getContainerHeight,\n    isViewportNewest,\n    isUnread,\n    onScrollDownToggle,\n    onNotchToggle,\n    isReady,\n  );\n\n  const lang = useOldLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const prevMessageIds = usePreviousDeprecated(messageIds);\n  const isNewMessage = Boolean(\n    messageIds && prevMessageIds && messageIds[messageIds.length - 2] === prevMessageIds[prevMessageIds.length - 1],\n  );\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            threadId={threadId}\n            messageListType={type}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID && !isSavedDialog)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={isLastInList && isNewMessage}\n            isLastInList={isLastInList}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n        const isTopicTopMessage = message.id === threadId;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID || type === 'scheduled'}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isJustAdded={position.isLastInList && isNewMessage}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            onIntersectPinnedMessage={onIntersectPinnedMessage}\n            getIsMessageListReady={getIsReady}\n          />,\n          message.id === threadId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang(isEmptyThread\n                ? (isComments ? 'NoComments' : 'NoReplies') : 'DiscussionStarted')}\n              </span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', areDatesClickable && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={areDatesClickable ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      {withHistoryTriggers && <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />}\n      {shouldRenderBotInfo && <MessageListBotInfo isInMessageList key={`bot_info_${chatId}`} chatId={chatId} />}\n      {dateGroups.flat()}\n      {areAdsEnabled && isViewportNewest && (\n        <SponsoredMessage\n          key={chatId}\n          chatId={chatId}\n          containerRef={containerRef}\n          observeIntersectionForLoading={observeIntersectionForLoading}\n          observeIntersectionForPlaying={observeIntersectionForPlaying}\n        />\n      )}\n      {withHistoryTriggers && (\n        <div\n          ref={forwardsTriggerRef}\n          key=\"forwards-trigger\"\n          className=\"forwards-trigger\"\n        />\n      )}\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { useEffect, useMemo, useRef } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { Signal } from '../../../util/signals';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { debounce } from '../../../util/schedulers';\nimport { MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/windowEnvironment';\n\nimport { useDebouncedSignal } from '../../../hooks/useAsyncResolvers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport { useSignalEffect } from '../../../hooks/useSignalEffect';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst CONTAINER_HEIGHT_DEBOUNCE = 200;\nconst TOOLS_FREEZE_TIMEOUT = 350; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  getContainerHeight: Signal<number | undefined>,\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onScrollDownToggle: BooleanToVoidFunction,\n  onNotchToggle: BooleanToVoidFunction,\n  isReady: boolean,\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleScrollTools = useLastCallback(() => {\n    if (!isReady) return;\n\n    if (!messageIds?.length) {\n      onScrollDownToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onScrollDownToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onScrollDownToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  });\n\n  const {\n    observe: observeIntersectionForHistory,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    entries.forEach(({ isIntersecting, target }) => {\n      if (!isIntersecting) return;\n\n      if (target.className === 'backwards-trigger') {\n        loadMoreBackwards();\n      }\n\n      if (target.className === 'forwards-trigger') {\n        loadMoreForwards();\n      }\n    });\n  });\n\n  const withHistoryTriggers = messageIds && messageIds.length > 1;\n\n  useOnIntersect(backwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n  useOnIntersect(forwardsTriggerRef, withHistoryTriggers ? observeIntersectionForHistory : undefined);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n    throttleScheduler: requestMeasure,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  useEffect(() => {\n    if (isReady) {\n      toggleScrollTools();\n    }\n  }, [isReady, toggleScrollTools]);\n\n  const freezeShortly = useLastCallback(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  });\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(freezeShortly, [freezeShortly, messageIds]);\n\n  // Workaround for notch flickering when opening Composer Embedded Message\n  const getContainerHeightDebounced = useDebouncedSignal(getContainerHeight, CONTAINER_HEIGHT_DEBOUNCE);\n  useSignalEffect(freezeShortly, [freezeShortly, getContainerHeightDebounced]);\n\n  return {\n    withHistoryTriggers,\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { LangFn } from '../../hooks/useOldLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\n\nimport useOldLang from '../../hooks/useOldLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useOldLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon\n          topic={topic}\n          size={ICON_SIZE}\n          className=\"no-messages-icon topic-icon\"\n        />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon no-messages-icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectTheme, selectUser } from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport renderText from '../common/helpers/renderText';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\n\nimport styles from './PremiumRequiredMessage.module.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  patternColor?: string;\n  userName?: string;\n};\n\nfunction PremiumRequiredMessage({ patternColor, userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div className={styles.root}>\n      <div className={styles.inner}>\n        <div className={styles.iconsContainer}>\n          <AnimatedIconWithPreview\n            tgsUrl={LOCAL_TGS_URLS.Unlock}\n            size={54}\n            color={patternColor}\n            className={styles.animatedUnlock}\n          />\n          <Icon name=\"comments-sticker\" className={styles.commentsIcon} />\n        </div>\n        <span className={styles.description}>\n          {renderText(lang('MessageLockedPremium', userName), ['simple_markdown'])}\n        </span>\n        <Button\n          color=\"translucent-black\"\n          size=\"tiny\"\n          onClick={handleOpenPremiumModal}\n          className={styles.button}\n        >\n          {lang('MessagePremiumUnlock')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(\n  withGlobal<OwnProps>((global, { userId }): StateProps => {\n    const theme = selectTheme(global);\n    const { patternColor } = global.settings.themes[theme] || {};\n    const user = selectUser(global, userId);\n\n    return {\n      patternColor,\n      userName: getUserFirstOrLastName(user),\n    };\n  })(PremiumRequiredMessage),\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"tFp81o13\",\"button\":\"KJVF1etk\",\"disabled\":\"Mii8vuoC\",\"inner\":\"xzZFmIqC\",\"icons-container\":\"vyeCoKP3\",\"iconsContainer\":\"vyeCoKP3\",\"animated-unlock\":\"YVmR5pRi\",\"animatedUnlock\":\"YVmR5pRi\",\"comments-icon\":\"ouB5dgHN\",\"commentsIcon\":\"ouB5dgHN\",\"description\":\"oEQISdJD\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  beginHeavyAnimation, memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { addExtraClass, removeExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatFullInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { OnIntersectPinnedMessage } from './hooks/usePinnedMessage';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { LoadMoreDirection, type ThreadId } from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  MESSAGE_LIST_SLICE,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../config';\nimport { forceMeasure, requestForcedReflow, requestMeasure } from '../../lib/fasterdom/fasterdom';\nimport {\n  getIsSavedDialog,\n  getMessageHtmlId,\n  isAnonymousForwardsChat,\n  isChatChannel,\n  isChatGroup,\n  isSystemBot,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectChat,\n  selectChatFullInfo,\n  selectChatLastMessage,\n  selectChatMessages,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectIsInSelectMode,\n  selectIsViewportNewest,\n  selectLastScrollOffset,\n  selectPerformanceSettingsValue,\n  selectScrollOffset,\n  selectTabState,\n  selectThreadInfo,\n  selectTopic,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport animateScroll, { isAnimatingScroll, restartCurrentScrollAnimation } from '../../util/animateScroll';\nimport buildClassName from '../../util/buildClassName';\nimport { orderBy } from '../../util/iteratees';\nimport { isLocalMessageId } from '../../util/keys/messageKey';\nimport resetScroll from '../../util/resetScroll';\nimport { debounce, onTickEnd } from '../../util/schedulers';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport { useStateRef } from '../../hooks/useStateRef';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport { isBackgroundModeActive } from '../../hooks/window/useBackgroundMode';\nimport useContainerHeight from './hooks/useContainerHeight';\nimport useStickyDates from './hooks/useStickyDates';\n\nimport Loading from '../ui/Loading';\nimport ContactGreeting from './ContactGreeting';\nimport MessageListBotInfo from './MessageListBotInfo';\nimport MessageListContent from './MessageListContent';\nimport NoMessages from './NoMessages';\nimport PremiumRequiredMessage from './PremiumRequiredMessage';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  type: MessageListType;\n  isComments?: boolean;\n  canPost: boolean;\n  isReady: boolean;\n  onScrollDownToggle: BooleanToVoidFunction;\n  onNotchToggle: BooleanToVoidFunction;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n  onIntersectPinnedMessage: OnIntersectPinnedMessage;\n  isContactRequirePremium?: boolean;\n};\n\ntype StateProps = {\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isSystemBotChat?: boolean;\n  isAnonymousForwards?: boolean;\n  isCreator?: boolean;\n  isChannelWithAvatars?: boolean;\n  isBot?: boolean;\n  isSynced?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  lastMessage?: ApiMessage;\n  hasLinkedChat?: boolean;\n  topic?: ApiTopic;\n  noMessageSendingAnimation?: boolean;\n  isServiceNotificationsChat?: boolean;\n  isEmptyThread?: boolean;\n  isForum?: boolean;\n  currentUserId: string;\n  areAdsEnabled?: boolean;\n  channelJoinInfo?: ApiChatFullInfo['joinInfo'];\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 20 * 1000;\nconst MESSAGE_FACT_CHECK_UPDATE_INTERVAL = 5 * 1000;\nconst MESSAGE_STORY_POLLING_INTERVAL = 5 * 60 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  isChatLoaded,\n  isForum,\n  isChannelChat,\n  isGroupChat,\n  isChannelWithAvatars,\n  canPost,\n  isSynced,\n  isReady,\n  isChatWithSelf,\n  isSystemBotChat,\n  isAnonymousForwards,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  isRestricted,\n  restrictionReason,\n  isEmptyThread,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  hasLinkedChat,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n  noMessageSendingAnimation,\n  isServiceNotificationsChat,\n  currentUserId,\n  isContactRequirePremium,\n  areAdsEnabled,\n  channelJoinInfo,\n  onIntersectPinnedMessage,\n  onScrollDownToggle,\n  onNotchToggle,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews, loadPeerStoriesByIds, loadFactChecks,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>(\n    (type === 'thread' && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0,\n  );\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n  const hasOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (areAdsEnabled && isChannelChat && isSynced && isReady) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [chatId, isSynced, isReady, isChannelChat, areAdsEnabled]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds?.length || !messagesById) {\n      return undefined;\n    }\n\n    const listedMessages: ApiMessage[] = [];\n    messageIds.forEach((id, index, arr) => {\n      const prevMessage = listedMessages[listedMessages.length - 1];\n\n      const message = messagesById[id];\n      if (!message) {\n        return;\n      }\n\n      const { shouldAppendJoinMessage, shouldAppendJoinMessageAfterCurrent } = (() => {\n        if (!channelJoinInfo) return undefined;\n        if (prevMessage\n          && prevMessage.date < channelJoinInfo.joinedDate && channelJoinInfo.joinedDate <= message.date) {\n          return { shouldAppendJoinMessage: true, shouldAppendJoinMessageAfterCurrent: false };\n        }\n\n        if (index === arr.length - 1 && message.date < channelJoinInfo.joinedDate) {\n          return {\n            shouldAppendJoinMessage: true,\n            shouldAppendJoinMessageAfterCurrent: true,\n          };\n        }\n\n        return undefined;\n      })() || {};\n\n      if (shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n\n      if (shouldAppendJoinMessage) {\n        const lastMessageId = shouldAppendJoinMessageAfterCurrent ? message.id : (prevMessage?.id || (message.id - 1));\n        listedMessages.push({\n          id: generateChannelJoinMessageId(lastMessageId),\n          chatId: message.chatId,\n          date: channelJoinInfo!.joinedDate,\n          isOutgoing: false,\n          content: {\n            action: {\n              type: 'joinedChannel',\n              mediaType: 'action',\n              text: '',\n              translationValues: [],\n              targetChatId: message.chatId,\n            },\n          },\n        } satisfies ApiMessage);\n      }\n\n      if (!shouldAppendJoinMessageAfterCurrent) {\n        listedMessages.push(message);\n      }\n    });\n\n    // Service notifications have local IDs which may be not in sync with real message history\n    const orderRule: (keyof ApiMessage)[] = type === 'scheduled' || isServiceNotificationsChat\n      ? ['date', 'id']\n      : ['id'];\n\n    return listedMessages.length\n      ? groupMessages(\n        orderBy(listedMessages, orderRule),\n        memoUnreadDividerBeforeIdRef.current,\n        !isForum ? Number(threadId) : undefined,\n        isChatWithSelf,\n      )\n      : undefined;\n  }, [messageIds, messagesById, type, isServiceNotificationsChat, isForum, threadId, isChatWithSelf, channelJoinInfo]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') return;\n    if (!isChannelChat && !isGroupChat) return;\n\n    const ids = messageIds.filter((id) => {\n      const message = messagesById[id];\n      return message && message.reactions?.results.length && !message.content.action;\n    });\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || type === 'scheduled') {\n      return;\n    }\n    const storyDataList = messageIds.map((id) => messagesById[id]?.content.storyData).filter(Boolean);\n\n    if (!storyDataList.length) return;\n\n    const storiesByPeerIds = storyDataList.reduce((acc, storyData) => {\n      const { peerId, id } = storyData!;\n      if (!acc[peerId]) {\n        acc[peerId] = [];\n      }\n      acc[peerId].push(id);\n      return acc;\n    }, {} as Record<string, number[]>);\n\n    Object.entries(storiesByPeerIds).forEach(([peerId, storyIds]) => {\n      loadPeerStoriesByIds({ peerId, storyIds });\n    });\n  }, MESSAGE_STORY_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const global = getGlobal();\n    const ids = messageIds.filter((id) => selectThreadInfo(global, chatId, id)?.isCommentsInfo\n      || messagesById[id]?.viewsCount !== undefined);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL, true);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID || type === 'scheduled') {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.factCheck?.shouldFetch);\n\n    if (!ids.length) return;\n\n    loadFactChecks({ chatId, ids });\n  }, MESSAGE_FACT_CHECK_UPDATE_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const handleScroll = useLastCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      const global = getGlobal();\n\n      const isFocusing = Boolean(selectTabState(global).focusedMessage?.chatId);\n      if (!isFocusing) {\n        onIntersectPinnedMessage({ shouldCancelWaiting: true });\n      }\n\n      if (!container.parentElement) {\n        return;\n      }\n\n      scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n      if (type === 'thread') {\n        setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n      }\n    });\n  });\n\n  const [getContainerHeight, prevContainerHeightRef] = useContainerHeight(containerRef, canPost && !isSelectModeActive);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && isLocalMessageId(messageIds[messageIds.length - 1]);\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || messageIds.length === 1 || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  const rememberScrollPositionRef = useStateRef(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n  });\n\n  useSyncEffect(\n    () => forceMeasure(() => rememberScrollPositionRef.current()),\n    // This will run before modifying content and should match deps for `useLayoutEffectWithPrevDeps` below\n    [messageIds, isViewportNewest, hasTools, rememberScrollPositionRef],\n  );\n  useEffect(\n    () => rememberScrollPositionRef.current(),\n    // This is only needed to react on signal updates\n    [getContainerHeight, rememberScrollPositionRef],\n  );\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([prevMessageIds, prevIsViewportNewest]) => {\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const containerHeight = getContainerHeight();\n    const prevContainerHeight = prevContainerHeightRef.current;\n    prevContainerHeightRef.current = containerHeight;\n\n    // Skip initial resize observer callback\n    if (\n      messageIds === prevMessageIds\n      && isViewportNewest === prevIsViewportNewest\n      && containerHeight !== prevContainerHeight\n      && prevContainerHeight === undefined\n    ) {\n      return;\n    }\n\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n    const firstUnreadElement = memoFirstUnreadIdRef.current\n      ? container.querySelector<HTMLDivElement>(`#${getMessageHtmlId(memoFirstUnreadIdRef.current)}`)\n      : undefined;\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n\n    // Add extra height when few messages to allow scroll animation\n    if (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && forceMeasure(() => (\n        (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n      ))\n    ) {\n      addExtraClass(container.parentElement!, 'force-messages-scroll');\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          removeExtraClass(container.parentElement!, 'force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    requestForcedReflow(() => {\n      const { scrollTop, scrollHeight, offsetHeight } = container;\n      const scrollOffset = scrollOffsetRef.current;\n\n      let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n      if (wasMessageAdded) {\n        // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n        // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n        // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n        const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n        bottomOffset -= lastItemHeight;\n      }\n      const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n      const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n      // Animate incoming message, but if app is in background mode, scroll to the first unread\n      if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n        // Break out of `forceLayout`\n        requestMeasure(() => {\n          const shouldScrollToBottom = !isBackgroundModeActive() || !firstUnreadElement;\n\n          animateScroll(\n            container,\n            shouldScrollToBottom ? lastItemElement! : firstUnreadElement!,\n            shouldScrollToBottom ? 'end' : 'start',\n            BOTTOM_FOCUS_MARGIN,\n            undefined,\n            undefined,\n            noMessageSendingAnimation ? 0 : undefined,\n          );\n        });\n      }\n\n      const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n      if (isResized && isAnimatingScroll()) {\n        return undefined;\n      }\n\n      const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n      const unreadDivider = (\n        !anchor\n        && memoUnreadDividerBeforeIdRef.current\n        && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n      );\n\n      let newScrollTop!: number;\n      if (isAtBottom && isResized) {\n        newScrollTop = scrollHeight - offsetHeight;\n      } else if (anchor) {\n        const newAnchorTop = anchor.getBoundingClientRect().top;\n        newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n      } else if (unreadDivider) {\n        newScrollTop = Math.min(\n          unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n          scrollHeight - scrollOffset,\n        );\n      } else {\n        newScrollTop = scrollHeight - scrollOffset;\n      }\n\n      return () => {\n        resetScroll(container, Math.ceil(newScrollTop));\n        restartCurrentScrollAnimation();\n\n        scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n        if (!memoFocusingIdRef.current) {\n          isScrollTopJustUpdatedRef.current = true;\n\n          requestMeasure(() => {\n            isScrollTopJustUpdatedRef.current = false;\n          });\n        }\n\n        if (process.env.APP_ENV === 'perf') {\n          // eslint-disable-next-line no-console\n          console.timeEnd('scrollTop');\n        }\n      };\n    });\n    // This should match deps for `useSyncEffect` above\n  }, [messageIds, isViewportNewest, hasTools, getContainerHeight, prevContainerHeightRef, noMessageSendingAnimation]);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      beginHeavyAnimation(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const isPrivate = isUserId(chatId);\n  const withUsers = Boolean((!isPrivate && !isChannelChat)\n    || isChatWithSelf || isSystemBotChat || isAnonymousForwards || isChannelWithAvatars);\n  const noAvatars = Boolean(!withUsers || (isChannelChat && !isChannelWithAvatars));\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot && !isAnonymousForwards\n    && type === 'thread'\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n    hasOpenChatButton && 'saved-dialog',\n  );\n\n  const hasMessages = (messageIds && messageGroups) || lastMessage;\n\n  useEffect(() => {\n    if (hasMessages) return;\n\n    onScrollDownToggle(false);\n  }, [hasMessages, onScrollDownToggle]);\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : isContactRequirePremium && !hasMessages ? (\n        <PremiumRequiredMessage userId={chatId} />\n      ) : isBot && !hasMessages ? (\n        <MessageListBotInfo chatId={chatId} />\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting key={chatId} userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : hasMessages ? (\n        <MessageListContent\n          areAdsEnabled={areAdsEnabled}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          isSavedDialog={isSavedDialog}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          getContainerHeight={getContainerHeight}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          isEmptyThread={isEmptyThread}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          shouldRenderBotInfo={isBot}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onScrollDownToggle={onScrollDownToggle}\n          onNotchToggle={onNotchToggle}\n          onIntersectPinnedMessage={onIntersectPinnedMessage}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const currentUserId = global.currentUserId!;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return { currentUserId };\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, currentUserId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum\n      && !(messagesById && threadId && messagesById[Number(threadId)])\n    ) {\n      return { currentUserId };\n    }\n\n    const { isRestricted, restrictionReason } = chat;\n    const lastMessage = selectChatLastMessage(global, chatId, isSavedDialog ? 'saved' : 'all');\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectBot(global, chatId);\n\n    const topic = selectTopic(global, chatId, threadId);\n    const chatFullInfo = !isUserId(chatId) ? selectChatFullInfo(global, chatId) : undefined;\n    const isEmptyThread = !selectThreadInfo(global, chatId, threadId)?.messagesCount;\n\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n    const areAdsEnabled = !isCurrentUserPremium || selectUserFullInfo(global, currentUserId)?.areAdsEnabled;\n\n    return {\n      areAdsEnabled,\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isChannelWithAvatars: chat.areProfilesShown,\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isSystemBotChat: isSystemBot(chatId),\n      isAnonymousForwards: isAnonymousForwardsChat(chatId),\n      isBot: Boolean(chatBot),\n      isSynced: global.isSynced,\n      messageIds,\n      messagesById,\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      hasLinkedChat: chatFullInfo ? Boolean(chatFullInfo.linkedChatId) : undefined,\n      channelJoinInfo: chatFullInfo?.joinInfo,\n      topic,\n      noMessageSendingAnimation: !selectPerformanceSettingsValue(global, 'messageSendingAnimations'),\n      isServiceNotificationsChat: chatId === SERVICE_NOTIFICATIONS_USER_ID,\n      isForum: chat.isForum,\n      isEmptyThread,\n      currentUserId,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n\nfunction generateChannelJoinMessageId(lastMessageId: number) {\n  return lastMessageId + 10e-7; // Smaller than smallest possible id with `getNextLocalMessageId`\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\nimport { useHotkeys } from './useHotkeys';\nimport useLastCallback from './useLastCallback';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  const handleCopy = useLastCallback((e: KeyboardEvent) => {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  });\n\n  useHotkeys(useMemo(() => ({\n    'Mod+C': handleCopy,\n  }), []));\n};\n\nexport default useNativeCopySelectedMessages;\n","import { requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useLastCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      requestMutation(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      const stuckDateEl = findStuckDate(container, hasTools);\n      if (stuckDateEl) {\n        requestMutation(() => {\n          stuckDateEl.classList.add('stuck');\n        });\n      }\n\n      requestMutation(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  });\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useRef, useSignal } from '../../../lib/teact/teact';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\n\nexport default function useContainerHeight(containerRef: RefObject<HTMLDivElement>, isComposerVisible: boolean) {\n  const [getContainerHeight, setContainerHeight] = useSignal<number | undefined>();\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useLastCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  });\n\n  useResizeObserver(containerRef, handleResize);\n\n  useEffect(() => {\n    const currentNormalHeight = Number(containerRef.current!.dataset.normalHeight) || 0;\n    const containerHeight = getContainerHeight();\n\n    if (containerHeight && containerHeight > currentNormalHeight && isComposerVisible) {\n      containerRef.current!.dataset.normalHeight = String(containerHeight);\n    }\n  }, [isComposerVisible, containerRef, getContainerHeight]);\n\n  const prevContainerHeight = useRef<number>();\n\n  return [getContainerHeight, prevContainerHeight] as const;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default MessageSelectToolbarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup,\n} from '../../global/helpers';\nimport { selectChat, selectUser } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Button from '../ui/Button';\nimport Checkbox from '../ui/Checkbox';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockUser,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useOldLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  });\n\n  const handleConfirmBlock = useLastCallback(() => {\n    closeBlockUserModal();\n    blockUser({ userId: chatId });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  });\n\n  const handleCloseReportPanel = useLastCallback(() => {\n    hideChatReportPanel({ chatId });\n  });\n\n  const handleChatReportSpam = useLastCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  });\n\n  if (!settings || (!chat && !user)) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: selectUser(global, chatId),\n  }),\n)(ChatReportPanel));\n","// extracted by mini-css-extract-plugin\nexport default {\"pinned-message-border\":\"L5TQCriM\",\"pinnedMessageBorder\":\"L5TQCriM\",\"pinned-message-border-wrapper-1\":\"v5sJGzfS\",\"pinnedMessageBorderWrapper1\":\"v5sJGzfS\",\"pinned-message-border-wrapper\":\"p6PQhvds\",\"pinnedMessageBorderWrapper\":\"p6PQhvds\",\"pinned-message-border-mark\":\"M2PQZgBd\",\"pinnedMessageBorderMark\":\"M2PQZgBd\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport styles from './PinnedMessageNavigation.module.scss';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useLayoutEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className={styles.pinnedMessageBorder}>\n        <div\n          className={styles.pinnedMessageBorderWrapper1}\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName(\n      styles.pinnedMessageBorder,\n      count > BORDER_MASK_LEVEL && styles.pinnedMessageBorderMask,\n    )}\n    >\n      <div\n        className={styles.pinnedMessageBorderWrapper}\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className={styles.pinnedMessageBorderMark}\n          style={`--height: ${markHeight}px; --translate-y: ${markTranslateY}px; `\n            + `--translate-track: ${trackTranslateY}px;`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Guj4V7W_\",\"pinnedMessage\":\"GgG7nh8p\",\"messageText\":\"LPdDfCw0\",\"loading\":\"clu9vjEC\",\"pinListIcon\":\"OibpUlOd\",\"pinListIconHidden\":\"_f3hwC8p\",\"no-hover\":\"Nki3ifmz\",\"noHover\":\"Nki3ifmz\",\"messageTextTransition\":\"lo853Tki\",\"withMedia\":\"hRtSF_Ex\",\"title\":\"bY9umAoY\",\"summary\":\"Ko14czNN\",\"inlineButton\":\"lfWlkB7k\",\"pictogramTransition\":\"ud4LJMTI\",\"pinnedThumb\":\"_M8tJtJD\",\"pinnedThumbImage\":\"KKUhI313\",\"fade-in\":\"cq06IGIL\",\"fadeIn\":\"cq06IGIL\"};","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { Signal } from '../../util/signals';\n\nimport { getMessageIsSpoiler, getMessageMediaHash, getMessageSingleInlineButton } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport { getPictogramDimensions, REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport renderKeyboardButtonText from './composer/helpers/renderKeyboardButtonText';\n\nimport useDerivedState from '../../hooks/useDerivedState';\nimport { useFastClick } from '../../hooks/useFastClick';\nimport useFlag from '../../hooks/useFlag';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useAsyncRendering from '../right/hooks/useAsyncRendering';\n\nimport AnimatedCounter from '../common/AnimatedCounter';\nimport MediaSpoiler from '../common/MediaSpoiler';\nimport MessageSummary from '../common/MessageSummary';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport RippleEffect from '../ui/RippleEffect';\nimport Spinner from '../ui/Spinner';\nimport Transition from '../ui/Transition';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\n\nimport styles from './HeaderPinnedMessage.module.scss';\n\nconst SHOW_LOADER_DELAY = 450;\nconst EMOJI_SIZE = 1.125 * REM;\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onAllPinnedClick?: () => void;\n  getLoadingPinnedId: Signal<number | undefined>;\n  isFullWidth?: boolean;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n  getLoadingPinnedId, isFullWidth,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useOldLang();\n\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const isLoading = Boolean(useDerivedState(getLoadingPinnedId));\n  const canRenderLoader = useAsyncRendering([isLoading], SHOW_LOADER_DELAY);\n  const shouldShowLoader = canRenderLoader && isLoading;\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useLastCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  });\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useLastCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ chatId: message.chatId, messageId: message.id, button: inlineButton });\n    }\n  });\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  const { handleClick, handleMouseDown } = useFastClick(onClick);\n\n  function renderPictogram(thumbDataUri?: string, blobUrl?: string, spoiler?: boolean) {\n    const { width, height } = getPictogramDimensions();\n    const srcUrl = blobUrl || thumbDataUri;\n\n    return (\n      <div className={styles.pinnedThumb}>\n        {thumbDataUri && !spoiler && (\n          <img\n            className={styles.pinnedThumbImage}\n            src={srcUrl}\n            width={width}\n            height={height}\n            alt=\"\"\n            draggable={false}\n          />\n        )}\n        {thumbDataUri\n          && <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(spoiler)} width={width} height={height} />}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(\n      'HeaderPinnedMessageWrapper', styles.root, isFullWidth && 'full-width', className,\n    )}\n    >\n      {(count > 1 || shouldShowLoader) && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={!shouldShowLoader ? onAllPinnedClick : undefined}\n        >\n          {isLoading && (\n            <Spinner\n              color=\"blue\"\n              className={buildClassName(\n                styles.loading, styles.pinListIcon, !shouldShowLoader && styles.pinListIconHidden,\n              )}\n            />\n          )}\n          <i\n            className={buildClassName(\n              'icon', 'icon-pin-list', styles.pinListIcon, shouldShowLoader && styles.pinListIconHidden,\n            )}\n          />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName(styles.pinnedMessage, noHoverColor && styles.noHover)}\n        onClick={handleClick}\n        onMouseDown={handleMouseDown}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        <Transition activeKey={message.id} name=\"slideVertical\" className={styles.pictogramTransition}>\n          {renderPictogram(\n            mediaThumbnail,\n            mediaBlobUrl,\n            isSpoiler,\n          )}\n        </Transition>\n        <div\n          className={buildClassName(styles.messageText, mediaThumbnail && styles.withMedia)}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        >\n          <div className={styles.title} dir={lang.isRtl ? 'rtl' : undefined}>\n            {!customTitle && (\n              <AnimatedCounter text={`${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`} />\n            )}\n\n            {customTitle && renderText(customTitle)}\n          </div>\n          <Transition activeKey={message.id} name=\"slideVerticalFade\" className={styles.messageTextTransition}>\n            <p dir=\"auto\" className={styles.summary}>\n              <MessageSummary\n                message={message}\n                noEmoji={Boolean(mediaThumbnail)}\n                emojiSize={EMOJI_SIZE}\n              />\n            </p>\n          </Transition>\n        </div>\n        <RippleEffect />\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className={styles.inlineButton}\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {renderKeyboardButtonText(lang, inlineButton)}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(HeaderPinnedMessage);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiMessage, ApiPeer, ApiSticker, ApiTypingStatus,\n} from '../../api/types';\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type { Signal } from '../../util/signals';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { StoryViewerOrigin, type ThreadId } from '../../types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport { requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getChatTitle,\n  getIsSavedDialog,\n  getSenderTitle,\n  isChatChannel,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActionsSlow,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMiddleSearch,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectTabState,\n  selectThreadInfo,\n  selectThreadParam,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport cycleRestrict from '../../util/cycleRestrict';\nimport { getMessageKey } from '../../util/keys/messageKey';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../hooks/useDerivedState';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLongPress from '../../hooks/useLongPress';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport AudioPlayer from './AudioPlayer';\nimport ChatReportPanel from './ChatReportPanel';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\nconst SEARCH_LONGTAP_THRESHOLD = 500;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: ThreadId;\n  messageListType: MessageListType;\n  isComments?: boolean;\n  isReady?: boolean;\n  isMobile?: boolean;\n  getCurrentPinnedIndex: Signal<number>;\n  getLoadingPinnedId: Signal<number | undefined>;\n  onFocusPinnedMessage: (messageId: number) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  isSavedDialog?: boolean;\n  topMessageSender?: ApiPeer;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isChatWithSelf?: boolean;\n  hasButtonInHeader?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: boolean;\n  isSynced?: boolean;\n  isFetchingDifference?: boolean;\n  emojiStatusSticker?: ApiSticker;\n  isMiddleSearchOpen?: boolean;\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  isSyncing,\n  isSynced,\n  isFetchingDifference,\n  getCurrentPinnedIndex,\n  getLoadingPinnedId,\n  emojiStatusSticker,\n  isSavedDialog,\n  isMiddleSearchOpen,\n  onFocusPinnedMessage,\n}) => {\n  const {\n    openThreadWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n    openPremiumModal,\n    openThread,\n    openStickerSet,\n    updateMiddleSearch,\n  } = getActions();\n\n  const lang = useOldLang();\n  const isBackButtonActive = useRef(true);\n  const { isTablet } = useAppLayout();\n\n  const currentPinnedIndex = useDerivedState(getCurrentPinnedIndex);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[currentPinnedIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (isSynced && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, threadId, isSynced, isReady, isForum]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleOpenSearch = useLastCallback(() => {\n    updateMiddleSearch({ chatId, threadId, update: {} });\n  });\n\n  const handleOpenChat = useLastCallback((event: React.MouseEvent | React.TouchEvent) => {\n    if ((event.target as Element).closest('.title > .custom-emoji')) return;\n\n    openThreadWithInfo({ chatId, threadId });\n  });\n\n  const {\n    onMouseDown: handleLongPressMouseDown,\n    onMouseUp: handleLongPressMouseUp,\n    onMouseLeave: handleLongPressMouseLeave,\n    onTouchStart: handleLongPressTouchStart,\n    onTouchEnd: handleLongPressTouchEnd,\n  } = useLongPress({\n    onStart: handleOpenSearch,\n    onClick: handleOpenChat,\n    threshold: SEARCH_LONGTAP_THRESHOLD,\n  });\n\n  const handleUnpinMessage = useLastCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  });\n\n  const handlePinnedMessageClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>): void => {\n    const messageId = e.shiftKey && Array.isArray(pinnedMessageIds)\n      ? pinnedMessageIds[cycleRestrict(pinnedMessageIds.length, pinnedMessageIds.indexOf(pinnedMessageId!) - 2)]\n      : pinnedMessageId!;\n\n    if (!getLoadingPinnedId()) {\n      focusMessage({\n        chatId, threadId, messageId, noForumTopicPanel: true,\n      });\n      onFocusPinnedMessage(messageId);\n    }\n  });\n\n  const handleAllPinnedClick = useLastCallback(() => {\n    openThread({ chatId, threadId, type: 'pinned' });\n  });\n\n  const setBackButtonActive = useLastCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  });\n\n  const handleUserStatusClick = useLastCallback(() => {\n    openPremiumModal({ fromUserId: chatId });\n  });\n\n  const handleChannelStatusClick = useLastCallback(() => {\n    openStickerSet({\n      stickerSetInfo: emojiStatusSticker!.stickerSetInfo,\n    });\n  });\n\n  const handleBackClick = useLastCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  });\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransitionDeprecated(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransitionDeprecated(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransitionDeprecated(Boolean(pinnedMessage) && !isMiddleSearchOpen, undefined, true);\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useLayoutEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        requestMutation(() => {\n          componentEl.classList.remove('animated');\n        });\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing || isFetchingDifference, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || isSavedDialog || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              (messagesCount\n                ? lang(isComments ? 'Comments' : 'Replies', messagesCount, 'i')\n                : lang(isComments ? 'CommentsTitle' : 'RepliesTitle')))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    // TODO Implement count\n    const savedMessagesStatus = isSavedDialog ? lang('SavedMessages') : undefined;\n\n    const realChatId = isSavedDialog ? String(threadId) : chatId;\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, !isSavedDialog)}\n        <div\n          className=\"chat-info-wrapper\"\n          onMouseDown={handleLongPressMouseDown}\n          onMouseUp={handleLongPressMouseUp}\n          onMouseLeave={handleLongPressMouseLeave}\n          onTouchStart={handleLongPressTouchStart}\n          onTouchEnd={handleLongPressTouchEnd}\n        >\n          {isUserId(realChatId) ? (\n            <PrivateChatInfo\n              key={realChatId}\n              userId={realChatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withStory={!isChatWithSelf}\n              withUpdatingStatus\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n              onEmojiStatusClick={handleUserStatusClick}\n            />\n          ) : (\n            <GroupChatInfo\n              key={realChatId}\n              chatId={realChatId}\n              threadId={!isSavedDialog ? threadId : undefined}\n              typingStatus={typingStatus}\n              status={connectionStatusText || savedMessagesStatus}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withStory\n              isSavedDialog={isSavedDialog}\n              storyViewerOrigin={StoryViewerOrigin.MiddleHeaderAvatar}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              onEmojiStatusClick={handleChannelStatusClick}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  useElectronDrag(componentRef);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slideFade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n            || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={currentPinnedIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={pinnedMessageClassNames}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n          getLoadingPinnedId={getLoadingPinnedId}\n          isFullWidth={isPinnedMessagesFullWidth}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n\n    const emojiStatus = chat?.emojiStatus;\n    const emojiStatusSticker = emojiStatus && global.customEmojis.byId[emojiStatus.documentId];\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const isMiddleSearchOpen = Boolean(selectCurrentMiddleSearch(global));\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      isSynced: global.isSynced,\n      isFetchingDifference: global.isFetchingDifference,\n      emojiStatusSticker,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      isSavedDialog,\n      isMiddleSearchOpen,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    if (threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum) {\n      const pinnedMessageId = Number(threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        messagesById,\n        canUnpin: false,\n        topMessageSender,\n      };\n    }\n\n    const pinnedMessageIds = !isSavedDialog ? selectPinnedIds(global, chatId, threadId) : undefined;\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin = false,\n      } = (\n        firstPinnedMessage\n        && pinnedMessageIds.length === 1\n        && selectAllowedMessageActionsSlow(global, firstPinnedMessage, threadId)\n      ) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        messagesById,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { getUserFirstOrLastName } from '../../global/helpers';\nimport { selectUser } from '../../global/selectors';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Link from '../ui/Link';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  userName?: string;\n};\n\nfunction PremiumRequiredPlaceholder({ userName }: StateProps) {\n  const lang = useOldLang();\n  const { openPremiumModal } = getActions();\n\n  const handleOpenPremiumModal = useLastCallback(() => openPremiumModal());\n\n  return (\n    <div>\n      <div>{lang('Chat.MessagingRestrictedPlaceholder', userName)}</div>\n      <Link isPrimary onClick={handleOpenPremiumModal}>{lang('Chat.MessagingRestrictedPlaceholderAction')}</Link>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      userName: getUserFirstOrLastName(user),\n    };\n  },\n)(PremiumRequiredPlaceholder));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReactorListModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default ReactorListModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MiddleSearch';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MiddleSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MiddleSearch = useModuleLoader(Bundles.Extra, 'MiddleSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MiddleSearch ? <MiddleSearch {...props} /> : undefined;\n};\n\nexport default MiddleSearchAsync;\n","import React, {\n  memo, useEffect, useMemo,\n  useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatBannedRights, ApiInputMessageReplyInfo, ApiTopic,\n} from '../../api/types';\nimport type {\n  ActiveEmojiInteraction,\n  MessageListType,\n} from '../../global/types';\nimport type { ThemeKey, ThreadId } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  ANIMATION_END_DELAY,\n  ANONYMOUS_USER_ID,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  EDITABLE_INPUT_ID,\n  GENERAL_TOPIC_ID,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SUPPORTED_PHOTO_CONTENT_TYPES,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { requestMeasure, requestMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  getCanPostInChat,\n  getForumComposerPlaceholder,\n  getHasAdminRight,\n  getIsSavedDialog,\n  getMessageSendingRestrictionReason,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectBot,\n  selectCanAnimateInterface,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectCurrentMiddleSearch,\n  selectDraft,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectTabState,\n  selectTheme,\n  selectThreadInfo,\n  selectTopic,\n  selectTopics,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport buildStyle from '../../util/buildStyle';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  IS_ANDROID, IS_ELECTRON, IS_IOS, IS_TRANSLATION_SUPPORTED, MASK_IMAGE_DISABLED,\n} from '../../util/windowEnvironment';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\nimport { useResize } from '../../hooks/useResize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useWindowSize from '../../hooks/window/useWindowSize';\nimport usePinnedMessage from './hooks/usePinnedMessage';\n\nimport Composer from '../common/Composer';\nimport PrivacySettingsNoticeModal from '../common/PrivacySettingsNoticeModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ChatLanguageModal from './ChatLanguageModal.async';\nimport { DropAreaState } from './composer/DropArea';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport MessageList from './MessageList';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport MiddleHeader from './MiddleHeader';\nimport PremiumRequiredPlaceholder from './PremiumRequiredPlaceholder';\nimport ReactorListModal from './ReactorListModal.async';\nimport MiddleSearch from './search/MiddleSearch.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  leftColumnRef: React.RefObject<HTMLDivElement>;\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isComments?: boolean;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  draftReplyInfo?: ApiInputMessageReplyInfo;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  hasButtonInHeader?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  leftColumnWidth?: number;\n  hasActiveMiddleSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isPrivacySettingsNoticeModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isChatLanguageModalOpen?: boolean;\n  withInterfaceAnimations?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  pinnedIds?: number[];\n  canUnpin?: boolean;\n  canUnblock?: boolean;\n  isSavedDialog?: boolean;\n  canShowOpenChatButton?: boolean;\n  isContactRequirePremium?: boolean;\n  topics?: Record<number, ApiTopic>;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_PHOTO_CONTENT_TYPES.has(item.type);\n}\n\nconst LAYER_ANIMATION_DURATION_MS = 450 + ANIMATION_END_DELAY;\n\nfunction MiddleColumn({\n  leftColumnRef,\n  chatId,\n  threadId,\n  isComments,\n  messageListType,\n  isMobile,\n  chat,\n  draftReplyInfo,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  hasButtonInHeader,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  leftColumnWidth,\n  hasActiveMiddleSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isPrivacySettingsNoticeModalOpen,\n  isReactorListModalOpen,\n  isChatLanguageModalOpen,\n  withInterfaceAnimations,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  pinnedIds,\n  canUnpin,\n  canUnblock,\n  isSavedDialog,\n  canShowOpenChatButton,\n  isContactRequirePremium,\n  topics,\n}: OwnProps & StateProps) {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    unblockUser,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet, isDesktop } = useAppLayout();\n\n  const lang = useOldLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isScrollDownNeeded, setIsScrollDownShown] = useState(false);\n  const isScrollDownShown = isScrollDownNeeded && (!isMobile || !hasActiveMiddleSearch);\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const {\n    handleIntersectPinnedMessage,\n    handleFocusPinnedMessage,\n    getCurrentPinnedIndex,\n    getLoadingPinnedId,\n  } = usePinnedMessage(chatId, threadId, pinnedIds);\n\n  const closeAnimationDuration = isMobile ? LAYER_ANIMATION_DURATION_MS : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || hasAudioPlayer\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    )\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES)\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanUnblock = usePrevDuringAnimation(canUnblock, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && !renderingCanUnblock\n    && chatId !== TMP_CHAT_ID && !isContactRequirePremium;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsScrollDownShown = usePrevDuringAnimation(\n    isScrollDownShown, closeAnimationDuration,\n  ) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n  const renderingHandleIntersectPinnedMessage = usePrevDuringAnimation(\n    chatId ? handleIntersectPinnedMessage : undefined,\n    closeAnimationDuration,\n  );\n\n  const prevTransitionKey = usePreviousDeprecated(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleCssTransitionEnd, handleSlideTransitionStop } = useIsReady(\n    !shouldSkipHistoryAnimations && withInterfaceAnimations,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    if (!IS_IOS && !IS_ANDROID) {\n      return undefined;\n    }\n\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      const isFixNeeded = visualViewport.height !== document.documentElement.clientHeight;\n\n      requestMutation(() => {\n        document.body.classList.toggle('keyboard-visible', isFixNeeded);\n\n        requestMeasure(() => {\n          if (!isFixNeeded && visualViewport.offsetTop) {\n            requestMutation(() => {\n              window.scrollTo({ top: 0 });\n            });\n          }\n        });\n      });\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  });\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(leftColumnRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleDragEnter = useLastCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  });\n\n  const handleHideDropArea = useLastCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  });\n\n  const handleOpenUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(true);\n  });\n\n  const closeUnpinModal = useLastCallback(() => {\n    setIsUnpinModalOpen(false);\n  });\n\n  const handleOpenChatFromSaved = useLastCallback(() => {\n    openChat({ id: String(threadId) });\n  });\n\n  const handleUnpinAllMessages = useLastCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  });\n\n  const handleTabletFocus = useLastCallback(() => {\n    openChat({ id: chatId });\n  });\n\n  const handleSubscribeClick = useLastCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  });\n\n  const handleStartBot = useLastCallback(() => {\n    sendBotCommand({ command: '/start' });\n  });\n\n  const handleRestartBot = useLastCallback(() => {\n    restartBot({ chatId: chatId! });\n  });\n\n  const handleUnblock = useLastCallback(() => {\n    unblockUser({ userId: chatId! });\n  });\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n    IS_ELECTRON && !(renderingChatId && renderingThreadId) && styles.draggable,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, topics, Boolean(draftReplyInfo));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason\n    ?? forumComposerPlaceholder\n    ?? (isContactRequirePremium ? <PremiumRequiredPlaceholder userId={chatId!} /> : undefined);\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !isSavedDialog && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || (isPinnedMessageList && canUnpin) || canShowOpenChatButton || renderingCanUnblock,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleCssTransitionEnd}\n      style={buildStyle(\n        `--composer-hidden-scale: ${composerHiddenScale}`,\n        `--toolbar-hidden-scale: ${toolbarHiddenScale}`,\n        `--unpin-hidden-scale: ${unpinHiddenScale}`,\n        `--toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale},`,\n        `--composer-translate-x: ${composerTranslateX}px`,\n        `--toolbar-translate-x: ${toolbarTranslateX}px`,\n        `--pattern-color: ${patternColor}`,\n        backgroundColor && `--theme-background-color: ${backgroundColor}`,\n      )}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      {isDesktop && (\n        <div\n          className=\"resize-handle\"\n          onMouseDown={initResize}\n          onMouseUp={handleMouseUp}\n          onDoubleClick={resetResize}\n        />\n      )}\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {Boolean(renderingChatId && renderingThreadId) && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId!}\n              threadId={renderingThreadId!}\n              messageListType={renderingMessageListType!}\n              isComments={isComments}\n              isReady={isReady}\n              isMobile={isMobile}\n              getCurrentPinnedIndex={getCurrentPinnedIndex}\n              getLoadingPinnedId={getLoadingPinnedId}\n              onFocusPinnedMessage={handleFocusPinnedMessage}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : withInterfaceAnimations ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              isBlockingAnimation\n              onStop={handleSlideTransitionStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId!}\n                threadId={renderingThreadId!}\n                type={renderingMessageListType!}\n                isComments={isComments}\n                canPost={renderingCanPost!}\n                hasTools={renderingHasTools}\n                onScrollDownToggle={setIsScrollDownShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                isContactRequirePremium={isContactRequirePremium}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n                onIntersectPinnedMessage={renderingHandleIntersectPinnedMessage!}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    type=\"messageList\"\n                    chatId={renderingChatId!}\n                    threadId={renderingThreadId!}\n                    messageListType={renderingMessageListType!}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                    editableInputId={EDITABLE_INPUT_ID}\n                    editableInputCssSelector={EDITABLE_INPUT_CSS_SELECTOR}\n                    inputId=\"message-input-text\"\n                  />\n                )}\n                {isPinnedMessageList && canUnpin && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {canShowOpenChatButton && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"composer-button open-chat-button\"\n                      onClick={handleOpenChatFromSaved}\n                    >\n                      <span>{lang('SavedOpenChat')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {(\n                  isMobile && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest))\n                ) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanUnblock && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"composer-button join-subscribe-button\"\n                      onClick={handleUnblock}\n                    >\n                      {lang('Unblock')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <PrivacySettingsNoticeModal isOpen={isPrivacySettingsNoticeModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                {IS_TRANSLATION_SUPPORTED && <ChatLanguageModal isOpen={isChatLanguageModalOpen} />}\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              withScrollDown={renderingIsScrollDownShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          <MiddleSearch isActive={Boolean(hasActiveMiddleSearch)} />\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      chatLanguageModal, privacySettingsNoticeModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { leftColumnWidth } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasActiveMiddleSearch: Boolean(selectCurrentMiddleSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isPrivacySettingsNoticeModalOpen: Boolean(privacySettingsNoticeModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isChatLanguageModalOpen: Boolean(chatLanguageModal),\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      leftColumnWidth,\n    };\n\n    if (!currentMessageList) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isMessageThread = Boolean(!threadInfo?.isCommentsInfo && threadInfo?.fromChannelId);\n    const topic = selectTopic(global, chatId, threadId);\n    const canPost = chat && getCanPostInChat(chat, topic, isMessageThread, chatFullInfo);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const isUserBlocked = isPrivate ? selectIsUserBlocked(global, chatId) : false;\n    const canRestartBot = Boolean(bot && isUserBlocked);\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const canUnblock = isUserBlocked && !bot;\n    const shouldLoadFullChat = Boolean(\n      chat && isChatGroup(chat) && !chatFullInfo,\n    );\n    const draftReplyInfo = selectDraft(global, chatId, threadId)?.replyInfo;\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !draftReplyInfo && (selectTopic(global, chatId, GENERAL_TOPIC_ID)?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const topics = selectTopics(global, chatId);\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n    const canShowOpenChatButton = isSavedDialog && threadId !== ANONYMOUS_USER_ID;\n\n    const isCommentThread = threadId !== MAIN_THREAD_ID && !isSavedDialog && !chat?.isForum;\n\n    const canUnpin = chat && (\n      isPrivate || (\n        chat?.isCreator || (!isChannel && !isUserRightBanned(chat, 'pinMessages'))\n          || getHasAdminRight(chat, 'pinMessages')\n      )\n    );\n\n    const isContactRequirePremium = selectUserFullInfo(global, chatId)?.isContactRequirePremium;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      draftReplyInfo,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      isComments: isMessageThread,\n      canPost:\n        !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum\n        && !isSavedDialog,\n      isPinnedMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: isCommentThread || Boolean(!isPinnedMessageList && pinnedIds?.length),\n      hasAudioPlayer: Boolean(audioMessage),\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n      pinnedIds,\n      canUnpin,\n      canUnblock,\n      isSavedDialog,\n      canShowOpenChatButton,\n      isContactRequirePremium,\n      topics,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n\n      // Make sure to end even if end callback was not called (which was some hardly-reproducible bug)\n      setTimeout(() => {\n        setIsReady(true);\n      }, LAYER_ANIMATION_DURATION_MS);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleCssTransitionEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideTransitionStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleCssTransitionEnd: withAnimations ? handleCssTransitionEnd : undefined,\n    handleSlideTransitionStop: withAnimations ? handleSlideTransitionStop : undefined,\n  };\n}\n","import type { RefObject } from 'react';\nimport { useEffect, useLayoutEffect, useState } from '../lib/teact/teact';\n\nimport { requestMutation } from '../lib/fasterdom/fasterdom';\nimport useFlag from './useFlag';\nimport useLastCallback from './useLastCallback';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>(0);\n  const [initialElementWidth, setInitialElementWidth] = useState<number>(0);\n\n  const setElementStyle = useLastCallback((width?: number) => {\n    requestMutation(() => {\n      if (!elementRef.current) {\n        return;\n      }\n\n      const widthPx = width ? `${width}px` : '';\n      elementRef.current.style.width = widthPx;\n      if (cssPropertyName) {\n        elementRef.current.style.setProperty(cssPropertyName, widthPx);\n      }\n    });\n  });\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    requestMutation(() => {\n      document.body.classList.remove('cursor-ew-resize');\n    });\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    requestMutation(() => {\n      document.body.classList.add('cursor-ew-resize');\n    });\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\nimport { getActions } from '../global';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME, DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const { setThemeSettings } = getActions();\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        })\n        .catch(() => {\n          setThemeSettings({\n            theme,\n            background: undefined,\n            backgroundColor: undefined,\n            isBlurred: true,\n            patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n          });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"C6IaXYew\",\"customBgImage\":\"K1xhz7U5\",\"customBgColor\":\"CwoXMwaR\",\"withTransition\":\"nXhZtCma\",\"draggable\":\"jMpPshUt\",\"blurred\":\"JBrOVLsX\",\"withRightColumn\":\"Lyw3O8XE\"};","import React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { pick } from '../../util/iteratees';\n\nimport AttachBotInstallModal from './attachBotInstall/AttachBotInstallModal.async';\nimport BoostModal from './boost/BoostModal.async';\nimport ChatInviteModal from './chatInvite/ChatInviteModal.async';\nimport ChatlistModal from './chatlist/ChatlistModal.async';\nimport CollectibleInfoModal from './collectible/CollectibleInfoModal.async';\nimport PremiumGiftModal from './gift/GiftModal.async';\nimport GiftInfoModal from './gift/info/GiftInfoModal.async';\nimport GiftRecipientPicker from './gift/recipient/GiftRecipientPicker.async';\nimport GiftCodeModal from './giftcode/GiftCodeModal.async';\nimport InviteViaLinkModal from './inviteViaLink/InviteViaLinkModal.async';\nimport MapModal from './map/MapModal.async';\nimport OneTimeMediaModal from './oneTimeMedia/OneTimeMediaModal.async';\nimport PaidReactionModal from './paidReaction/PaidReactionModal.async';\nimport ReportAdModal from './reportAd/ReportAdModal.async';\nimport ReportModal from './reportModal/ReportModal.async';\nimport StarsGiftModal from './stars/gift/StarsGiftModal.async';\nimport StarsBalanceModal from './stars/StarsBalanceModal.async';\nimport StarsPaymentModal from './stars/StarsPaymentModal.async';\nimport StarsSubscriptionModal from './stars/subscription/StarsSubscriptionModal.async';\nimport StarsTransactionInfoModal from './stars/transaction/StarsTransactionModal.async';\nimport UrlAuthModal from './urlAuth/UrlAuthModal.async';\nimport WebAppModal from './webApp/WebAppModal.async';\n\n// `Pick` used only to provide tab completion\ntype ModalKey = keyof Pick<TabState,\n'giftCodeModal' |\n'boostModal' |\n'chatlistModal' |\n'urlAuth' |\n'mapModal' |\n'oneTimeMediaModal' |\n'inviteViaLinkModal' |\n'requestedAttachBotInstall' |\n'collectibleInfoModal' |\n'reportAdModal' |\n'reportModal' |\n'starsBalanceModal' |\n'starsPayment' |\n'starsTransactionModal' |\n'paidReactionModal' |\n'webApps' |\n'starsTransactionModal' |\n'chatInviteModal' |\n'starsSubscriptionModal' |\n'starsGiftModal' |\n'giftModal' |\n'isGiftRecipientPickerOpen' |\n'giftInfoModal'\n>;\n\ntype StateProps = {\n  [K in ModalKey]?: TabState[K];\n};\ntype ModalRegistry = {\n  [K in ModalKey]: React.FC<{\n    modal: TabState[K];\n  }>;\n};\ntype Entries<T> = {\n  [K in keyof T]: [K, T[K]];\n}[keyof T][];\n\nconst MODALS: ModalRegistry = {\n  giftCodeModal: GiftCodeModal,\n  boostModal: BoostModal,\n  chatlistModal: ChatlistModal,\n  urlAuth: UrlAuthModal,\n  oneTimeMediaModal: OneTimeMediaModal,\n  inviteViaLinkModal: InviteViaLinkModal,\n  requestedAttachBotInstall: AttachBotInstallModal,\n  reportAdModal: ReportAdModal,\n  reportModal: ReportModal,\n  webApps: WebAppModal,\n  collectibleInfoModal: CollectibleInfoModal,\n  mapModal: MapModal,\n  starsPayment: StarsPaymentModal,\n  starsBalanceModal: StarsBalanceModal,\n  starsTransactionModal: StarsTransactionInfoModal,\n  chatInviteModal: ChatInviteModal,\n  paidReactionModal: PaidReactionModal,\n  starsSubscriptionModal: StarsSubscriptionModal,\n  starsGiftModal: StarsGiftModal,\n  giftModal: PremiumGiftModal,\n  isGiftRecipientPickerOpen: GiftRecipientPicker,\n  giftInfoModal: GiftInfoModal,\n};\nconst MODAL_KEYS = Object.keys(MODALS) as ModalKey[];\nconst MODAL_ENTRIES = Object.entries(MODALS) as Entries<ModalRegistry>;\n\nconst ModalContainer = (modalProps: StateProps) => {\n  return MODAL_ENTRIES.map(([key, ModalComponent]) => (\n    // @ts-ignore -- TS does not preserve tuple types in `map` callbacks\n    <ModalComponent key={key} modal={modalProps[key]} />\n  ));\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => (\n    pick(selectTabState(global), MODAL_KEYS)\n  ),\n)(ModalContainer));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftCodeModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftCodeModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftCodeModal = useModuleLoader(Bundles.Extra, 'GiftCodeModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftCodeModal ? <GiftCodeModal {...props} /> : undefined;\n};\n\nexport default GiftCodeModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './BoostModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BoostModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const BoostModal = useModuleLoader(Bundles.Extra, 'BoostModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BoostModal ? <BoostModal {...props} /> : undefined;\n};\n\nexport default BoostModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatlistModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatlistModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatlistModal = useModuleLoader(Bundles.Extra, 'ChatlistModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatlistModal ? <ChatlistModal {...props} /> : undefined;\n};\n\nexport default ChatlistModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './UrlAuthModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default UrlAuthModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './OneTimeMediaModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst OneTimeMediaModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const OneTimeMediaModal = useModuleLoader(Bundles.Extra, 'OneTimeMediaModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return OneTimeMediaModal ? <OneTimeMediaModal {...props} /> : undefined;\n};\n\nexport default OneTimeMediaModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './InviteViaLinkModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InviteViaLinkModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const InviteViaLinkModal = useModuleLoader(Bundles.Extra, 'InviteViaLinkModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InviteViaLinkModal ? <InviteViaLinkModal {...props} /> : undefined;\n};\n\nexport default InviteViaLinkModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default AttachBotInstallModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportAdModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportAdModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportAdModal = useModuleLoader(Bundles.Extra, 'ReportAdModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportAdModal ? <ReportAdModal {...props} /> : undefined;\n};\n\nexport default ReportAdModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ReportModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ReportModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ReportModal = useModuleLoader(Bundles.Extra, 'ReportModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReportModal ? <ReportModal {...props} /> : undefined;\n};\n\nexport default ReportModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default WebAppModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './CollectibleInfoModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst CollectibleInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const CollectibleInfoModal = useModuleLoader(Bundles.Extra, 'CollectibleInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CollectibleInfoModal ? <CollectibleInfoModal {...props} /> : undefined;\n};\n\nexport default CollectibleInfoModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MapModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MapModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const MapModal = useModuleLoader(Bundles.Extra, 'MapModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MapModal ? <MapModal {...props} /> : undefined;\n};\n\nexport default MapModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsPaymentModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarPaymentModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarPaymentModal = useModuleLoader(Bundles.Stars, 'StarPaymentModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarPaymentModal ? <StarPaymentModal {...props} /> : undefined;\n};\n\nexport default StarPaymentModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsBalanceModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsBalanceModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsBalanceModal = useModuleLoader(Bundles.Stars, 'StarsBalanceModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsBalanceModal ? <StarsBalanceModal {...props} /> : undefined;\n};\n\nexport default StarsBalanceModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsTransactionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsTransactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsTransactionModal = useModuleLoader(Bundles.Stars, 'StarsTransactionInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsTransactionModal ? <StarsTransactionModal {...props} /> : undefined;\n};\n\nexport default StarsTransactionModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './ChatInviteModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ChatInviteModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const ChatInviteModal = useModuleLoader(Bundles.Extra, 'ChatInviteModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ChatInviteModal ? <ChatInviteModal {...props} /> : undefined;\n};\n\nexport default ChatInviteModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PaidReactionModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PaidReactionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const PaidReactionModal = useModuleLoader(Bundles.Stars, 'PaidReactionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaidReactionModal ? <PaidReactionModal {...props} /> : undefined;\n};\n\nexport default PaidReactionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsSubscriptionModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsSubscriptionModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsSubscriptionModal = useModuleLoader(Bundles.Stars, 'StarsSubscriptionModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsSubscriptionModal ? <StarsSubscriptionModal {...props} /> : undefined;\n};\n\nexport default StarsSubscriptionModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst StarsGiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const StarsGiftModal = useModuleLoader(Bundles.Stars, 'StarsGiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftModal ? <StarsGiftModal {...props} /> : undefined;\n};\n\nexport default StarsGiftModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftModal = useModuleLoader(Bundles.Stars, 'GiftModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftModal ? <GiftModal {...props} /> : undefined;\n};\n\nexport default GiftModalAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftRecipientPicker';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftRecipientPicker = useModuleLoader(Bundles.Stars, 'GiftRecipientPicker', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftRecipientPicker ? <GiftRecipientPicker {...props} /> : undefined;\n};\n\nexport default GiftRecipientPickerAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiftInfoModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst GiftInfoModalAsync: FC<OwnProps> = (props) => {\n  const { modal } = props;\n  const GiftInfoModal = useModuleLoader(Bundles.Stars, 'GiftInfoModal', !modal);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftInfoModal ? <GiftInfoModal {...props} /> : undefined;\n};\n\nexport default GiftInfoModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './PaymentModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default PaymentModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ReceiptModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default ReceiptModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport {\n  filterUsersByName, isChatChannel, isUserBot,\n} from '../../global/helpers';\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../global/selectors';\nimport { unique } from '../../util/iteratees';\nimport sortChatIds from '../common/helpers/sortChatIds';\n\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useOldLang from '../../hooks/useOldLang';\nimport usePreviousDeprecated from '../../hooks/usePreviousDeprecated';\n\nimport PeerPicker from '../common/pickers/PeerPicker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useOldLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePreviousDeprecated(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n    );\n  }, [localContactIds, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <PeerPicker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          isSearchable\n          withDefaultPadding\n          noScrollRestore={noPickerScrollRestore}\n          allowMultiple\n          withStatus\n          itemInputType=\"checkbox\"\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: selectChatFullInfo(global, chatId)?.members,\n      currentUserId,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './CreateTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default CreateTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './EditTopic';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default EditTopicAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default GifSearchAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Management';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default ManagementAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default PollResultsAsync;\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState, type ProfileTabType } from '../../../types';\n\nimport animateScroll from '../../../util/animateScroll';\nimport { throttle } from '../../../util/schedulers';\n\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: ProfileTabType,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n  forceScrollProfileTab = false,\n  allowAutoScrollToTabs = false,\n  handleStopAutoScrollToTabs: () => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if ((prevTabType && prevTabType !== tabType && allowAutoScrollToTabs) || (tabType && forceScrollProfileTab)) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      handleStopAutoScrollToTabs();\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(getStateFromTabType(tabType));\n        isScrollingProgrammatically = true;\n        animateScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef, forceScrollProfileTab,\n    allowAutoScrollToTabs, handleStopAutoScrollToTabs]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    animateScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n  }, [profileState, containerRef]);\n\n  const determineProfileState = useLastCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = getStateFromTabType(tabType);\n    }\n\n    onProfileStateChange(state);\n  });\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useLastCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  });\n\n  return { handleScroll };\n}\n\nfunction getStateFromTabType(tabType: ProfileTabType) {\n  switch (tabType) {\n    case 'members':\n      return ProfileState.MemberList;\n    case 'stories':\n      return ProfileState.StoryList;\n    case 'dialogs':\n      return ProfileState.SavedDialogs;\n    default:\n      return ProfileState.SharedMedia;\n  }\n}\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType, ThreadId } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortUserIds } from '../../../global/helpers';\nimport sortChatIds from '../../common/helpers/sortChatIds';\n\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nexport default function useProfileViewportIds({\n  loadMoreMembers,\n  loadCommonChats,\n  searchMessages,\n  loadStories,\n  loadStoriesArchive,\n  loadMoreGifts,\n  tabType,\n  mediaSearchType,\n  groupChatMembers,\n  commonChatIds,\n  usersById,\n  userStatusesById,\n  chatsById,\n  chatMessages,\n  foundIds,\n  threadId,\n  storyIds,\n  giftIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  similarChannels,\n} : {\n  loadMoreMembers: AnyToVoidFunction;\n  loadCommonChats: AnyToVoidFunction;\n  searchMessages: AnyToVoidFunction;\n  loadStories: AnyToVoidFunction;\n  loadStoriesArchive: AnyToVoidFunction;\n  loadMoreGifts: AnyToVoidFunction;\n  tabType: ProfileTabType;\n  mediaSearchType?: SharedMediaType;\n  groupChatMembers?: ApiChatMember[];\n  commonChatIds?: string[];\n  usersById?: Record<string, ApiUser>;\n  userStatusesById?: Record<string, ApiUserStatus>;\n  chatsById?: Record<string, ApiChat>;\n  chatMessages?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  threadId?: ThreadId;\n  storyIds?: number[];\n  giftIds?: string[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  similarChannels?: string[];\n}) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    loadMoreMembers, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, chatMessages, foundIds, threadId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    loadCommonChats, chatIds,\n  );\n\n  const sortedStoryIds = useMemo(() => {\n    if (!storyIds?.length) return storyIds;\n    const pinnedStoryIdsSet = new Set(pinnedStoryIds);\n    return storyIds.slice().sort((a, b) => {\n      const aIsPinned = pinnedStoryIdsSet.has(a);\n      const bIsPinned = pinnedStoryIdsSet.has(b);\n      if (aIsPinned && !bIsPinned) return -1;\n      if (!aIsPinned && bIsPinned) return 1;\n      return b - a;\n    });\n  }, [storyIds, pinnedStoryIds]);\n\n  const [storyViewportIds, getMoreStories, noProfileInfoForStories] = useInfiniteScrollForLoadableItems(\n    loadStories, sortedStoryIds,\n  );\n\n  const [\n    archiveStoryViewportIds,\n    getMoreStoriesArchive,\n    noProfileInfoForStoriesArchive,\n  ] = useInfiniteScrollForLoadableItems(\n    loadStoriesArchive, archiveStoryIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n    case 'stories':\n      viewportIds = storyViewportIds;\n      getMore = getMoreStories;\n      noProfileInfo = noProfileInfoForStories;\n      break;\n    case 'storiesArchive':\n      viewportIds = archiveStoryViewportIds;\n      getMore = getMoreStoriesArchive;\n      noProfileInfo = noProfileInfoForStoriesArchive;\n      break;\n    case 'similarChannels':\n      viewportIds = similarChannels;\n      break;\n    case 'gifts':\n      viewportIds = giftIds;\n      getMore = loadMoreGifts;\n      break;\n    case 'dialogs':\n      noProfileInfo = true;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems<ListId extends string | number>(\n  handleLoadMore?: AnyToVoidFunction,\n  itemIds?: ListId[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  threadId?: ThreadId,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [threadId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"Db6J462r\",\"avatar\":\"vDMy3ohp\",\"stars\":\"xtk5vN0o\",\"hiddenGift\":\"X8rK1aAQ\"};","import React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiUser, ApiUserStarGift } from '../../../api/types';\n\nimport { STARS_CURRENCY_CODE } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { CUSTOM_PEER_HIDDEN } from '../../../util/objects/customPeer';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AnimatedIconFromSticker from '../AnimatedIconFromSticker';\nimport Avatar from '../Avatar';\nimport Icon from '../icons/Icon';\nimport GiftRibbon from './GiftRibbon';\n\nimport styles from './UserGift.module.scss';\n\ntype OwnProps = {\n  userId: string;\n  gift: ApiUserStarGift;\n};\n\ntype StateProps = {\n  fromPeer?: ApiUser;\n  sticker?: ApiSticker;\n};\n\nconst GIFT_STICKER_SIZE = 90;\n\nconst UserGift = ({\n  userId, gift, fromPeer, sticker,\n}: OwnProps & StateProps) => {\n  const { openGiftInfoModal } = getActions();\n\n  const oldLang = useOldLang();\n\n  const handleClick = useLastCallback(() => {\n    openGiftInfoModal({\n      userId,\n      gift,\n    });\n  });\n\n  const avatarPeer = (gift.isNameHidden || !fromPeer) ? CUSTOM_PEER_HIDDEN : fromPeer;\n\n  if (!sticker) return undefined;\n\n  return (\n    <div className={styles.root} onClick={handleClick}>\n      <Avatar className={styles.avatar} peer={avatarPeer} size=\"micro\" />\n      <AnimatedIconFromSticker\n        sticker={sticker}\n        noLoop\n        nonInteractive\n        size={GIFT_STICKER_SIZE}\n      />\n      {gift.isUnsaved && (\n        <div className={styles.hiddenGift}>\n          <Icon name=\"eye-closed-outline\" />\n        </div>\n      )}\n      <div className={styles.stars}>\n        {formatCurrency(gift.gift.stars, STARS_CURRENCY_CODE)}\n      </div>\n      {gift.gift.availabilityTotal && (\n        <GiftRibbon\n          color=\"blue\"\n          text={oldLang('Gift2Limited1OfRibbon', formatIntegerCompact(gift.gift.availabilityTotal))}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { gift }): StateProps => {\n    const sticker = global.stickers.starGifts.stickers[gift.gift.stickerId];\n    const fromPeer = gift.fromId ? selectUser(global, gift.fromId) : undefined;\n\n    return {\n      sticker,\n      fromPeer,\n    };\n  },\n)(UserGift));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport type { ApiBotPreviewMedia } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport {\n  getMessageMediaHash, getMessageMediaThumbDataUri,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\n\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaTransitionDeprecated from '../../hooks/useMediaTransitionDeprecated';\n\nimport './Media.scss';\n\ntype OwnProps = {\n  media: ApiBotPreviewMedia;\n  idPrefix?: string;\n  isProtected?: boolean;\n  observeIntersection?: ObserveFn;\n  onClick: (index: number) => void;\n  index: number;\n};\n\nconst PreviewMedia: FC<OwnProps> = ({\n  media,\n  idPrefix = 'preview-media',\n  isProtected,\n  observeIntersection,\n  onClick,\n  index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const thumbDataUri = getMessageMediaThumbDataUri(media);\n\n  const mediaBlobUrl = useMedia(getMessageMediaHash(media, 'preview'), !isIntersecting);\n  const transitionClassNames = useMediaTransitionDeprecated(mediaBlobUrl);\n\n  const video = media.content.video;\n\n  const handleClick = useLastCallback(() => {\n    onClick(index);\n  });\n\n  return (\n    <div\n      ref={ref}\n      id={`${idPrefix}${index}`}\n      className=\"Media scroll-item\"\n      onClick={handleClick}\n    >\n      <img\n        src={thumbDataUri}\n        className=\"media-miniature\"\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      <img\n        src={mediaBlobUrl}\n        className={buildClassName('full-media', 'media-miniature', transitionClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n        decoding=\"async\"\n        onContextMenu={isProtected ? stopEvent : undefined}\n      />\n      {video && <span className=\"video-duration\">{video.isGif ? 'GIF' : formatMediaDuration(video.duration)}</span>}\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n};\n\nexport default memo(PreviewMedia);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"kxMIqtqr\",\"wrapper\":\"D6Yajvjx\",\"media\":\"cV_QL3N5\",\"expiredIcon\":\"cq7jTRkg\",\"overlayIcon\":\"NOCaj4mx\",\"pinnedIcon\":\"GTWFQyJx\",\"viewsCount\":\"g09Rb4Ps\",\"duration\":\"lM_2MMyQ\",\"contextMenu\":\"UAfI9izT\"};","import React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStory, ApiTypeStory } from '../../api/types';\n\nimport { getStoryMediaHash } from '../../global/helpers';\nimport { selectChat, selectPinnedStories } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { formatMediaDuration } from '../../util/dates/dateFormat';\nimport stopEvent from '../../util/stopEvent';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useMedia from '../../hooks/useMedia';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport MediaAreaOverlay from './mediaArea/MediaAreaOverlay';\n\nimport styles from './MediaStory.module.scss';\n\ninterface OwnProps {\n  story: ApiTypeStory;\n  isArchive?: boolean;\n}\n\ninterface StateProps {\n  isProtected?: boolean;\n  isPinned?: boolean;\n  canPin?: boolean;\n}\n\nfunction MediaStory({\n  story, isProtected, isArchive, isPinned, canPin,\n}: OwnProps & StateProps) {\n  const {\n    openStoryViewer,\n    loadPeerSkippedStories,\n    toggleStoryInProfile,\n    toggleStoryPinnedToTop,\n    showNotification,\n  } = getActions();\n\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const getTriggerElement = useLastCallback(() => containerRef.current);\n  const getRootElement = useLastCallback(() => document.body);\n  const getMenuElement = useLastCallback(() => document.querySelector('#portals .story-context-menu .bubble'));\n  const getLayout = useLastCallback(() => ({ withPortal: true, isDense: true }));\n\n  const peerId = story && story.peerId;\n  const isFullyLoaded = story && 'content' in story;\n  const isOwn = isFullyLoaded && story.isOut;\n  const isDeleted = story && 'isDeleted' in story;\n  const video = isFullyLoaded ? (story as ApiStory).content.video : undefined;\n  const duration = video && formatMediaDuration(video.duration);\n  const imageHash = isFullyLoaded ? getStoryMediaHash(story as ApiStory) : undefined;\n  const imgBlobUrl = useMedia(imageHash);\n  const thumbUrl = imgBlobUrl || video?.thumbnail?.dataUri;\n\n  useEffect(() => {\n    if (story && !(isFullyLoaded || isDeleted)) {\n      loadPeerSkippedStories({ peerId: story.peerId });\n    }\n  }, [isDeleted, isFullyLoaded, story]);\n\n  const {\n    isContextMenuOpen, contextMenuAnchor,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(containerRef, !isOwn);\n\n  const handleClick = useCallback(() => {\n    openStoryViewer({\n      peerId: story.peerId,\n      storyId: story.id,\n      isSinglePeer: true,\n      isPrivate: true,\n      isArchive,\n    });\n  }, [isArchive, story.id, story.peerId]);\n\n  const handleMouseDown = useLastCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  });\n\n  const handleUnarchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: true });\n    showNotification({\n      message: lang('Story.ToastSavedToProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleArchiveClick = useLastCallback((e: React.SyntheticEvent) => {\n    stopEvent(e);\n\n    toggleStoryInProfile({ peerId, storyId: story.id, isInProfile: false });\n    showNotification({\n      message: lang('Story.ToastRemovedFromProfileText'),\n    });\n    handleContextMenuClose();\n  });\n\n  const handleTogglePinned = useLastCallback(() => {\n    toggleStoryPinnedToTop({ peerId, storyId: story.id });\n    handleContextMenuClose();\n  });\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName(styles.root, 'scroll-item')}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {isDeleted && (\n        <span>\n          <Icon className={styles.expiredIcon} name=\"story-expired\" />\n          {lang('ExpiredStory')}\n        </span>\n      )}\n      {isPinned && <Icon className={buildClassName(styles.overlayIcon, styles.pinnedIcon)} name=\"pin-badge\" />}\n      {isFullyLoaded && Boolean(story.views?.viewsCount) && (\n        <span className={buildClassName(styles.overlayIcon, styles.viewsCount)}>\n          <Icon name=\"eye\" />\n          {story.views.viewsCount}\n        </span>\n      )}\n      {duration && <span className={buildClassName(styles.overlayIcon, styles.duration)}>{duration}</span>}\n      <div className={styles.wrapper}>\n        {thumbUrl && (\n          <img src={thumbUrl} alt=\"\" className={styles.media} draggable={false} />\n        )}\n        {isFullyLoaded && <MediaAreaOverlay story={story} />}\n        {isProtected && <span className=\"protector\" />}\n      </div>\n      {contextMenuAnchor !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuAnchor}\n          getTriggerElement={getTriggerElement}\n          getRootElement={getRootElement}\n          getMenuElement={getMenuElement}\n          getLayout={getLayout}\n          className={buildClassName(styles.contextMenu, 'story-context-menu')}\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          withPortal\n        >\n          {isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleUnarchiveClick}>\n              {lang('StoryList.SaveToProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && (\n            <MenuItem icon=\"archive\" onClick={handleArchiveClick}>\n              {lang('Story.Context.RemoveFromProfile')}\n            </MenuItem>\n          )}\n          {!isArchive && !isPinned && canPin && (\n            <MenuItem icon=\"pin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Pin')}\n            </MenuItem>\n          )}\n          {!isArchive && isPinned && (\n            <MenuItem icon=\"unpin\" onClick={handleTogglePinned}>\n              {lang('StoryList.ItemAction.Unpin')}\n            </MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>((global, { story }): StateProps => {\n  const chat = selectChat(global, story.peerId);\n  const isProtected = chat?.isProtected;\n\n  const { maxPinnedStoriesCount } = global.appConfig || {};\n  const isOwn = 'isOut' in story && story.isOut;\n  const pinnedStories = selectPinnedStories(global, story.peerId);\n  const isPinned = pinnedStories?.some((pinnedStory) => pinnedStory.id === story.id);\n  const canPinMore = isOwn && (!maxPinnedStoriesCount || (pinnedStories?.length || 0) < maxPinnedStoriesCount);\n\n  return {\n    isProtected,\n    isPinned,\n    canPin: canPinMore,\n  };\n})(MediaStory));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback,\n  useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiBotPreviewMedia,\n  ApiChat,\n  ApiChatMember,\n  ApiMessage,\n  ApiTypeStory,\n  ApiUser,\n  ApiUserStarGift,\n  ApiUserStatus,\n} from '../../api/types';\nimport type { TabState } from '../../global/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType, ThreadId,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { AudioOrigin, MediaViewerOrigin, NewChatMembersProgress } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport {\n  getHasAdminRight,\n  getIsDownloading,\n  getIsSavedDialog,\n  getMessageDocument,\n  getMessageDownloadableMedia,\n  isChatAdmin,\n  isChatChannel,\n  isChatGroup,\n  isUserBot,\n  isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectActiveDownloads,\n  selectChat,\n  selectChatFullInfo,\n  selectChatMessages,\n  selectCurrentSharedMediaSearch,\n  selectIsCurrentUserPremium,\n  selectIsRightColumnShown,\n  selectPeerStories,\n  selectSimilarChannelIds,\n  selectTabState,\n  selectTheme,\n  selectUser,\n  selectUserCommonChats,\n  selectUserFullInfo,\n} from '../../global/selectors';\nimport { selectPremiumLimit } from '../../global/selectors/limits';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { IS_TOUCH_ENV } from '../../util/windowEnvironment';\nimport renderText from '../common/helpers/renderText';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\n\nimport usePeerStoriesPolling from '../../hooks/polling/usePeerStoriesPolling';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useFlag from '../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useProfileState from './hooks/useProfileState';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useTransitionFixes from './hooks/useTransitionFixes';\n\nimport Audio from '../common/Audio';\nimport Document from '../common/Document';\nimport UserGift from '../common/gift/UserGift';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport Media from '../common/Media';\nimport NothingFound from '../common/NothingFound';\nimport PreviewMedia from '../common/PreviewMedia';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ChatExtra from '../common/profile/ChatExtra';\nimport ProfileInfo from '../common/ProfileInfo';\nimport WebLink from '../common/WebLink';\nimport ChatList from '../left/main/ChatList';\nimport MediaStory from '../story/MediaStory';\nimport Button from '../ui/Button';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem, { type MenuItemContextAction } from '../ui/ListItem';\nimport Spinner from '../ui/Spinner';\nimport TabList from '../ui/TabList';\nimport Transition from '../ui/Transition';\nimport DeleteMemberModal from './DeleteMemberModal';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: ThreadId;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasStoriesTab?: boolean;\n  hasMembersTab?: boolean;\n  hasPreviewMediaTab?: boolean;\n  hasGiftsTab?: boolean;\n  gifts?: ApiUserStarGift[];\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  storyIds?: number[];\n  pinnedStoryIds?: number[];\n  archiveStoryIds?: number[];\n  storyByIds?: Record<number, ApiTypeStory>;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  activeDownloads: TabState['activeDownloads'];\n  isChatProtected?: boolean;\n  nextProfileTab?: ProfileTabType;\n  shouldWarnAboutSvg?: boolean;\n  similarChannels?: string[];\n  botPreviewMedia? : ApiBotPreviewMedia[];\n  isCurrentUserPremium?: boolean;\n  limitSimilarChannels: number;\n  isTopicInfo?: boolean;\n  isSavedDialog?: boolean;\n  forceScrollProfileTab?: boolean;\n  isSynced?: boolean;\n};\n\ntype TabProps = {\n  type: ProfileTabType;\n  title: string;\n};\n\nconst TABS: TabProps[] = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  profileState,\n  theme,\n  isChannel,\n  currentUserId,\n  messagesById,\n  foundIds,\n  storyIds,\n  pinnedStoryIds,\n  archiveStoryIds,\n  storyByIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasStoriesTab,\n  hasMembersTab,\n  hasPreviewMediaTab,\n  hasGiftsTab,\n  gifts,\n  botPreviewMedia,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  activeDownloads,\n  isChatProtected,\n  nextProfileTab,\n  shouldWarnAboutSvg,\n  similarChannels,\n  isCurrentUserPremium,\n  limitSimilarChannels,\n  isTopicInfo,\n  isSavedDialog,\n  forceScrollProfileTab,\n  isSynced,\n  onProfileStateChange,\n}) => {\n  const {\n    setSharedMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchSharedMediaMessages,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    setNewChatMembersDialogState,\n    loadPeerProfileStories,\n    loadStoriesArchive,\n    openPremiumModal,\n    loadChannelRecommendations,\n    loadPreviewMedias,\n    loadUserGifts,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useOldLang();\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const profileId = isSavedDialog ? String(threadId) : chatId;\n  const isSavedMessages = profileId === currentUserId && !isSavedDialog;\n\n  const tabs = useMemo(() => ([\n    ...(isSavedMessages && !isSavedDialog ? [{ type: 'dialogs' as const, title: 'SavedDialogsTab' }] : []),\n    ...(hasStoriesTab ? [{ type: 'stories' as const, title: 'ProfileStories' }] : []),\n    ...(hasStoriesTab && isSavedMessages ? [{ type: 'storiesArchive' as const, title: 'ProfileStoriesArchive' }] : []),\n    ...(hasGiftsTab ? [{ type: 'gifts' as const, title: 'ProfileGifts' }] : []),\n    ...(hasMembersTab ? [{\n      type: 'members' as const, title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...(hasPreviewMediaTab ? [{\n      type: 'previewMedia' as const, title: 'ProfileBotPreviewTab',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!isTopicInfo ? [{ type: 'voice' as const, title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats' as const, title: 'SharedGroupsTab2' }] : []),\n    ...(isChannel && similarChannels?.length\n      ? [{ type: 'similarChannels' as const, title: 'SimilarChannelsTab' }]\n      : []),\n  ]), [\n    hasCommonChatsTab,\n    hasMembersTab,\n    hasPreviewMediaTab,\n    hasStoriesTab,\n    hasGiftsTab,\n    isChannel,\n    isTopicInfo,\n    similarChannels,\n    isSavedMessages,\n    isSavedDialog,\n  ]);\n\n  const initialTab = useMemo(() => {\n    if (!nextProfileTab) {\n      return 0;\n    }\n\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n    return index === -1 ? 0 : index;\n  }, [nextProfileTab, tabs]);\n\n  const [allowAutoScrollToTabs, startAutoScrollToTabsIfNeeded, stopAutoScrollToTabs] = useFlag(false);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n    const index = tabs.findIndex(({ type }) => type === nextProfileTab);\n\n    if (index === -1) return;\n    setActiveTab(index);\n  }, [nextProfileTab, tabs]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    startAutoScrollToTabsIfNeeded();\n    setActiveTab(index);\n  }, []);\n\n  useEffect(() => {\n    if (hasPreviewMediaTab && !botPreviewMedia) {\n      loadPreviewMedias({ botId: chatId });\n    }\n  }, [chatId, botPreviewMedia, hasPreviewMediaTab]);\n\n  useEffect(() => {\n    if (isChannel && !similarChannels && isSynced) {\n      loadChannelRecommendations({ chatId });\n    }\n  }, [chatId, isChannel, similarChannels, isSynced]);\n\n  const giftIds = useMemo(() => {\n    return gifts?.map(({ date, gift, fromId }) => `${date}-${fromId}-${gift.id}`);\n  }, [gifts]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n  const handleLoadCommonChats = useCallback(() => {\n    loadCommonChats({ userId: chatId });\n  }, [chatId]);\n  const handleLoadPeerStories = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadPeerProfileStories({ peerId: chatId, offsetId });\n  }, [chatId]);\n  const handleLoadStoriesArchive = useCallback(({ offsetId }: { offsetId: number }) => {\n    loadStoriesArchive({ peerId: currentUserId!, offsetId });\n  }, [currentUserId]);\n  const handleLoadGifts = useCallback(() => {\n    loadUserGifts({ userId: chatId });\n  }, [chatId]);\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds({\n    loadMoreMembers,\n    searchMessages: searchSharedMediaMessages,\n    loadStories: handleLoadPeerStories,\n    loadStoriesArchive: handleLoadStoriesArchive,\n    loadMoreGifts: handleLoadGifts,\n    loadCommonChats: handleLoadCommonChats,\n    tabType,\n    mediaSearchType,\n    groupChatMembers: members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    chatMessages: messagesById,\n    foundIds,\n    threadId,\n    storyIds,\n    giftIds,\n    pinnedStoryIds,\n    archiveStoryIds,\n    similarChannels,\n  });\n  const isFirstTab = (isSavedMessages && resultType === 'dialogs')\n    || (hasStoriesTab && resultType === 'stories')\n    || resultType === 'members'\n    || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  usePeerStoriesPolling(resultType === 'members' ? viewportIds as string[] : undefined);\n\n  const handleStopAutoScrollToTabs = useLastCallback(() => {\n    stopAutoScrollToTabs();\n  });\n\n  const { handleScroll } = useProfileState(\n    containerRef,\n    resultType,\n    profileState,\n    onProfileStateChange,\n    forceScrollProfileTab,\n    allowAutoScrollToTabs,\n    handleStopAutoScrollToTabs,\n  );\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useLastCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  });\n\n  const handleNewMemberDialogOpen = useLastCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  });\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setSharedMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setSharedMediaSearchType, tabType, threadId]);\n\n  const handleSelectMedia = useLastCallback((messageId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      messageId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  });\n\n  const handleSelectPreviewMedia = useLastCallback((index: number) => {\n    openMediaViewer({\n      standaloneMedia: botPreviewMedia?.flatMap((item) => item?.content.photo\n      || item?.content.video).filter(Boolean),\n      origin: MediaViewerOrigin.PreviewMedia,\n      mediaIndex: index,\n    });\n  });\n\n  const handlePlayAudio = useLastCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  });\n\n  const handleMemberClick = useLastCallback((id: string) => {\n    openChat({ id });\n  });\n\n  const handleMessageFocus = useLastCallback((message: ApiMessage) => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  });\n\n  const handleDeleteMembersModalClose = useLastCallback(() => {\n    setDeletingUserId(undefined);\n  });\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (prevHasMemberTabs === undefined || activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds && !botPreviewMedia) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, threadId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string): MenuItemContextAction[] | undefined {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (resultType === 'dialogs') {\n      return (\n        <ChatList className=\"saved-dialogs\" folderType=\"saved\" isActive />\n      );\n    }\n\n    if ((!viewportIds && !botPreviewMedia) || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (viewportIds && !viewportIds?.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        case 'stories':\n          text = lang('StoryList.SavedEmptyState.Title');\n          break;\n        case 'storiesArchive':\n          text = lang('StoryList.ArchivedEmptyState.Title');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : (resultType === 'stories' || resultType === 'storiesArchive') ? (\n          (viewportIds as number[])!.map((id, i) => storyByIds?.[id] && (\n            <MediaStory\n              teactOrderKey={i}\n              key={`${resultType}_${id}`}\n              story={storyByIds[id]}\n              isArchive={resultType === 'storiesArchive'}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              document={getMessageDocument(messagesById[id])!}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={getIsDownloading(activeDownloads, getMessageDocument(messagesById[id])!)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n              message={messagesById[id]}\n              shouldWarnAboutSvg={shouldWarnAboutSvg}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={getIsDownloading(activeDownloads, messagesById[id].content.audio!)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => {\n            const message = messagesById[id];\n            if (!message) return undefined;\n            const media = messagesById[id] && getMessageDownloadableMedia(message)!;\n            return messagesById[id] && (\n              <Audio\n                key={id}\n                theme={theme}\n                message={messagesById[id]}\n                senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n                origin={AudioOrigin.SharedMedia}\n                date={messagesById[id].date}\n                className=\"scroll-item\"\n                onPlay={handlePlayAudio}\n                onDateClick={handleMessageFocus}\n                canDownload={!isChatProtected && !messagesById[id].isProtected}\n                isDownloading={getIsDownloading(activeDownloads, media)}\n              />\n            );\n          })\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable contact-list-item scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf withStory />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : resultType === 'previewMedia' ? (\n          botPreviewMedia!.map((media, i) => (\n            <PreviewMedia\n              key={media.date}\n              media={media}\n              isProtected={isChatProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectPreviewMedia}\n              index={i}\n            />\n          ))\n        ) : resultType === 'similarChannels' ? (\n          <div key={resultType}>\n            {(viewportIds as string[])!.map((channelId, i) => (\n              <ListItem\n                key={channelId}\n                teactOrderKey={i}\n                className={buildClassName(\n                  'chat-item-clickable search-result',\n                  !isCurrentUserPremium && i === similarChannels!.length - 1 && 'blured',\n                )}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => openChat({ id: channelId })}\n              >\n                <GroupChatInfo avatarSize=\"large\" chatId={channelId} withFullInfo />\n              </ListItem>\n            ))}\n            {!isCurrentUserPremium && (\n              <>\n                {/* eslint-disable-next-line react/jsx-no-bind */}\n                <Button className=\"show-more-channels\" size=\"smaller\" onClick={() => openPremiumModal()}>\n                  {lang('UnlockSimilar')}\n                  <i className=\"icon icon-unlock-badge\" />\n                </Button>\n                <div className=\"more-similar\">\n                  {renderText(lang('MoreSimilarText', limitSimilarChannels), ['simple_markdown'])}\n                </div>\n              </>\n            )}\n          </div>\n        ) : resultType === 'gifts' ? (\n          (gifts?.map((gift) => (\n            <UserGift userId={chatId} key={`${gift.date}-${gift.fromId}-${gift.gift.id}`} gift={gift} />\n          )))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={`.shared-media-transition > .Transition_slide-active.${resultType}-list > .scroll-item`}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && !isSavedMessages && (\n        renderProfileInfo(profileId, isRightColumnShown && canRenderContent, isSavedDialog)\n      )}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={handleSwitchTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(profileId: string, isReady: boolean, isSavedDialog?: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo peerId={profileId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={profileId} isSavedDialog={isSavedDialog} />\n    </div>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, isMobile,\n  }): StateProps => {\n    const user = selectUser(global, chatId);\n    const chat = selectChat(global, chatId);\n    const chatFullInfo = selectChatFullInfo(global, chatId);\n    const userFullInfo = selectUserFullInfo(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentSharedMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const isTopicInfo = Boolean(chat?.isForum && threadId && threadId !== MAIN_THREAD_ID);\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isSavedDialog = getIsSavedDialog(chatId, threadId, global.currentUserId);\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !isTopicInfo && !isSavedDialog && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chatFullInfo?.members;\n    const adminMembersById = chatFullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chatFullInfo && !chatFullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || (!isChannel && !isUserRightBanned(chat, 'inviteUsers'))\n        || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloads = selectActiveDownloads(global);\n    const { similarChannelIds } = selectSimilarChannelIds(global, chatId) || {};\n    const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n\n    const peer = user || chat;\n    const peerFullInfo = userFullInfo || chatFullInfo;\n\n    const hasCommonChatsTab = user && !user.isSelf && !isUserBot(user) && !isSavedDialog\n      && Boolean(userFullInfo?.commonChatsCount);\n    const commonChats = selectUserCommonChats(global, chatId);\n\n    const hasPreviewMediaTab = userFullInfo?.botInfo?.hasPreviewMedia;\n    const botPreviewMedia = global.users.previewMediaByBotId[chatId];\n\n    const hasStoriesTab = peer && (user?.isSelf || (!peer.areStoriesHidden && peerFullInfo?.hasPinnedStories))\n      && !isSavedDialog;\n    const peerStories = hasStoriesTab ? selectPeerStories(global, peer.id) : undefined;\n    const storyIds = peerStories?.profileIds;\n    const pinnedStoryIds = peerStories?.pinnedIds;\n    const storyByIds = peerStories?.byId;\n    const archiveStoryIds = peerStories?.archiveIds;\n\n    const hasGiftsTab = Boolean(userFullInfo?.starGiftCount);\n    const userGifts = global.users.giftsById[chatId];\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasStoriesTab,\n      hasMembersTab,\n      hasPreviewMediaTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      activeDownloads,\n      usersById,\n      userStatusesById,\n      chatsById,\n      storyIds,\n      hasGiftsTab,\n      gifts: userGifts?.gifts,\n      pinnedStoryIds,\n      archiveStoryIds,\n      storyByIds,\n      isChatProtected: chat?.isProtected,\n      nextProfileTab: selectTabState(global).nextProfileTab,\n      forceScrollProfileTab: selectTabState(global).forceScrollProfileTab,\n      shouldWarnAboutSvg: global.settings.byKey.shouldWarnAboutSvg,\n      similarChannels: similarChannelIds,\n      botPreviewMedia,\n      isCurrentUserPremium,\n      isTopicInfo,\n      isSavedDialog,\n      isSynced: global.isSynced,\n      limitSimilarChannels: selectPremiumLimit(global, 'recommendedChannels'),\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useEffect } from '../../../lib/teact/teact';\n\nimport { requestMeasure, requestMutation } from '../../../lib/fasterdom/fasterdom';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        const newHeight = container.offsetHeight - tabsEl.offsetHeight;\n\n        requestMutation(() => {\n          transitionEl.style.minHeight = `${newHeight}px`;\n        });\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useLastCallback(() => {\n    // This callback is called from `Transition.onStart` which is \"mutate\" phase\n    requestMeasure(() => {\n      const container = containerRef.current!;\n      if (container.style.overflowY === 'hidden') return;\n\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n\n      requestMutation(() => {\n        container.style.overflowY = 'hidden';\n        container.style.paddingRight = `${scrollBarWidth}px`;\n      });\n    });\n  });\n\n  const releaseTransitionFix = useLastCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.paddingRight = '0';\n  });\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useRef, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport { ManagementScreens, ProfileState, type ThreadId } from '../../types';\n\nimport { ANIMATION_END_DELAY, SAVED_FOLDER_ID } from '../../config';\nimport {\n  getCanAddContact, getCanManageTopic, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport {\n  selectCanManage,\n  selectChat,\n  selectChatFullInfo,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch,\n  selectIsChatWithSelf,\n  selectTabState,\n  selectTopic,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\n\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useElectronDrag from '../../hooks/useElectronDrag';\nimport useFlag from '../../hooks/useFlag';\nimport { useFolderManagerForChatsCount } from '../../hooks/useFolderManager';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useOldLang from '../../hooks/useOldLang';\n\nimport Icon from '../common/icons/Icon';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport SearchInput from '../ui/SearchInput';\nimport Transition from '../ui/Transition';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: ThreadId;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isBoostStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isMonetizationStatistics?: boolean;\n  isStoryStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: (shouldScrollUp?: boolean) => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  isSelf?: boolean;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  canEditBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  StoryList,\n  Search,\n  Statistics,\n  MessageStatistics,\n  StoryStatistics,\n  BoostStatistics,\n  MonetizationStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n  SavedDialogs,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStoryStatistics,\n  isMonetizationStatistics,\n  isBoostStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  isSelf,\n  canManage,\n  isChannel,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n  isSavedMessages,\n  onClose,\n  onScreenSelect,\n  canEditBot,\n}) => {\n  const {\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    toggleManagement,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const foldersChatCount = useFolderManagerForChatsCount();\n\n  const handleEditInviteClick = useLastCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  });\n\n  const handleDeleteInviteClick = useLastCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  });\n\n  const handleStickerSearchQueryChange = useLastCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  });\n\n  const handleGifSearchQueryChange = useLastCallback((query: string) => {\n    setGifSearchQuery({ query });\n  });\n\n  const handleAddContact = useLastCallback(() => {\n    openAddContactDialog({ userId });\n  });\n\n  const toggleEditTopic = useLastCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: Number(threadId) });\n  });\n\n  const handleToggleManagement = useLastCallback(() => {\n    toggleManagement();\n  });\n\n  const handleToggleStatistics = useLastCallback(() => {\n    toggleStatistics();\n  });\n\n  const handleClose = useLastCallback(() => {\n    onClose(!isSavedMessages);\n  });\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useOldLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : profileState === ProfileState.StoryList ? (\n      HeaderContent.StoryList\n    ) : profileState === ProfileState.SavedDialogs ? (\n      HeaderContent.SavedDialogs\n    ) : -1 // Never reached\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isStoryStatistics ? (\n    HeaderContent.StoryStatistics\n  ) : isBoostStatistics ? (\n    HeaderContent.BoostStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : isMonetizationStatistics ? (\n    HeaderContent.MonetizationStatistics\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isSavedMessages) {\n      return lang('SavedMessages');\n    }\n\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3 className=\"title\">{lang('PollResults')}</h3>;\n      case HeaderContent.AddingMembers:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3 className=\"title\">{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3 className=\"title\">{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3 className=\"title\">{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3 className=\"title\">{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3 className=\"title\">{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3 className=\"title\">{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3 className=\"title\">{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3 className=\"title\">{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3 className=\"title\">{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3 className=\"title\">{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3 className=\"title\">{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3 className=\"title\">{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3 className=\"title\">{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3 className=\"title\">{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3 className=\"title\">{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3 className=\"title\">{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3 className=\"title\">{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3 className=\"title\">{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.StoryStatistics:\n        return <h3 className=\"title\">{lang('Stats.StoryTitle')}</h3>;\n      case HeaderContent.BoostStatistics:\n        return <h3 className=\"title\">{lang('Boosts')}</h3>;\n      case HeaderContent.MonetizationStatistics:\n        return <h3 className=\"title\">{lang('lng_channel_earn_title')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3 className=\"title\">{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3 className=\"title\">{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3 className=\"title\">{lang('GroupMembers')}</h3>;\n      case HeaderContent.StoryList:\n        return <h3 className=\"title\">{lang(isSelf ? 'Settings.MyStories' : 'PeerInfo.PaneStories')}</h3>;\n      case HeaderContent.SavedDialogs:\n        return (\n          <div className=\"header\">\n            <h3 className=\"title\">{lang('SavedMessagesTab')}</h3>\n            <div className=\"subtitle\">{lang('Chats', foldersChatCount[SAVED_FOLDER_ID])}</div>\n          </div>\n        );\n      case HeaderContent.ManageReactions:\n        return <h3 className=\"title\">{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3 className=\"title\">{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3 className=\"title\">{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3 className=\"title\">\n              {getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon icon-add-user\" aria-hidden />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canEditBot && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <Icon name=\"edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = isMobile || (\n    !isSavedMessages && (\n      contentKey === HeaderContent.SharedMedia\n      || contentKey === HeaderContent.MemberList\n      || contentKey === HeaderContent.StoryList\n      || contentKey === HeaderContent.AddingMembers\n      || contentKey === HeaderContent.MessageStatistics\n      || contentKey === HeaderContent.StoryStatistics\n      || isManagement\n    )\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  useElectronDrag(headerRef);\n\n  return (\n    <div className=\"RightHeader\" ref={headerRef}>\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slideFade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? selectTopic(global, chatId!, threadId!) : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const canEditBot = isBot && user?.canEditBot;\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(!isManagement && isProfile && chatId && selectCanManage(global, chatId));\n\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chatId\n      ? selectChatFullInfo(global, chatId)?.canViewStatistics\n      : undefined;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      isSelf: user?.isSelf,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      isSavedMessages,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n      canEditBot,\n    };\n  },\n)(RightHeader);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"gk6pIryJ\",\"noResults\":\"WP4wRUbm\",\"section-header\":\"LWcgK3OX\",\"sectionHeader\":\"LWcgK3OX\",\"section\":\"C8KF95yU\",\"user\":\"oMy5KOFr\",\"stats\":\"GOzrl0zF\",\"down\":\"QuLtxDUV\",\"loadMoreSpinner\":\"ln5zB7KK\",\"status\":\"r3zLiaXx\",\"info\":\"Eo1qQlxx\",\"month\":\"McSPvm0N\",\"quantity\":\"s1yf_GJa\",\"floatingBadge\":\"oSCjRZtx\",\"floatingBadgeButtonColor\":\"duVpAT_e\",\"floatingBadgeWarning\":\"DsJMXNNk\",\"floatingBadgeButton\":\"urrWJVYB\",\"floatingBadgeIcon\":\"hcA9VPeV\",\"floatingBadgeValue\":\"hHkCO4Ge\",\"content\":\"SG00REIA\",\"boostSection\":\"ETgjBS4d\",\"giveawayButton\":\"wOCtp5Kk\",\"giveawayIcon\":\"B9GF4NDB\"};","import React, {\n  memo, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBoost, ApiBoostStatistics, ApiTypePrepaidGiveaway } from '../../../api/types';\nimport type { TabState } from '../../../global/types';\nimport type { CustomPeer } from '../../../types';\n\nimport {\n  GIVEAWAY_BOOST_PER_PREMIUM,\n} from '../../../config';\nimport { isChatChannel } from '../../../global/helpers';\nimport {\n  selectChat,\n  selectIsGiveawayGiftsPurchaseAvailable,\n  selectTabState,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateAtTime } from '../../../util/dates/dateFormat';\nimport { formatInteger } from '../../../util/textFormat';\nimport { getBoostProgressInfo } from '../../common/helpers/boostInfo';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport Icon from '../../common/icons/Icon';\nimport LinkField from '../../common/LinkField';\nimport PremiumProgress from '../../common/PremiumProgress';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './BoostStatistics.module.scss';\n\nimport GiftBlueRound from '../../../assets/premium/GiftBlueRound.svg';\nimport GiftGreenRound from '../../../assets/premium/GiftGreenRound.svg';\nimport GiftRedRound from '../../../assets/premium/GiftRedRound.svg';\nimport GiftStar from '../../../assets/premium/GiftStar.svg';\n\ntype StateProps = {\n  boostStatistics: TabState['boostStatistics'];\n  isGiveawayAvailable?: boolean;\n  chatId: string;\n  giveawayBoostsPerPremium?: number;\n  isChannel?: boolean;\n};\n\nconst GIVEAWAY_IMG_LIST: { [key: number]: string } = {\n  3: GiftGreenRound,\n  6: GiftBlueRound,\n  12: GiftRedRound,\n};\n\nconst CUSTOM_PEER_STAR_TEMPLATE: Omit<CustomPeer, 'title' | 'titleKey'> = {\n  isCustomPeer: true,\n  avatarIcon: 'star',\n  peerColorId: 1,\n};\n\nconst CUSTOM_PEER_TO_BE_DISTRIBUTED: CustomPeer = {\n  isCustomPeer: true,\n  titleKey: 'BoostingToBeDistributed',\n  avatarIcon: 'user',\n  withPremiumGradient: true,\n};\n\nconst BoostStatistics = ({\n  boostStatistics,\n  isGiveawayAvailable,\n  chatId,\n  giveawayBoostsPerPremium,\n  isChannel,\n}: StateProps) => {\n  const {\n    openChat, loadMoreBoosters, closeBoostStatistics, openGiveawayModal, showNotification,\n  } = getActions();\n  const lang = useOldLang();\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const isLoaded = boostStatistics?.boostStatus;\n  const status = isLoaded ? boostStatistics.boostStatus : undefined;\n\n  const isGiftListEqual = boostStatistics && boostStatistics?.boosts?.count\n    === boostStatistics?.giftedBoosts?.count;\n  const shouldDisplayGiftList = !isGiftListEqual && boostStatistics?.giftedBoosts\n    && boostStatistics?.giftedBoosts?.list?.length > 0;\n\n  const {\n    currentLevel,\n    hasNextLevel,\n    boosts,\n    levelProgress,\n    remainingBoosts,\n  } = useMemo(() => {\n    if (!status) {\n      return {\n        currentLevel: 0,\n        hasNextLevel: false,\n        boosts: 0,\n        levelProgress: 0,\n        remainingBoosts: 0,\n        prepaidGiveaways: [],\n      };\n    }\n    return getBoostProgressInfo(status);\n  }, [status]);\n\n  const statsOverview = useMemo(() => {\n    if (!status) return undefined;\n\n    return {\n      level: currentLevel,\n      boosts,\n      premiumSubscribers: status.premiumSubscribers!,\n      remainingBoosts,\n      prepaidGiveaways: status.prepaidGiveaways!,\n    } satisfies ApiBoostStatistics;\n  }, [status, boosts, currentLevel, remainingBoosts]);\n\n  const tabs = useMemo(() => {\n    if (shouldDisplayGiftList) {\n      return [\n        {\n          type: 'boostList',\n          title: lang('BoostingBoostsCount', boostStatistics?.boosts?.count, 'i'),\n        },\n        {\n          type: 'giftedBoostList',\n          title: lang('BoostingGiftsCount', boostStatistics?.giftedBoosts?.count, 'i'),\n        },\n      ];\n    }\n    return [];\n  }, [shouldDisplayGiftList, lang, boostStatistics?.boosts?.count, boostStatistics?.giftedBoosts?.count]);\n\n  const initialTab = useMemo(() => {\n    return boostStatistics?.boosts && boostStatistics.boosts?.list.length > 0 ? 1 : 0;\n  }, [boostStatistics]);\n\n  const [activeTab, setActiveTab] = useState(initialTab);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n\n  const tabType = tabs[renderingActiveTab]?.type;\n\n  const activeKey = tabs.findIndex(({ type }) => type === tabType);\n\n  const boostersToLoadCount = useMemo(() => {\n    if (!boostStatistics) return undefined;\n\n    const list = shouldDisplayGiftList ? (tabType === 'boostList'\n      ? boostStatistics.boosts : boostStatistics.giftedBoosts) : boostStatistics.boosts;\n    if (!list?.count) return undefined;\n\n    const loadedBoostsCount = list.list.reduce((total, boost) => {\n      return total + (boost.multiplier || 1);\n    }, 0);\n\n    const totalCount = list.count;\n    const toLoadCount = totalCount - loadedBoostsCount;\n\n    return toLoadCount > 0 ? toLoadCount : undefined;\n  }, [shouldDisplayGiftList, boostStatistics, tabType]);\n\n  const renderBoostIcon = useLastCallback((multiplier: number) => (\n    <div className={styles.quantity}>\n      <div className={buildClassName(styles.floatingBadge, styles.floatingBadgeButtonColor)}>\n        <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n        <div className={styles.floatingBadgeValue}>{multiplier}</div>\n      </div>\n    </div>\n  ));\n\n  const renderBoostTypeIcon = useLastCallback((boost: ApiBoost) => {\n    if (!boost.isFromGiveaway && !boost.isGift) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.quantity}>\n        <div className={buildClassName(styles.floatingBadge,\n          !boost.isFromGiveaway && styles.floatingBadgeWarning,\n          styles.floatingBadgeButtonColor,\n          styles.floatingBadgeButton)}\n        >\n          <Icon name=\"gift\" className={styles.floatingBadgeIcon} />\n          <div className={styles.floatingBadgeValue}>{lang(boost.isFromGiveaway\n            ? 'BoostingGiveaway' : 'BoostingGift')}\n          </div>\n        </div>\n      </div>\n    );\n  });\n\n  const handleBoosterClick = useLastCallback((userId?: string) => {\n    if (!userId) {\n      showNotification({\n        message: lang('BoostingRecipientWillBeSelected'),\n      });\n      return;\n    }\n    openChat({ id: userId });\n    closeBoostStatistics();\n  });\n\n  const renderBoostList = useLastCallback((boost) => {\n    const hasStars = Boolean(boost?.stars);\n\n    let customPeer: CustomPeer | undefined;\n    if (hasStars) {\n      customPeer = {\n        ...CUSTOM_PEER_STAR_TEMPLATE,\n        title: lang('Stars', boost.stars),\n      };\n    }\n\n    if (!boost.userId) {\n      customPeer = CUSTOM_PEER_TO_BE_DISTRIBUTED;\n    }\n\n    return (\n      <ListItem\n        className=\"chat-item-clickable\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleBoosterClick(boost.userId)}\n      >\n        <PrivateChatInfo\n          className={styles.user}\n          userId={boost.userId}\n          customPeer={customPeer}\n          status={lang('BoostExpireOn', formatDateAtTime(lang, boost.expires * 1000))}\n          noEmojiStatus\n          forceShowSelf\n          noFake\n          noVerified\n          iconElement={boost.multiplier ? renderBoostIcon(boost.multiplier) : undefined}\n          rightElement={renderBoostTypeIcon(boost)}\n        />\n      </ListItem>\n    );\n  });\n\n  const handleGiveawayClick = useLastCallback(() => {\n    openGiveawayModal({ chatId });\n  });\n\n  const handleLoadMore = useLastCallback((e) => {\n    e.preventDefault();\n    loadMoreBoosters({ isGifts: tabType === 'giftedBoostList' });\n  });\n\n  const launchPrepaidGiveawayHandler = useLastCallback((prepaidGiveaway: ApiTypePrepaidGiveaway) => {\n    openGiveawayModal({ chatId, prepaidGiveaway });\n  });\n\n  function renderContent() {\n    let listToRender;\n    if (tabType === 'boostList') {\n      listToRender = boostStatistics?.boosts?.list;\n    } else if (tabType === 'giftedBoostList') {\n      listToRender = boostStatistics?.giftedBoosts?.list;\n    }\n\n    if (listToRender && !listToRender?.length) {\n      return undefined;\n    }\n\n    return (\n      <div className={styles.section}>\n        {listToRender?.map((boost) => renderBoostList(boost))}\n      </div>\n    );\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll')}>\n      {!isLoaded && <Loading />}\n      {isLoaded && statsOverview && (\n        <>\n          <div className={styles.section}>\n            <PremiumProgress\n              leftText={lang('BoostsLevel', currentLevel!)}\n              rightText={hasNextLevel ? lang('BoostsLevel', currentLevel! + 1) : undefined}\n              progress={levelProgress}\n              floatingBadgeText={formatInteger(boosts)}\n              floatingBadgeIcon=\"boost\"\n            />\n            <StatisticsOverview className={styles.stats} statistics={statsOverview} type=\"boost\" />\n          </div>\n          {statsOverview.prepaidGiveaways && (\n            <div className={styles.section}>\n              <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                {lang('BoostingPreparedGiveaways')}\n              </h4>\n              {statsOverview?.prepaidGiveaways?.map((prepaidGiveaway) => {\n                const isStarsGiveaway = 'stars' in prepaidGiveaway;\n\n                return (\n                  <ListItem\n                    key={prepaidGiveaway.id}\n                    className=\"chat-item-clickable\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => launchPrepaidGiveawayHandler(prepaidGiveaway)}\n                  >\n                    <div className={buildClassName(styles.status, 'status-clickable')}>\n                      <div>\n                        {isStarsGiveaway\n                          ? (\n                            <img\n                              src={GiftStar}\n                              className={styles.giveawayIcon}\n                              alt={lang('GiftStar')}\n                            />\n                          ) : (\n                            <img\n                              src={GIVEAWAY_IMG_LIST[prepaidGiveaway.months]}\n                              className={styles.giveawayIcon}\n                              alt={lang('Giveaway')}\n                            />\n                          )}\n                      </div>\n                      <div className={styles.info}>\n                        <h3>\n                          {isStarsGiveaway\n                            ? lang('Giveaway.Stars.Prepaid.Title', prepaidGiveaway.stars)\n                            : lang('BoostingTelegramPremiumCountPlural', prepaidGiveaway.quantity)}\n                        </h3>\n                        <p className={styles.month}>{\n                          isStarsGiveaway ? lang('Giveaway.Stars.Prepaid.Desc', prepaidGiveaway.quantity)\n                            : lang('PrepaidGiveawayMonths', prepaidGiveaway.months)\n                        }\n                        </p>\n                      </div>\n                      <div className={styles.quantity}>\n                        <div className={buildClassName(styles.floatingBadge,\n                          styles.floatingBadgeButtonColor,\n                          styles.floatingBadgeButton)}\n                        >\n                          <Icon name=\"boost\" className={styles.floatingBadgeIcon} />\n                          <div className={styles.floatingBadgeValue} dir={lang.isRtl ? 'rtl' : undefined}>\n                            {isStarsGiveaway ? prepaidGiveaway.boosts\n                              : prepaidGiveaway.quantity * (giveawayBoostsPerPremium ?? GIVEAWAY_BOOST_PER_PREMIUM)}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </ListItem>\n                );\n              })}\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang('BoostingSelectPaidGiveaway')}</p>\n            </div>\n          )}\n          <div className={styles.section}>\n            {shouldDisplayGiftList ? (\n              <div\n                className={buildClassName(styles.boostSection, styles.content)}\n              >\n                <Transition\n                  ref={transitionRef}\n                  name={lang.isRtl ? 'slideOptimizedRtl' : 'slideOptimized'}\n                  activeKey={activeKey}\n                  renderCount={tabs.length}\n                  shouldRestoreHeight\n                >\n                  {renderContent()}\n                </Transition>\n                <TabList activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n              </div>\n            ) : (\n              <>\n                <h4 className={styles.sectionHeader} dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang('BoostingBoostsCount', boostStatistics?.boosts?.count)}\n                </h4>\n                {!boostStatistics?.boosts?.list?.length && (\n                  <div className={styles.noResults}>{lang(isChannel ? 'NoBoostersHint' : 'NoBoostersGroupHint')}\n                  </div>\n                )}\n                {boostStatistics?.boosts?.list?.map((boost) => renderBoostList(boost))}\n              </>\n            )}\n            {Boolean(boostersToLoadCount) && (\n              <ListItem\n                key=\"load-more\"\n                className={styles.showMore}\n                disabled={boostStatistics?.isLoadingBoosters}\n                onClick={handleLoadMore}\n              >\n                {boostStatistics?.isLoadingBoosters ? (\n                  <Spinner className={styles.loadMoreSpinner} />\n                ) : (\n                  <Icon name=\"down\" className={styles.down} />\n                )}\n                {lang('ShowVotes', boostersToLoadCount, 'i')}\n              </ListItem>\n            )}\n          </div>\n          <LinkField className={styles.section} link={status!.boostUrl} withShare title={lang('LinkForBoosting')} />\n          {isGiveawayAvailable && (\n            <div className={styles.section}>\n              <ListItem\n                key=\"load-more\"\n                icon=\"gift\"\n                onClick={handleGiveawayClick}\n                className={styles.giveawayButton}\n              >\n                {lang('BoostingGetBoostsViaGifts')}\n              </ListItem>\n              <p className=\"text-muted hint\" key=\"links-hint\">{lang(\n                isChannel ? 'BoostingGetMoreBoosts' : 'BoostingGetMoreBoostsGroup',\n              )}\n              </p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const boostStatistics = tabState.boostStatistics;\n    const isGiveawayAvailable = selectIsGiveawayGiftsPurchaseAvailable(global);\n    const chatId = boostStatistics && boostStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const giveawayBoostsPerPremium = global.appConfig?.giveawayBoostsPerPremium;\n\n    return {\n      boostStatistics,\n      isGiveawayAvailable,\n      chatId: chatId!,\n      giveawayBoostsPerPremium,\n      isChannel,\n    };\n  },\n)(BoostStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AboutMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutMonetizationModal = useModuleLoader(Bundles.Extra, 'AboutMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutMonetizationModal ? <AboutMonetizationModal {...props} /> : undefined;\n};\n\nexport default AboutMonetizationModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './VerificationMonetizationModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst VerificationMonetizationModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const VerificationMonetizationModal = useModuleLoader(Bundles.Extra, 'VerificationMonetizationModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return VerificationMonetizationModal ? <VerificationMonetizationModal {...props} /> : undefined;\n};\n\nexport default VerificationMonetizationModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vBPv6lUS\",\"graph\":\"EbPbvB1I\",\"hidden\":\"nsPIlLYL\",\"ready\":\"s6qyDhkE\",\"section\":\"cB2IkwY6\",\"topText\":\"FLOpxZd1\",\"availableReward\":\"emE6bAD8\",\"rewardValue\":\"eyDAxGDU\",\"decimalPart\":\"jkRV_L7b\",\"integer\":\"xE9kfGi7\",\"decimalUsdPart\":\"hWMnYdxX\",\"toncoinIcon\":\"ubDl9CvS\",\"textBottom\":\"P3qZJJzF\"};","import React, {\n  memo, useEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChannelMonetizationStatistics, StatisticsGraph } from '../../../api/types';\n\nimport { selectChat, selectChatFullInfo, selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLang from '../../../hooks/useLang';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useOldLang from '../../../hooks/useOldLang';\n\nimport AboutMonetizationModal from '../../common/AboutMonetizationModal.async';\nimport Icon from '../../common/icons/Icon';\nimport SafeLink from '../../common/SafeLink';\nimport VerificationMonetizationModal from '../../common/VerificationMonetizationModal.async';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Link from '../../ui/Link';\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\n\nimport styles from './MonetizationStatistics.module.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst MONETIZATION_GRAPHS_TITLES = {\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  revenueGraph: 'lng_channel_earn_chart_revenue',\n};\nconst MONETIZATION_GRAPHS = Object.keys(MONETIZATION_GRAPHS_TITLES) as (keyof ApiChannelMonetizationStatistics)[];\n\ntype StateProps = {\n  chatId: string;\n  dcId?: number;\n  statistics?: ApiChannelMonetizationStatistics;\n  isCreator?: boolean;\n  isChannelRevenueWithdrawalEnabled?: boolean;\n  hasPassword?: boolean;\n  passwordHint?: string;\n  error?: string;\n  isLoading?: boolean;\n};\n\nconst MonetizationStatistics = ({\n  chatId,\n  dcId,\n  statistics,\n  isCreator,\n  isChannelRevenueWithdrawalEnabled,\n  hasPassword,\n  passwordHint,\n  error,\n  isLoading,\n}: StateProps) => {\n  const { loadChannelMonetizationStatistics, loadPasswordInfo } = getActions();\n  const oldLang = useOldLang();\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n  const forceUpdate = useForceUpdate();\n  const [isAboutMonetizationModalOpen, openAboutMonetizationModal, closeAboutMonetizationModal] = useFlag(false);\n  const [\n    isVerificationMonetizationModalOpen, openVerificationMonetizationModal, closeVerificationMonetizationModal,\n  ] = useFlag(false);\n  const [isConfirmPasswordDialogOpen, openConfirmPasswordDialogOpen, closeConfirmPasswordDialogOpen] = useFlag();\n  const availableBalance = statistics?.balances?.availableBalance;\n  const isWithdrawalEnabled = statistics?.balances?.isWithdrawalEnabled;\n  const canWithdraw = isCreator && isChannelRevenueWithdrawalEnabled && Boolean(availableBalance)\n    && isWithdrawalEnabled;\n\n  useEffect(() => {\n    if (chatId) {\n      loadChannelMonetizationStatistics({ chatId });\n      loadPasswordInfo();\n    }\n  }, [chatId, loadChannelMonetizationStatistics]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (containerRef.current) {\n        Array.from(containerRef.current.children).forEach((child) => {\n          child.innerHTML = '';\n          child.classList.add(styles.hidden);\n        });\n      }\n\n      loadedCharts.current = [];\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      MONETIZATION_GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        LovelyChart.create(containerRef.current!.children[index], {\n          title: oldLang((MONETIZATION_GRAPHS_TITLES as Record<string, string>)[name]),\n          ...graph as StatisticsGraph,\n        });\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove(styles.hidden);\n      });\n\n      forceUpdate();\n    })();\n  }, [isReady, statistics, oldLang, chatId, dcId, forceUpdate]);\n\n  function renderAvailableReward() {\n    const [integerTonPart, decimalTonPart] = availableBalance ? availableBalance.toFixed(4).split('.') : [0];\n    const [integerUsdPart, decimalUsdPart] = availableBalance\n    && statistics?.usdRate ? (availableBalance * statistics.usdRate).toFixed(2).split('.') : [0];\n\n    return (\n      <div className={styles.availableReward}>\n        <div className={styles.toncoin}>\n          <Icon className={styles.toncoinIcon} name=\"toncoin\" />\n          <b className={styles.rewardValue}>\n            {integerTonPart}\n            {decimalTonPart ? <span className={styles.decimalPart}>.{decimalTonPart}</span> : undefined}\n          </b>\n        </div>\n        {' '}\n        <span className={styles.integer}>\n          ≈ ${integerUsdPart}\n          {decimalUsdPart ? <span className={styles.decimalUsdPart}>.{decimalUsdPart}</span> : undefined}\n        </span>\n      </div>\n    );\n  }\n\n  const topText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'ChannelEarnAbout',\n      {\n        link: (\n          <Link isPrimary onClick={openAboutMonetizationModal}>\n            {linkText}\n            <Icon name=\"next\" />\n          </Link>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const rewardsText = useMemo(() => {\n    const linkText = oldLang('LearnMore');\n    return lang(\n      'MonetizationBalanceZeroInfo',\n      {\n        link: (\n          <SafeLink url={oldLang('MonetizationProceedsInfoLink')} text={linkText}>\n            {linkText}\n            <Icon name=\"next\" />\n          </SafeLink>\n        ),\n      },\n      {\n        withNodes: true,\n      },\n    );\n  }, [lang, oldLang]);\n\n  const verificationMonetizationHandler = useLastCallback(() => {\n    if (hasPassword) {\n      openVerificationMonetizationModal();\n    } else {\n      openConfirmPasswordDialogOpen();\n    }\n  });\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, 'custom-scroll', isReady && styles.ready)}>\n      <div className={buildClassName(styles.section, styles.topText)}>{topText}</div>\n\n      <StatisticsOverview\n        statistics={statistics}\n        isToncoin\n        type=\"monetization\"\n        title={oldLang('MonetizationOverview')}\n        subtitle={\n          <div className={styles.textBottom}>{oldLang('MonetizationProceedsTONInfo')}</div>\n        }\n      />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef} className={styles.section}>\n        {MONETIZATION_GRAPHS.filter(Boolean).map((graph) => (\n          <div key={graph} className={buildClassName(styles.graph, styles.hidden)} />\n        ))}\n      </div>\n\n      <div className={styles.section}>\n        {oldLang('lng_channel_earn_balance_title')}\n\n        {renderAvailableReward()}\n\n        <Button\n          size=\"smaller\"\n          type=\"button\"\n          onClick={verificationMonetizationHandler}\n          disabled={!canWithdraw}\n        >\n          {oldLang('MonetizationWithdraw')}\n        </Button>\n\n        <div className={styles.textBottom}>{rewardsText}</div>\n      </div>\n\n      <AboutMonetizationModal\n        isOpen={isAboutMonetizationModalOpen}\n        onClose={closeAboutMonetizationModal}\n      />\n      <VerificationMonetizationModal\n        chatId={chatId}\n        isOpen={isVerificationMonetizationModalOpen}\n        onClose={closeVerificationMonetizationModal}\n        passwordHint={passwordHint}\n        error={error}\n        isLoading={isLoading}\n      />\n      <ConfirmDialog\n        isOnlyConfirm\n        isOpen={isConfirmPasswordDialogOpen}\n        onClose={closeConfirmPasswordDialogOpen}\n        confirmHandler={closeConfirmPasswordDialogOpen}\n        confirmLabel={lang('OK')}\n      >\n        <p>{renderText(oldLang('Monetization.Withdraw.Error.Text'), ['br'])}</p>\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      settings: {\n        byKey: {\n          hasPassword,\n        },\n      },\n      twoFaSettings: {\n        hint: passwordHint,\n      },\n    } = global;\n    const isLoading = global.monetizationInfo?.isLoading;\n    const error = global.monetizationInfo?.error;\n    const monetizationStatistics = tabState.monetizationStatistics;\n    const chatId = monetizationStatistics && monetizationStatistics.chatId;\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const dcId = selectChatFullInfo(global, chatId!)?.statisticsDcId;\n    const isCreator = Boolean(chat?.isCreator);\n\n    const statistics = tabState.statistics.monetization;\n\n    const isChannelRevenueWithdrawalEnabled = global.appConfig?.isChannelRevenueWithdrawalEnabled;\n\n    return {\n      chatId: chatId!,\n      dcId,\n      statistics,\n      isCreator,\n      isChannelRevenueWithdrawalEnabled,\n      hasPassword,\n      passwordHint,\n      error,\n      isLoading,\n    };\n  },\n)(MonetizationStatistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './Statistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StoryStatistics';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst StoryStatisticsAsync: FC<OwnProps> = (props) => {\n  const StoryStatistics = useModuleLoader(Bundles.Extra, 'StoryStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StoryStatistics ? <StoryStatistics {...props} /> : <Loading />;\n};\n\nexport default StoryStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default StickerSearchAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect, useState } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ProfileTabType, ThreadId } from '../../types';\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport { getIsSavedDialog } from '../../global/helpers';\nimport {\n  selectAreActiveChatsLoaded,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectRightColumnContentKey,\n  selectTabState,\n} from '../../global/selectors';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\n\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/window/useWindowSize';\n\nimport Transition from '../ui/Transition';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\nimport GifSearch from './GifSearch.async';\nimport Management from './management/Management.async';\nimport PollResults from './PollResults.async';\nimport Profile from './Profile';\nimport RightHeader from './RightHeader';\nimport BoostStatistics from './statistics/BoostStatistics';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport MonetizationStatistics from './statistics/MonetizationStatistics';\nimport Statistics from './statistics/Statistics.async';\nimport StoryStatistics from './statistics/StoryStatistics.async';\nimport StickerSearch from './StickerSearch.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: ThreadId;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n  nextProfileTab?: ProfileTabType;\n  shouldCloseRightColumn?: boolean;\n  isSavedMessages?: boolean;\n  isSavedDialog?: boolean;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n  nextProfileTab,\n  shouldCloseRightColumn,\n  isSavedMessages,\n  isSavedDialog,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    toggleStoryStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    resetNextProfileTab,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n    closeBoostStatistics,\n    setShouldCloseRightColumn,\n    closeMonetizationStatistics,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(\n    isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n  );\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStoryStatistics = contentKey === RightColumnContent.StoryStatistics;\n  const isBoostStatistics = contentKey === RightColumnContent.BoostStatistics;\n  const isMonetizationStatistics = contentKey === RightColumnContent.MonetizationStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useLastCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp && !isSavedMessages) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.StoryStatistics:\n        toggleStoryStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.BoostStatistics:\n        closeBoostStatistics();\n        break;\n      case RightColumnContent.MonetizationStatistics:\n        closeMonetizationStatistics();\n        break;\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  });\n\n  const handleSelectChatMember = useLastCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  });\n\n  const handleAppendingChatMembers = useLastCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  });\n\n  useEffect(() => (isOpen && chatId ? captureEscKeyListener(close) : undefined), [isOpen, close, chatId]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen]);\n\n  useEffect(() => {\n    if (!nextProfileTab) return;\n\n    resetNextProfileTab();\n  }, [nextProfileTab]);\n\n  useEffect(() => {\n    if (shouldCloseRightColumn) {\n      close();\n      setShouldCloseRightColumn({ value: undefined });\n    }\n  }, [shouldCloseRightColumn]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId, prevThreadId]) => {\n    if (prevChatId !== chatId || prevThreadId !== threadId) {\n      setProfileState(\n        isSavedMessages && !isSavedDialog ? ProfileState.SavedDialogs : ProfileState.Profile,\n      );\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId, threadId, isSavedDialog, isSavedMessages]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={`add_chat_members_${chatId!}`}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={`profile_${chatId!}_${threadId}`}\n            chatId={chatId!}\n            threadId={threadId}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={`management_${chatId!}_${managementScreen}`}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.BoostStatistics:\n        return <BoostStatistics />;\n      case RightColumnContent.MonetizationStatistics:\n        return <MonetizationStatistics />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StoryStatistics:\n        return <StoryStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isBoostStatistics={isBoostStatistics}\n          isMonetizationStatistics={isMonetizationStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStoryStatistics={isStoryStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoomFade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            (renderingContentKey === RightColumnContent.MessageStatistics\n              || renderingContentKey === RightColumnContent.StoryStatistics)\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const {\n      management, shouldSkipHistoryAnimations, nextProfileTab, shouldCloseRightColumn,\n    } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n\n    const isSavedMessages = chatId ? selectIsChatWithSelf(global, chatId) : undefined;\n    const isSavedDialog = chatId ? getIsSavedDialog(chatId, threadId, global.currentUserId) : undefined;\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n      nextProfileTab,\n      shouldCloseRightColumn,\n      isSavedMessages,\n      isSavedDialog,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst StoryViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const StoryViewer = useModuleLoader(Bundles.Extra, 'StoryViewer', !isOpen);\n\n  return StoryViewer ? <StoryViewer /> : undefined;\n};\n\nexport default memo(StoryViewerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default AttachBotRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default BotTrustModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { folder } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !folder);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default DeleteFolderDialogAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default DialogsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport download from '../../util/download';\nimport generateUniqueId from '../../util/generateUniqueId';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/windowEnvironment';\n\nimport useLastCallback from '../../hooks/useLastCallback';\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: TabState['activeDownloads'];\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedHashes = new Set<string>();\nconst downloadedHashes = new Set<string>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n}) => {\n  const { cancelMediaHashDownloads, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMediaDownloaded = useLastCallback((hash: string) => {\n    downloadedHashes.add(hash);\n    runDebounced(() => {\n      if (downloadedHashes.size) {\n        cancelMediaHashDownloads({ mediaHashes: Array.from(downloadedHashes) });\n        downloadedHashes.clear();\n      }\n    });\n  });\n\n  useEffect(() => {\n    if (!Object.keys(activeDownloads).length) {\n      processedHashes.clear();\n      return;\n    }\n\n    Object.entries(activeDownloads).forEach(([mediaHash, metadata]) => {\n      if (processedHashes.has(mediaHash)) {\n        return;\n      }\n      processedHashes.add(mediaHash);\n\n      const { size, filename, format: mediaFormat } = metadata;\n\n      const mediaData = mediaLoader.getFromMemory(mediaHash);\n\n      if (mediaData) {\n        download(mediaData, filename);\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      if (size > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMediaDownloaded(mediaHash);\n        return;\n      }\n\n      const handleProgress = () => {\n        const currentDownloads = selectTabState(getGlobal()).activeDownloads;\n        if (!currentDownloads[mediaHash]) {\n          mediaLoader.cancelProgress(handleProgress);\n        }\n      };\n\n      mediaLoader.fetch(mediaHash, mediaFormat, true, handleProgress, generateUniqueId()).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, filename);\n        }\n\n        handleMediaDownloaded(mediaHash);\n      });\n    });\n  }, [activeDownloads]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads;\n\n    return {\n      activeDownloads,\n    };\n  },\n)(DownloadManager));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default DraftRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default ForwardRecipientPickerAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\n\nimport { getCanPostInChat } from '../../global/helpers';\nimport { selectChat, selectChatFullInfo } from '../../global/selectors';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useOldLang from '../../hooks/useOldLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useOldLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const chatFullInfo = chatId ? selectChatFullInfo(global, chatId) : undefined;\n    const canPost = Boolean(chat) && getCanPostInChat(chat, undefined, undefined, chatFullInfo);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default HistoryCalendarAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default NewContactModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default NotificationsAsync;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React from '../../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default PremiumLimitReachedModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './GiveawayModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiveawayModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiveawayModal = useModuleLoader(Bundles.Extra, 'GiveawayModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiveawayModal ? <GiveawayModal {...props} /> : undefined;\n};\n\nexport default GiveawayModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default PremiumMainModalAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './StarsGiftingPickerModal';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StarsGiftingPickerModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StarsGiftingPickerModal = useModuleLoader(Bundles.Stars, 'StarsGiftingPickerModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StarsGiftingPickerModal ? <StarsGiftingPickerModal {...props} /> : undefined;\n};\n\nexport default StarsGiftingPickerModalAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default SafeLinkModalAsync;\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"YUAfqWPN\"};","import React, { memo, useRef } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ConfettiStyle, TabState } from '../../../global/types';\n\nimport { requestMeasure } from '../../../lib/fasterdom/fasterdom';\nimport { selectTabState } from '../../../global/selectors';\nimport buildStyle from '../../../util/buildStyle';\nimport { pick } from '../../../util/iteratees';\n\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useLastCallback from '../../../hooks/useLastCallback';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useWindowSize from '../../../hooks/window/useWindowSize';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  isStar?: boolean;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n// eslint-disable-next-line max-len\nconst STAR_PATH = new Path2D('M6.63869 12.1902L3.50621 14.1092C3.18049 14.3087 2.75468 14.2064 2.55515 13.8807C2.45769 13.7216 2.42864 13.5299 2.47457 13.3491L2.95948 11.4405C3.13452 10.7515 3.60599 10.1756 4.24682 9.86791L7.6642 8.22716C7.82352 8.15067 7.89067 7.95951 7.81418 7.80019C7.75223 7.67116 7.61214 7.59896 7.47111 7.62338L3.66713 8.28194C2.89387 8.41581 2.1009 8.20228 1.49941 7.69823L0.297703 6.69116C0.00493565 6.44581 -0.0335059 6.00958 0.211842 5.71682C0.33117 5.57442 0.502766 5.48602 0.687982 5.47153L4.35956 5.18419C4.61895 5.16389 4.845 4.99974 4.94458 4.75937L6.36101 1.3402C6.5072 0.987302 6.91179 0.819734 7.26469 0.965925C7.43413 1.03612 7.56876 1.17075 7.63896 1.3402L9.05539 4.75937C9.15496 4.99974 9.38101 5.16389 9.6404 5.18419L13.3322 5.47311C13.713 5.50291 13.9975 5.83578 13.9677 6.2166C13.9534 6.39979 13.8667 6.56975 13.7269 6.68896L10.9114 9.08928C10.7131 9.25826 10.6267 9.52425 10.6876 9.77748L11.5532 13.3733C11.6426 13.7447 11.414 14.1182 11.0427 14.2076C10.8642 14.2506 10.676 14.2208 10.5195 14.1249L7.36128 12.1902C7.13956 12.0544 6.8604 12.0544 6.63869 12.1902Z');\nconst STAR_SIZE_MULTIPLIER = 1.5;\n\nconst ConfettiContainer = ({ confetti }: StateProps) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height, style = 'poppers',\n  } = confetti || {};\n\n  const generateConfetti = useLastCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const {\n        position, velocity,\n      } = generateRandomPositionData(style, w, h, i);\n\n      const size = DEFAULT_CONFETTI_SIZE + randomNumberAroundZero(DEFAULT_CONFETTI_SIZE / 2);\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      confettiRef.current.push({\n        pos: position,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n        isStar: confetti?.withStars && Math.random() > 0.8,\n      });\n    }\n  });\n\n  const updateCanvas = useLastCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.5 ** (diff / 1), // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      if (c.isStar) {\n        ctx.save();\n        ctx.translate(pos.x, pos.y);\n        ctx.scale(\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n          (size / DEFAULT_CONFETTI_SIZE) * STAR_SIZE_MULTIPLIER,\n        );\n        ctx.rotate(rotation);\n        ctx.fill(STAR_PATH);\n        ctx.restore();\n      } else {\n        ctx.beginPath();\n        ctx.ellipse(\n          pos.x,\n          pos.y,\n          size,\n          flicker,\n          rotation,\n          0,\n          2 * Math.PI,\n        );\n        ctx.fill();\n      }\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestMeasure(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  });\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestMeasure(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const containerStyle = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={containerStyle}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n\nfunction generateRandomPositionData(\n  style: ConfettiStyle, containerWidth: number, containerHeight: number, index: number,\n) {\n  if (style === 'poppers') {\n    const leftSide = index % 2;\n    const position = {\n      x: containerWidth * (leftSide ? -0.1 : 1.1),\n      y: containerHeight * 0.66,\n    };\n    const randomX = Math.random() * containerWidth;\n    const randomY = -containerHeight - randomNumberAroundZero(containerHeight * 0.75);\n    const velocity = {\n      x: leftSide ? randomX : randomX * -1,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  } else {\n    const position = {\n      x: Math.random() * containerWidth,\n      y: -DEFAULT_CONFETTI_SIZE * 2,\n    };\n    const randomX = randomNumberAroundZero(containerWidth);\n    const randomY = -containerHeight * Math.random() * 1.25;\n    const velocity = {\n      x: randomX,\n      y: randomY,\n    };\n\n    return {\n      position,\n      velocity,\n    };\n  }\n}\n\nfunction randomNumberAroundZero(max: number = 1) {\n  return Math.random() * max - max / 2;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"RMsQzedH\",\"wave\":\"YLR2Oh2f\",\"waveGrow\":\"rqfv5Mai\"};","import React, {\n  memo, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { TabState } from '../../../global/types';\n\nimport { selectTabState } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport buildStyle from '../../../util/buildStyle';\nimport { addSvgDefinition, removeSvgDefinition, SVG_NAMESPACE } from '../../../util/svgController';\nimport windowSize from '../../../util/windowSize';\n\nimport useLastCallback from '../../../hooks/useLastCallback';\n\nimport styles from './WaveContainer.module.scss';\n\nimport waveRipple from '../../../assets/wave_ripple.svg';\n\ntype StateProps = {\n  waveInfo?: TabState['wave'];\n};\n\ntype Wave = {\n  startTime: number;\n  waveWidth: number;\n  top: number;\n  left: number;\n};\n\nconst BASE_SIZE_MULTIPLIER = 1.73;\nconst FILTER_ID = 'wave-filter';\nconst FILTER_SCALE = '20';\nconst WAVE_COUNT_LIMIT = 7;\n\nconst WaveContainer = ({ waveInfo }: StateProps) => {\n  const [waves, setWaves] = useState<Wave[]>([]);\n\n  const addWave = useLastCallback((newWave: Wave) => {\n    if (waves.length >= WAVE_COUNT_LIMIT) return;\n\n    setWaves((prevWaves) => [...prevWaves, newWave]);\n  });\n\n  useEffect(() => {\n    if (!waveInfo) return;\n\n    const { startX, startY } = waveInfo;\n    const { width, height } = windowSize.get();\n\n    const maxSize = Math.max(width - startX, height - startY, startX, startY);\n    const overlaySize = maxSize * BASE_SIZE_MULTIPLIER;\n    const top = startY - overlaySize / 2;\n    const left = startX - overlaySize / 2;\n\n    addWave({\n      startTime: waveInfo.lastWaveTime,\n      waveWidth: overlaySize,\n      top,\n      left,\n    });\n  }, [waveInfo]);\n\n  useEffect(() => {\n    const filter = document.createElementNS(SVG_NAMESPACE, 'filter');\n    filter.setAttribute('x', '0');\n    filter.setAttribute('y', '0');\n    filter.setAttribute('width', '1');\n    filter.setAttribute('height', '1');\n    filter.setAttribute('color-interpolation-filters', 'sRGB');\n    addSvgDefinition(filter, FILTER_ID);\n\n    const feImage = document.createElementNS(SVG_NAMESPACE, 'feImage');\n    feImage.setAttribute('href', waveRipple);\n    feImage.setAttribute('result', 'waveImage');\n    filter.appendChild(feImage);\n\n    const feDisplacementMap = document.createElementNS(SVG_NAMESPACE, 'feDisplacementMap');\n    feDisplacementMap.setAttribute('in', 'SourceGraphic');\n    feDisplacementMap.setAttribute('in2', 'waveImage');\n    feDisplacementMap.setAttribute('scale', FILTER_SCALE);\n    feDisplacementMap.setAttribute('xChannelSelector', 'R');\n    feDisplacementMap.setAttribute('yChannelSelector', 'B');\n    filter.appendChild(feDisplacementMap);\n\n    return () => {\n      removeSvgDefinition(FILTER_ID);\n    };\n  }, []);\n\n  return (\n    <div className={buildClassName(styles.root)} teactFastList>\n      {waves.map((wave) => (\n        <div\n          className={styles.wave}\n          style={buildStyle(\n            `--wave-width: ${wave.waveWidth}px`,\n            `--wave-pos-top: ${wave.top}px`,\n            `--wave-pos-left: ${wave.left}px`,\n          )}\n          key={wave.startTime}\n          onAnimationEnd={() => setWaves((prevWaves) => prevWaves.filter((w) => w !== wave))}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    return {\n      waveInfo: tabState.wave,\n    };\n  },\n)(WaveContainer));\n","import '../../global/actions/all';\n\nimport React, {\n  beginHeavyAnimation,\n  memo, useEffect, useLayoutEffect,\n  useRef, useState,\n} from '../../lib/teact/teact';\nimport { addExtraClass } from '../../lib/teact/teact-dom';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChatFolder, ApiMessage, ApiUser } from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\nimport type { LangCode } from '../../types';\nimport { ElectronEvent } from '../../types/electron';\n\nimport { BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER } from '../../config';\nimport { requestNextMutation } from '../../lib/fasterdom/fasterdom';\nimport {\n  selectCanAnimateInterface,\n  selectChatFolder,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsReactionPickerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectIsStoryViewerOpen,\n  selectPerformanceSettingsValue,\n  selectTabState,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport updateIcon from '../../util/updateIcon';\nimport { IS_ANDROID, IS_ELECTRON, IS_WAVE_TRANSFORM_SUPPORTED } from '../../util/windowEnvironment';\n\nimport useInterval from '../../hooks/schedulers/useInterval';\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLastCallback from '../../hooks/useLastCallback';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useBackgroundMode from '../../hooks/window/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/window/useBeforeUnload';\nimport { useFullscreenStatus } from '../../hooks/window/useFullscreen';\n\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DeleteMessageModal from '../common/DeleteMessageModal.async';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport ReactionPicker from '../middle/message/reactions/ReactionPicker.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport ModalContainer from '../modals/ModalContainer';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport RightColumn from '../right/RightColumn';\nimport StoryViewer from '../story/StoryViewer.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport Dialogs from './Dialogs.async';\nimport DownloadManager from './DownloadManager';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport GameModal from './GameModal';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport NewContactModal from './NewContactModal.async';\nimport Notifications from './Notifications.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport GiveawayModal from './premium/GiveawayModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport StarsGiftingPickerModal from './premium/StarsGiftingPickerModal.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport ConfettiContainer from './visualEffects/ConfettiContainer';\nimport WaveContainer from './visualEffects/WaveContainer';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  currentUserId?: string;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isStoryViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialog?: ApiChatFolder;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isReactionPickerOpen: boolean;\n  isGiveawayModalOpen?: boolean;\n  isDeleteMessageModalOpen?: boolean;\n  isStarsGiftingPickerModal?: boolean;\n  isCurrentUserPremium?: boolean;\n  noRightColumnAnimation?: boolean;\n  withInterfaceAnimations?: boolean;\n  isSynced?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main = ({\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isStoryViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  withInterfaceAnimations,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  requestedAttachBotInChat,\n  requestedDraft,\n  isPremiumModalOpen,\n  isGiveawayModalOpen,\n  isDeleteMessageModalOpen,\n  isStarsGiftingPickerModal,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isReactionPickerOpen,\n  isCurrentUserPremium,\n  deleteFolderDialog,\n  isMasterTab,\n  noRightColumnAnimation,\n  isSynced,\n  currentUserId,\n}: OwnProps & StateProps) => {\n  const {\n    initMain,\n    loadAnimatedEmojis,\n    loadBirthdayNumbersStickers,\n    loadRestrictedEmojiStickers,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadStarGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openThread,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n    loadTopReactions,\n    loadRecentReactions,\n    loadDefaultTagReactions,\n    loadFeaturedEmojiStickers,\n    setIsElectronUpdateAvailable,\n    loadAuthorizations,\n    loadPeerColors,\n    loadSavedReactionTags,\n    loadTimezones,\n    loadQuickReplies,\n    loadStarStatus,\n    loadAvailableEffects,\n    loadTopBotApps,\n    loadPaidReactionPrivacy,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const leftColumnRef = useRef<HTMLDivElement>(null);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  useEffect(() => {\n    if (!IS_ELECTRON) {\n      return undefined;\n    }\n\n    const removeUpdateAvailableListener = window.electron!.on(ElectronEvent.UPDATE_AVAILABLE, () => {\n      setIsElectronUpdateAvailable(true);\n    });\n\n    const removeUpdateErrorListener = window.electron!.on(ElectronEvent.UPDATE_ERROR, () => {\n      setIsElectronUpdateAvailable(false);\n      removeUpdateAvailableListener?.();\n    });\n\n    return () => {\n      removeUpdateErrorListener?.();\n      removeUpdateAvailableListener?.();\n    };\n  }, []);\n\n  // Initial API calls\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadPeerColors();\n      initMain();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadAttachBots();\n      loadContactList();\n      loadDefaultTopicIcons();\n      checkAppVersion();\n      loadTopReactions();\n      loadRecentReactions();\n      loadDefaultTagReactions();\n      loadFeaturedEmojiStickers();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadTimezones();\n      loadQuickReplies();\n      loadStarStatus();\n      loadPremiumGifts();\n      loadStarGifts();\n      loadAvailableEffects();\n      loadBirthdayNumbersStickers();\n      loadRestrictedEmojiStickers();\n      loadGenericEmojiEffects();\n      loadSavedReactionTags();\n      loadAuthorizations();\n      loadTopBotApps();\n      loadPaidReactionPrivacy();\n    }\n  }, [isMasterTab, isSynced]);\n\n  // Initial Premium API calls\n  useEffect(() => {\n    if (isMasterTab && isCurrentUserPremium) {\n      loadDefaultStatusIcons();\n      loadRecentEmojiStatuses();\n    }\n  }, [isCurrentUserPremium, isMasterTab]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffect(() => {\n    if (isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [isMasterTab]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (isMasterTab && isSynced) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [addedSetIds, addedCustomEmojiIds, isMasterTab, isSynced]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [isServiceChatReady, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (!wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [wasTimeFormatSetManually]);\n\n  // Parse deep link\n  useEffect(() => {\n    if (!isSynced) return;\n    updatePageTitle();\n\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [isSynced]);\n\n  useEffect(() => {\n    return window.electron?.on(ElectronEvent.DEEPLINK, (link: string) => {\n      processDeepLink(decodeURIComponent(link));\n    });\n  }, []);\n\n  useEffect(() => {\n    const parsedLocationHash = parseLocationHash(currentUserId);\n    if (!parsedLocationHash) return;\n\n    openThread({\n      chatId: parsedLocationHash.chatId,\n      threadId: parsedLocationHash.threadId,\n      type: parsedLocationHash.type,\n    });\n  }, [currentUserId]);\n\n  // Restore Transition slide class after async rendering\n  useLayoutEffect(() => {\n    const container = containerRef.current!;\n    if (container.parentNode!.childElementCount === 1) {\n      addExtraClass(container, 'Transition_slide-active');\n    }\n  }, []);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isLeftColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'left-column-',\n  });\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || !withInterfaceAnimations) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      requestNextMutation(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [isLeftColumnOpen, withInterfaceAnimations, forceUpdate]);\n\n  useShowTransition({\n    ref: containerRef,\n    isOpen: isRightColumnOpen,\n    noCloseTransition: shouldSkipHistoryAnimations,\n    prefix: 'right-column-',\n  });\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  const isFullscreen = useFullscreenStatus();\n\n  // Handle opening right column\n  useSyncEffect(([prevIsMiddleColumnOpen, prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (!prevIsMiddleColumnOpen || noRightColumnAnimation) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const endHeavyAnimation = beginHeavyAnimation();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      endHeavyAnimation();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [isMiddleColumnOpen, isRightColumnOpen, noRightColumnAnimation, forceUpdate]);\n\n  const className = buildClassName(\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n    isFullscreen && 'is-fullscreen',\n  );\n\n  const handleBlur = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  });\n\n  const handleFocus = useLastCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  });\n\n  const handleStickerSetModalClose = useLastCallback(() => {\n    closeStickerSetModal();\n  });\n\n  const handleCustomEmojiSetsModalClose = useLastCallback(() => {\n    closeCustomEmojiSets();\n  });\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus, !!IS_ELECTRON);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen || isStoryViewerOpen);\n\n  return (\n    <div ref={containerRef} id=\"Main\" className={className}>\n      <LeftColumn ref={leftColumnRef} />\n      <MiddleColumn leftColumnRef={leftColumnRef} isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <StoryViewer isOpen={isStoryViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <ModalContainer />\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <DownloadManager />\n      <ConfettiContainer />\n      {IS_WAVE_TRANSFORM_SUPPORTED && <WaveContainer />}\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal\n        bot={botTrustRequestBot}\n        type={botTrustRequest?.type}\n        shouldRequestWriteAccess={botTrustRequest?.shouldRequestWriteAccess}\n      />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      <PremiumMainModal isOpen={isPremiumModalOpen} />\n      <GiveawayModal isOpen={isGiveawayModalOpen} />\n      <StarsGiftingPickerModal isOpen={isStarsGiftingPickerModal} />\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog folder={deleteFolderDialog} />\n      <ReactionPicker isOpen={isReactionPickerOpen} />\n      <DeleteMessageModal isOpen={isDeleteMessageModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          language, wasTimeFormatSetManually,\n        },\n      },\n      currentUserId,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInChat,\n      requestedDraft,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      giveawayModal,\n      deleteMessageModal,\n      starsGiftingPickerModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const noRightColumnAnimation = !selectPerformanceSettingsValue(global, 'rightColumnAnimations')\n        || !selectCanAnimateInterface(global);\n\n    const deleteFolderDialog = deleteFolderDialogModal ? selectChatFolder(global, deleteFolderDialogModal) : undefined;\n\n    return {\n      currentUserId,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isStoryViewerOpen: selectIsStoryViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      isReactionPickerOpen: selectIsReactionPickerOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      withInterfaceAnimations: selectCanAnimateInterface(global),\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      requestedAttachBotInChat,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      isGiveawayModalOpen: giveawayModal?.isOpen,\n      isDeleteMessageModalOpen: Boolean(deleteMessageModal),\n      isStarsGiftingPickerModal: starsGiftingPickerModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialog,\n      isMasterTab,\n      requestedDraft,\n      noRightColumnAnimation,\n      isSynced: global.isSynced,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { decryptSession, UnrecoverablePasscodeError } from '../../util/passcode';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\n\nimport useTimeout from '../../hooks/schedulers/useTimeout';\nimport useFlag from '../../hooks/useFlag';\nimport useOldLang from '../../hooks/useOldLang';\nimport useShowTransitionDeprecated from '../../hooks/useShowTransitionDeprecated';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\n\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    timeoutUntil,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useOldLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransitionDeprecated(isLocked);\n\n  useTimeout(resetInvalidUnlockAttempts, timeoutUntil ? timeoutUntil - Date.now() : undefined);\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, (err) => {\n      if (err instanceof UnrecoverablePasscodeError) {\n        signOut({ forceInitApi: true });\n      }\n\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [lang, timeoutUntil]);\n\n  useEffect(() => {\n    if (timeoutUntil !== undefined) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [timeoutUntil, lang, invalidAttemptsCount]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"bdKGCai4\",\"wrapper\":\"BIi4Pl4Z\",\"icon\":\"JwlsF2tF\",\"help\":\"VlXFyC_a\"};","import { getActions, getGlobal } from '../global';\n\nimport { DEBUG } from '../config';\nimport { IS_MULTITAB_SUPPORTED } from '../util/windowEnvironment';\n\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n","import type {\n  ApiInputInvoice,\n  ApiMessage,\n  ApiRequestInputInvoice,\n  ApiStarsTransaction,\n  ApiStarsTransactionPeer,\n  ApiStarsTransactionPeerPeer,\n} from '../../api/types';\nimport type { CustomPeer } from '../../types';\nimport type { GlobalState } from '../types';\n\nimport { formatInteger } from '../../util/textFormat';\nimport { selectChat, selectUser } from '../selectors';\n\nexport function getRequestInputInvoice<T extends GlobalState>(\n  global: T, inputInvoice: ApiInputInvoice,\n): ApiRequestInputInvoice | undefined {\n  if (inputInvoice.type === 'slug') return inputInvoice;\n\n  if (inputInvoice.type === 'stargift') {\n    const {\n      userId, shouldHideName, giftId, message,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stargift',\n      user,\n      shouldHideName,\n      giftId,\n      message,\n    };\n  }\n\n  if (inputInvoice.type === 'starsgift') {\n    const {\n      userId, stars, amount, currency,\n    } = inputInvoice;\n    const user = selectUser(global, userId);\n\n    if (!user) return undefined;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'starsgift',\n        user,\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'stars') {\n    const {\n      stars, amount, currency,\n    } = inputInvoice;\n\n    return {\n      type: 'stars',\n      purpose: {\n        type: 'stars',\n        stars,\n        amount,\n        currency,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'chatInviteSubscription') {\n    const { hash } = inputInvoice;\n\n    return {\n      type: 'chatInviteSubscription',\n      hash,\n    };\n  }\n\n  if (inputInvoice.type === 'message') {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return undefined;\n    }\n    return {\n      type: 'message',\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  if (inputInvoice.type === 'giftcode') {\n    const {\n      userIds, boostChannelId, amount, currency, option, message,\n    } = inputInvoice;\n    const users = userIds.map((id) => selectUser(global, id)).filter(Boolean);\n    const boostChannel = boostChannelId ? selectChat(global, boostChannelId) : undefined;\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giftcode',\n        amount,\n        currency,\n        users,\n        boostChannel,\n        message,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'starsgiveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription, stars, users,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'starsgiveaway',\n      purpose: {\n        type: 'starsgiveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n        stars,\n        users,\n      },\n    };\n  }\n\n  if (inputInvoice.type === 'giveaway') {\n    const {\n      chatId, additionalChannelIds, amount, currency, option, untilDate, areWinnersVisible, countries,\n      isOnlyForNewSubscribers, prizeDescription,\n    } = inputInvoice;\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return undefined;\n    }\n    const additionalChannels = additionalChannelIds?.map((id) => selectChat(global, id)).filter(Boolean);\n\n    return {\n      type: 'giveaway',\n      option,\n      purpose: {\n        type: 'giveaway',\n        amount,\n        currency,\n        chat,\n        additionalChannels,\n        untilDate,\n        areWinnersVisible,\n        countries,\n        isOnlyForNewSubscribers,\n        prizeDescription,\n      },\n    };\n  }\n\n  return undefined;\n}\n\nexport function buildStarsTransactionCustomPeer(\n  peer: Exclude<ApiStarsTransactionPeer, ApiStarsTransactionPeerPeer>,\n): CustomPeer {\n  if (peer.type === 'appStore') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.AppleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.AppleTopUp.Subtitle',\n      peerColorId: 5,\n    };\n  }\n\n  if (peer.type === 'playMarket') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.GoogleTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.GoogleTopUp.Subtitle',\n      peerColorId: 3,\n    };\n  }\n\n  if (peer.type === 'fragment') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.FragmentTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.FragmentTopUp.Subtitle',\n      customPeerAvatarColor: '#000000',\n    };\n  }\n\n  if (peer.type === 'premiumBot') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Title',\n      subtitleKey: 'Stars.Intro.Transaction.PremiumBotTopUp.Subtitle',\n      peerColorId: 1,\n      withPremiumGradient: true,\n    };\n  }\n\n  if (peer.type === 'ads') {\n    return {\n      avatarIcon: 'star',\n      isCustomPeer: true,\n      titleKey: 'Stars.Intro.Transaction.TelegramAds.Title',\n      subtitleKey: 'Stars.Intro.Transaction.TelegramAds.Subtitle',\n      peerColorId: 2,\n    };\n  }\n\n  return {\n    avatarIcon: 'star',\n    isCustomPeer: true,\n    titleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    subtitleKey: 'Stars.Intro.Transaction.Unsupported.Title',\n    peerColorId: 0,\n  };\n}\n\nexport function formatStarsTransactionAmount(amount: number) {\n  if (amount < 0) {\n    return `- ${formatInteger(Math.abs(amount))}`;\n  }\n\n  return `+ ${formatInteger(amount)}`;\n}\n\nexport function getStarsTransactionFromGift(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'giftStars') return undefined;\n\n  const { transactionId, stars } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: message.isOutgoing ? message.chatId : (message.senderId || message.chatId),\n    },\n    date: message.date,\n    isGift: true,\n    isMyGift: message.isOutgoing || undefined,\n  };\n}\n\nexport function getPrizeStarsTransactionFromGiveaway(message: ApiMessage): ApiStarsTransaction | undefined {\n  const { action } = message.content;\n\n  if (action?.type !== 'prizeStars') return undefined;\n\n  const { transactionId, stars, targetChatId } = action;\n\n  return {\n    id: transactionId!,\n    stars: stars!,\n    peer: {\n      type: 'peer',\n      id: targetChatId!,\n    },\n    date: message.date,\n    giveawayPostId: message.id,\n  };\n}\n"],"names":["MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","global","x","selectTabState","isLeftColumnShown","getIsMobile","leftColumnWidth","windowWidth","windowSize","get","width","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","Math","min","max","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","addMessageReaction","message","userReactions","isInSavedMessages","selectIsChatWithSelf","chatId","currentReactions","reactions","results","areTags","currentSendAs","selectSendAs","updateReactionCount","recentReactions","length","filter","_ref","isOwn","peerId","currentUserId","forEach","reaction","type","unshift","id","addedDate","floor","Date","now","updateChatMessage","updateUnreadReactions","update","updateChat","ANIMATION_DELAY","updateReactions","actions","chat","isOutgoing","areDeepEqual","localPaidReaction","find","r","localAmount","addPaidReaction","isUnread","selectPerformanceSettingsValue","messageKey","getMessageKey","startActiveReaction","containerId","tabId","getCurrentTabId","hasUnreadReactionsForMessageInChat","unreadReactions","includes","hasUnreadReactionsInNewReactions","checkIfHasUnreadReactions","unreadReactionsCount","sort","a","b","newMessage","selectChatMessage","onTickEnd","notifyAboutMessage","isReaction","i","updateWithLocalMedia","messageUpdate","isScheduled","arguments","undefined","currentMessage","selectScheduledMessage","content","isLocalMessageId","photo","video","sticker","document","getMessageContent","_messageUpdate$conten","_messageUpdate$conten2","blobUrl","thumbnail","_messageUpdate$conten3","_messageUpdate$conten4","isPreloadedGlobally","_messageUpdate$conten5","previewBlobUrl","updateScheduledMessage","updateThreadUnread","isDeleting","replyInfo","getMessageReplyInfo","threadInfo","selectThreadByMessage","replyToMsgId","originMessage","updateThreadUnreadFromForwardedMessage","loadMessage","messageId","threadUpdate","lastMessageId","updateListedAndViewportIds","savedDialogId","selectSavedDialogIdFromMessage","selectChat","isUnreadChatNotLoaded","unreadCount","selectListedIds","MAIN_THREAD_ID","threadId","updateListedIds","Object","values","byTabId","_ref6","selectIsViewportNewest","firstUnreadId","selectFirstUnreadId","candidateGlobal","addViewportId","newViewportIds","selectViewportIds","replaceThreadParam","isMessageLocal","isActionMessage","updateThreadInfo","messagesCount","_ref7","updateChatLastMessage","force","chats","byId","currentLastMessageId","selectChatLastMessageId","topic","isForum","selectTopicFromMessage","updateTopic","updateChatLastMessageId","previousLocalId","findLastMessage","selectChatMessages","listedIds","deleteMessages","ids","threadIdsToUpdate","Set","add","selectTopic","deleteTopic","action","deletePeerPhoto","selectThreadIdFromMessage","requestChatUpdate","idsSet","selectThreadInfo","has","newLastMessage","Number","loadTopicById","topicId","setGlobal","setTimeout","getGlobal","deleteChatMessages","chatIdsToUpdate","commonBoxChatId","selectCommonBoxChatId","push","getIsSavedDialog","newLastSavedDialogMessage","requestSavedDialogUpdate","String","unique","addActionHandler","shouldForceReply","wasDrafted","poll","storyReplyInfo","getStoryReplyInfo","isForumTopic","isLocal","updateChatMediaLoadingState","selectIsMessageInCurrentMessageList","storyId","storyData","currentMessageList","selectCurrentMessageList","focusMessage","noHighlight","isResizingContainer","updateDraftReplyInfo","updatePoll","selectIsChatListed","loadTopChats","lastMessage","addMessages","_ref2","currentChatId","getMessageText","emoji","tabState","updateTabState","activeEmojiInteractions","random","animatedEffect","scheduledIds","selectScheduledIds","threadScheduledIds","text","clearMessageTranslation","keys","selectChatScheduledMessages","map","updateQuickReplyMessage","messageIds","deleteQuickReplyMessages","quickReplies","buildCollectionByKey","updateQuickReplies","deleteQuickReply","quickReplyId","localId","deleteChatScheduledMessages","fileUploads","byMessageKey","omit","thread","_ref3","currentThreadId","markMessageListRead","maxId","lastReadInboxMessageId","isPinned","messages","pickTruthy","updatePerThread","currentUpdatedInThread","entries","_ref4","pinnedIds","selectPinnedIds","newPinnedIds","concat","updateThreadInfos","currentThreadInfo","lastReadInboxMessageIdInThread","messagesById","isUserId","loadFullChat","loadViewportMessages","scheduledMessages","deleteScheduledMessages","chatMessages","byChatId","SERVICE_NOTIFICATIONS_USER_ID","serviceNotifications","notification","isDeleted","removeChatFromChatLists","deleteThread","channelId","pollId","pollUpdate","options","updatePollVote","selectIsServiceChatReady","createServiceNotification","extendedMedia","isBought","invoice","media","mediaType","paidMedia","paidMediaUpdate","transcriptionId","isPending","transcriptions","error","match","_ref5","showAllowedMessageTypesNotification","sendingState","toLanguageCode","translations","updateMessageTranslations","uploadProgressCallbacks","Map","runDebouncedForMarkRead","debounce","cb","async","saveDraft","draft","isLocalOnly","noLocalTimeUpdate","user","selectUser","isDeletedUser","selectMessageReplyInfo","newDraft","date","draftDate","callApi","offsetId","direction","isOutlying","isBudgetPreload","onLoaded","_len2","Array","_key2","addOffset","sliceSize","MESSAGE_LIST_SLICE","LoadMoreDirection","Backwards","Around","round","Forwards","isSavedDialog","realChatId","result","limit","count","localMessages","allMessages","threadFirstMessageId","selectFirstMessageId","addChatMessagesById","updateOutlyingLists","outlyingList","selectOutlyingListByMessageId","areSortedArraysIntersecting","removeOutlyingList","historyIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","findIndex","findClosestIndex","indexForDirection","from","to","slice","areSomeLocal","areAllLocal","sendMessage","params","currentMessageKey","progressCallback","attachment","progress","set","updateUploadByMessageKey","IS_IOS","rafPromise","delete","fetchUnreadMentions","addUnreadMentions","payload","shouldForceRender","onError","isRestricted","viewportIds","Boolean","_len","_key","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","forceOnHeavyAnimation","replyOriginForId","MESSAGE_DELETED","replyMessage","messageList","storyPeerId","selectCurrentViewedStory","isStoryReply","scheduledAt","contentToBeScheduled","selectDraft","isForwarding","forwardMessages","draftReplyInfo","messageReplyInfo","noWebPage","selectNoWebPage","sendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","reduce","acc","arr","getAttachmentType","splitAttachmentsByType","hasSentCaption","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","groupedId","isFirst","isLast","quick","shouldSendAsFile","firstAttachment","restAttachments","firstAttachments","lastAttachment","replyToForFirstMessage","userIds","chatFullInfo","selectChatFullInfo","inviteLink","userFullNames","Promise","all","userId","userFullName","getUserFullName","showNotification","oldTranslate","join","messageListType","selectEditingMessage","setEditingId","cancelApiProgress","apiUpdate","currentDraft","effectId","shouldKeepReply","currentReplyInfo","updatedReplyInfo","isUnpin","isOneSide","isSilent","selectCurrentChat","shouldDeleteForAll","messageIdsToDelete","isChatChannel","editingId","selectEditingId","selectEditingScheduledId","activeChat","openChat","folders","chatFolders","folder","includedChatIds","pinnedChatIds","newIncludedChatIds","newPinnedChatIds","updatedFolder","folderUpdate","description","option","response","peer","MESSAGE_ID_REQUIRED_ERROR","closeReportModal","oldSections","reportModal","sections","selectedOption","o","newSection","title","subtitle","subject","isOptional","connectionState","isUserBot","participantId","selectPeer","minId","readCount","l","countSortedIds","newTopicUnreadCount","shouldFetchUnreadReactions","then","fetchUnreadReactions","webPagePreview","selectPollFromMessage","offset","shouldResetVoters","pollResults","voters","votes","vote","offsets","nextOffset","fromChatId","toChatId","withMyScore","noAuthors","noCaptions","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","isToMainThread","fromChat","toChat","realMessages","serviceMessages","partition","m","isServiceNotificationMessage","isShareMessageModalShown","updateScheduledMessages","scheduledPerThread","scheduledInThread","isTranscriptionError","ignoreCache","newCustomEmojiIds","documentId","customEmojis","customEmoji","safeReplacePinnedIds","seenByDates","sendAsId","sendAsChat","updateChatFullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","randomId","isMedia","isFullscreen","openPremiumModal","initialSection","closeReportAdModal","deleteSponsoredMessage","reportAdModal","enabled","updateUserFullInfo","areAdsEnabled","removeUnreadMentions","markMessagesRead","unreadMentions","previousChatId","unreadMentionsCount","url","shouldSkipModal","ignoreDeepLinks","urlWithProtocol","ensureProtocol","isDeepLink","closeStoryViewer","closePaymentModal","openTelegramLink","appConfig","config","parsedUrl","URL","autologinToken","autologinDomains","hostname","searchParams","window","open","href","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","replyingInfo","replyingMessage","currentChat","newReplyInfo","replyToTopId","replyToPeerId","quoteText","selectReplyCanBeSentToChat","moveReplyToNewDraft","openThread","closeMediaViewer","exitMessageSelectMode","clearDraft","selectForwardsContainVoiceMessages","fullInfo","selectUserFullInfo","accessHash","noVoiceMessages","checkIfVoiceMessagesAllowed","showDialog","data","selectForwardsCanBeSentToChat","story","selectPeerStory","selectTranslationLanguage","updateRequestedMessageTranslation","replaceSettings","translationLanguage","removeRequestedMessageTranslation","selectLanguageCode","updateMessageTranslation","markMessagesTranslationPending","viewsIncrementTimeout","idsToIncrementViews","incrementViews","clearTimeout","loadMessageViews","getActions","shouldIncrement","mimeType","SUPPORTED_AUDIO_CONTENT_TYPES","GIF_MIME_TYPE","SUPPORTED_PHOTO_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","voice","viewsInfo","viewsCount","views","forwardsCount","forwards","factCheck","readDate","userStatus","selectUserStatus","updateStatus","isReadDateRestricted","isReadDateRestrictedByMe","replaceUserStatuses","updateQuickReplyMessages","shortcutId","shouldIncludeThread","shouldIncludeGrouped","showErrorOccurredNotification","isChatSuperGroup","callApiExportMessageLinkPromise","copyTextToClipboardFromPromise","showLinkCopiedNotification","searchThrottled","throttle","loadRecentStickers","hash","recentStickers","stickers","recent","loadStickers","stickerSetInfo","stickerSet","openedStickerSetShortName","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","query","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","added","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","recentCustomEmojis","setIds","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","BIRTHDAY_NUMBERS_SET","birthdayNumbers","RESTRICTED_EMOJI_SET","restrictedEmoji","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","langProvider","toString","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","isLoading","fromVersion","version","keywords","resultIds","searchWords","updateStickerSearch","gifSearchUsername","gifSearch","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","getChatGroupOrChannelMessage","isChatGroup","localMessage","globalSearch","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","accountResultIds","globalResultIds","updateGlobalSearch","localResults","peerIds","globalResults","maxDate","timestampPlusDay","minDate","resultsByType","totalCount","foundIds","nextOffsetId","searchMessagesGlobal","nextOffsetPeerId","nextOffsetRate","offsetRate","offsetPeer","messageLink","inChatResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","inChatResult","topics","localTopics","totalTopicsCount","link","tryParseDeepLink","localChat","selectChatByUsername","getMessageByPublicLink","internalChannelId","toChannelId","getMessageByPrivateLink","userStatusesById","addUserStatuses","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","popularBotApps","botApps","searchSharedMedia","resultChatId","SHARED_MEDIA_SLICE","newFoundIds","selectCurrentSharedMediaSearch","updateSharedMediaSearchResults","currentSearch","selectCurrentMiddleSearch","updateMiddleSearch","savedTag","isHashtag","offsetPeerId","fetchingQuery","MESSAGE_SEARCH_SLICE","hashtag","getSearchResultKey","hasTagChanged","isSameReaction","hasSearchChanged","updateMiddleSearchResults","cleanQuery","replace","requestedQuery","currentType","currentResults","currentMediaMessageId","selectCurrentChatMediaSearch","initializeChatMediaSearchResults","chatMediaSearchParams","CHAT_MEDIA_SLICE","isSynced","currentSegment","isInsideSortedArrayRange","segments","segment","splice","selectCurrentChatMediaSearchSegment","currentMessageId","currentSegmentFoundIdsCount","idIndexInSegment","indexOf","loadingState","areAllItemsLoadedBackwards","areAllItemsLoadedForwards","preloadOffset","lastMediaIndex","calcLoadMoreDirection","calcChatMediaSearchOffsetId","calcChatMediaSearchAddOffset","setChatMediaSearchLoading","newFoundIdsCount","calcLoadingState","filteredIds","getChatMediaMessageIds","mergeWithChatMediaSearchSegment","updateChatMediaSearchResults","searchChatMedia","timestamp","management","ManagementProgress","InProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","Complete","Error","openLimitReachedModal","shouldDisableUsernames","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","settings","file","isSuggest","loadMoreProfilePhotos","shouldInvalidateCache","getUserFirstOrLastName","releaseStatusTimeout","previousGlobal","loadTopMessages","DEBUG","console","log","isSyncing","loadAllChats","preloadTopChatMessages","loadAllStories","loadAllHiddenStories","initFolderManager","listType","whenFirstBatchDone","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","omitUndefined","editingDraft","selectEditingDraft","lastMessages","lastMessageIds","savedLastMessages","activeThreadId","resultDiscussion","newCurrentChatId","currentChatMessages","selectTopics","topicLastMessages","resultMessageIds","messagesThreadInfos","pick","some","firstMessageId","topMessages","allMessagesWithTopicLastMessages","_ref8","otherTabId","tabThreads","_ref9","isCommentsInfo","_ref10","otherChatId","otherThreadId","updateChats","updateUsers","users","loadTopics","shouldCloseChatOnError","_ref11","threads","updateThread","_ref12","audioChatId","audioMessageId","audioPlayer","closeAudioPlayer","loadAndReplaceMessages","isFetchingDifference","addCallback","authState","isMasterTab","sync","reason","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","isConfirmed","isUnconfirmed","days","webAuthorizations","activeWebSessions","runThrottledForSearch","withPhotos","newUser","newFullInfo","profilePhotos","selectPeerPhotos","hasChangedPhoto","avatarPhotoId","profilePhoto","fallbackPhoto","personalPhoto","updateUser","statusesById","topPeers","lastRequestedAt","getServerTime","contactList","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","selectUserCommonChats","isFullyLoaded","chatIds","updateUserCommonChats","isMuted","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","loadPeerStories","closeNewContactDialog","isPreload","isPrivate","updatePeerPhotosIsLoading","userFullInfo","peerFullInfo","photos","updatePeerPhotos","newPhotos","userSearch","updateUserSearchFetchingStatus","localUserIds","globalUserIds","updateUserSearch","emojiStatus","expires","isCloseFriend","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","updateWebApp","webApp","_len3","_key3","currentTabState","openedWebApps","webApps","key","getWebAppKey","originalWebApp","updatedValue","updatedWebAppKey","activeWebApp","activeWebAppKey","addWebAppToOpenList","makeActive","openModalIfNotOpen","_len5","_key5","newOpenedKeys","openedOrderedKeys","newSessionKeys","sessionKeys","isModalOpen","modalState","removeWebAppFromOpenList","skipClosingConfirmation","_len7","_key7","shouldConfirmClosing","isCloseModalOpen","updatedOpenedWebApps","removingWebAppKey","isRemovedAppActive","openedWebAppsValues","openedWebAppsCount","hasOpenedWebApps","_len9","_key9","replaceIsWebAppModalOpen","value","_len11","_key11","runDebouncedForSearch","botFatherId","gameePopups","checkIfOpenOrActivate","botId","requestUrl","webAppName","webAppForCheck","isWepAppOpened","webAppKey","_len4","_key4","newActiveWebApp","activateWebAppIfOpen","handleUrlAuthResult","urlAuth","domain","bot","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","answerCallbackButton","isGame","openUrl","openGame","alert","isError","button","copyTextToClipboard","copyText","openPollModal","isQuiz","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","sender","selectSender","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","viaBotId","requestWebView","requestBotUrlAuth","buttonId","resetDraftReplyInfo","selectBot","removeBlockedUser","topInlineBots","topBotApps","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","newResults","help","isGallery","switchWebview","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","currentUser","contact","isFromSideMenu","isFromSwitchWebView","selectIsTrustedBot","botTrustRequest","onConfirm","webViewUrl","isFromBotMenu","shouldMarkBotTrusted","markBotTrusted","isWriteAllowed","medias","previewMediaByBotId","appName","startApp","isFromConfirm","shouldSkipBotTrustRequest","isAttachBotInstalled","attachMenu","bots","isAttachBot","attachBot","isDisclaimerNeeded","isForAttachMenu","isForSideMenu","requestedAttachBotInstall","botApp","isInactive","app","closeActiveWebApp","_len6","_key6","removeActiveWebAppFromOpenList","_len8","_key8","webAppsNotAllowedToClose","fromEntries","webAppsNotAllowedToCloseValues","currentActiveWebApp","k","clearOpenedWebApps","_len10","_key10","replaceWebAppModalState","slug","trustedBotIds","newTrustedBotIds","callbackPayload","loadAttachBots","requestActionTimeout","GENERAL_REFETCH_INTERVAL","isEnabled","shouldDisplayDisclaimer","botUser","actionPayload","supportedFilters","attachMenuPeerTypes","requestedAttachBotInChat","callAttachBot","name","about","langCode","byKey","bio","fetchChatByUsername","BOT_FATHER_USERNAME","startBot","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","STRIPE_ERRORS","missing_payment_information","field","invalid_number","number","exp_year","exp_month","invalid_expiry_year","invalid_expiry_month","cvc","invalid_cvc","requestInfo","saveInfo","inputInvoice","selectPaymentInputInvoice","requestInputInvoice","getRequestInputInvoice","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","setPaymentStep","PaymentStep","Shipping","Checkout","validateRequestedInfo","isPaymentFormLoading","form","updatePayment","isPaymentModalOpen","isExtendedMedia","status","starsPayment","gift","shouldHideName","balance","stars","openStarsBalanceModal","giftId","sendStarPaymentForm","starGift","formId","receipt","openStarsTransactionFromReceipt","setReceipt","payment","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","buildQueryString","cardNumber","expiryMonth","expiryYear","cvv","zip","country","fetch","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","expiration_month","expiration_year","security_code","tokenizeUrl","nativeParams","DEBUG_PAYMENT_SMART_GLOCAL","startsWith","endsWith","Accept","body","JSON","stringify","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","requestInfoId","selectPaymentRequestId","paymentState","temporaryPassword","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","closeInvoice","starPayment","selectStarsPayment","subscriptionInfo","subscriptionFormId","updateStarsPayment","closeStarsPaymentModal","closeGiftModal","loadStarStatus","step","premiumModal","promo","isOpen","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","closeReactionPicker","prepaidGiveaway","starOptions","giveawayModal","gifts","forUserId","giftModal","starsGiftOptions","starsGiftModal","boostModal","closeBoostModal","boostStatus","myBoosts","boosts","boostStatistics","boostListResult","boostListGiftResult","boostStatusResult","isGifts","list","boostList","giftedBoosts","monetizationStatistics","isLoadingBoosters","updatedBoostList","slots","oldChatFullInfo","oldBoostsApplied","boostsApplied","appliedBoostsCount","oldStatus","boostsPerLevel","nextLevelBoosts","currentLevelBoosts","newBoosts","isLevelUp","newCurrentLevelBoosts","newNextLevelBoosts","level","hasMyBoost","oldMyBoosts","unixNow","newMyBoosts","boost","slot","cooldownUntil","giftCodeModal","info","requestConfetti","withStars","closeGiftCodeModal","giveawayId","paymentPurpose","additionalChannels","additionalChannelIds","areWinnersVisible","countries","prizeDescription","untilDate","currency","amount","openBoostStatistics","currentStatus","needsTopupOptions","topupOptions","history","inbound","outbound","subscriptions","appendStarsTransactions","nextHistoryOffset","appendStarsSubscriptions","nextSubscriptionOffset","isInbound","isOutbound","updateStarsBalance","starGiftsById","starGiftCategoriesByName","limited","allStarGiftIds","allStarGifts","limitedStarGiftIds","isLimited","starsCategory","starGifts","shouldRefresh","currentGifts","giftsById","localNextOffset","newGifts","isCancelled","subscriptionId","loadUserGifts","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","BlobUrl","centerIcon","appearAnimation","selectAnimation","getDocumentMediaHash","availableReactions","effectById","effect","effectAnimationId","emoticon","availableEffectById","effectReactions","y","startSize","isReversed","activeEmojiInteraction","INTERACTION_RANDOM_OFFSET","interactions","timestamps","selectDefaultReaction","toggleReaction","shouldAddToRecent","isInSaved","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","selectMessageIdsByGroupId","getUserReactions","hasReaction","userReaction","newUserReactions","selectMaxUserReactions","paidReactions","regularReactions","trimmedRegularReactions","localReactions","stopActiveReaction","loadSavedReactionTags","newReactions","forcedAmount","paidReaction","resetLocalPaidReactions","localIsPrivate","originReaction","currentActiveReactions","activeReactions","active","newActiveReactions","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","scrollTargetPosition","topReactions","defaultTags","savedReactionTags","tagsByKey","buildCollectionByCallback","tags","tag","getReactionKey","newTag","isGroup","dcId","statisticsDcId","stats","updateStatistics","updateChannelMonetizationStatistics","reactionsCount","updateMessageStatistics","loadMessagePublicForwards","statistics","publicForwards","shouldOmitFirstElement","publicForwardsData","isPercentage","updateStatisticsGraph","updateStoryStatistics","loadStoryPublicForwards","currentStory","updateMonetizationInfo","stories","hasNext","stateHash","isFirstRequest","state","addStories","peerStories","updatePeersWithStories","updateStealthMode","stealthMode","hasMore","hasNextInArchive","archiveStateHash","isHidden","selectPeerStories","skippedStoryIds","addStoriesForPeer","updateLastViewedStoryForPeer","serverTime","isInProfile","byPeerId","lastReadId","updateLastReadStoryForPeer","removePeerStory","currentIsPinned","updatePeerStory","updatePeerProfileStory","oldPinnedIds","selectPinnedStories","s","storyIds","lastReadStoryId","updatePeerStoriesFullyLoaded","isArchiveFullyLoaded","updatePeerStoryViews","areReactionsFirst","areJustContacts","updateStoryViewsLoading","updateStoryViews","privacy","allowedIds","allowUserIds","allowChatIds","blockedIds","blockUserIds","blockChatIds","inputPrivacy","buildApiInputPrivacyRules","visibility","isUnspecified","updatePeerStoriesHidden","peers","peerIdsToLoad","updatePeer","maxStoryId","hasStories","previousReaction","sentReaction","updateSentStoryReaction","isForPast","isForFuture","shouldReplaceHistory","shouldReplaceLast","noForumTopicPanel","hideEffectInComposer","closeStarsBalanceModal","closeStarsTransactionModal","replaceTabThreadParam","shouldPreventComposerAnimation","closeMiddleSearch","isStatisticsShown","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","hashUrl","createMessageHashUrl","IS_ELECTRON","electron","openNewWindow","profileTab","forceScrollProfileTab","isChatInfoShown","nextProfileTab","lastIsChatInfoShown","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","nextId","deleteFolderDialogModal","chatlistModal","updateRequestedChatTranslation","chatInviteModal","FOCUS_NO_HIGHLIGHT_DURATION","SCROLL_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","lang","selectAllowedMessageActionsSlow","canCopy","message1","message2","resultHtml","resultText","senderTitle","getSenderTitle","forwardInfo","hiddenUserName","statefulContent","getMessageStatefulContent","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","shouldRenderAsHtml","getMessageSummaryDescription","renderMessageSummaryHtml","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","paramName","lastOwnEditableMessageId","findLast","canEdit","chatMessageKeys","newIndex","origin","volume","playbackRate","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","pinnedMessageIds","lastChatMessage","reverse","isJoinedChannelMessage","replyStack","selectReplyStack","pop","focusLastMessage","groupedChatId","replyMessageId","quote","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","updateFocusedMessage","updateFocusDirection","FocusDirection","Static","Down","Up","isAnimatingScroll","cancelScrollBlockingAnimation","groupedMessageIds","selectedMessages","openForwardMenu","getMediaHash","cancelMessageMediaDownload","mediaHashes","metadata","size","format","getMediaFormat","filename","getMediaFilename","originChatId","originMessageId","addActiveMediaDownload","canDownload","getMessageDownloadableMedia","downloadMedia","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","IS_TOUCH_ENV","pollModal","RELEASE_DATETIME","currentVersion","APP_VERSION","parseHtmlAsFormattedText","fractionalPart","serviceNotification","reactorModal","seenByModal","isReadDate","privacySettingsNoticeModal","activeLanguage","selectRequestedMessageTranslationLanguage","selectRequestedChatTranslationLanguage","chatLanguageModal","oneTimeMediaModal","paidReactionModal","isSchedule","album","deleteMessageModal","currentContent","fetchingStatus","GlobalSearchContent","BotApps","isClosing","recentlyFoundChatIds","newRecentIds","updateGlobalSearchContent","resetMiddleSearch","updateSharedMediaSearchType","stickerSearch","newContact","isByPhoneNumber","APP_VERSION_REGEX","updateIcon","asUnread","querySelectorAll","setPageTitleInstant","nextTitle","setWindowTitle","setPageTitle","notificationInterval","prevIsScreenLocked","isActive","screen","nextScreen","getIsTablet","messageLists","currentStoryId","recentEmojis","newEmojis","e","newStickers","order","isCustomEmoji","hasLocalId","generateUniqueId","newNotifications","notifications","existingNotificationIndex","n","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","lastDelimiter","allowedContentString","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","openedGame","rest","selectCanAnimateInterface","confetti","lastConfettiTime","startX","startY","IS_WAVE_TRANSFORM_SUPPORTED","currentLastTime","wave","lastWaveTime","ANIMATION_WAVE_MIN_INTERVAL","shouldCompress","shouldSendGrouped","isInvertedMedia","webPageMediaSize","attachmentSettings","shouldPlayEffectInComposer","currentEffect","requestEffectInComposer","saveEffectInDraft","limitReachedModal","openedCustomEmojiSetIds","lastRendered","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","editTopicPanel","archiveSettings","isMinimized","geoPoint","zoom","mapModal","point","remoteVersion","appVersion","isStrict","sanitizedRemoteVersion","trim","test","getIsAppUpdateNeeded","isAppUpdateAvailable","catch","isElectronUpdateAvailable","multitabNextAction","reestablishMasterToSelf","isBlurred","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","isTestServer","prefix","INACTIVE_MARKER","PAGE_TITLE","newUnread","passcode","isScreenLocked","getChatTitle","inviteViaLinkModal","collectibleInfoModal","shouldCloseRightColumn","refreshFromCache","isUpload","bandwidthPremiumDownloadSpeedup","bandwidthPremiumUploadSpeedup","bandwidthPremiumNotifyPeriod","lastPremiumBandwithNotificationDate","lastNotifiedAt","duration","onlineTimeout","prevBlurredTabsCount","updateIsOnline","isLockedUpdated","blurredTabsCount","newBlurredTabsCount","getAllMultitabTokens","starsBalanceModal","processOriginStarsPayment","originData","clearPayment","mediaIndex","isAvatarView","isSponsoredMessage","withDynamicLoading","standaloneMedia","mediaViewer","noLockOnUnload","onBeforeUnload","isInited","hasPasscode","clearStoredSession","updatePasscodeSettings","setupPasscode","sessionJson","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","forgetPasscode","requestNextSettingsScreen","SettingsScreens","PasscodeDisabled","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","session","parse","storeSession","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","invalidAttemptsCount","init","initApi","timeoutUntil","originStarsPayment","originGift","topup","sendPaidReaction","sendStarGift","isGiftRecipientPickerOpen","starsGiftingPickerModal","transaction","getPrizeStarsTransactionFromGiveaway","openStarsTransactionModal","shouldIgnoreBalance","starBalance","balanceNeeded","clearStarPayment","actionText","icon","getStarsTransactionFromGift","starsTransactionModal","subscription","starsSubscriptionModal","giftReceiverId","starsToConvert","isNameHidden","isUnsaved","isSaved","fromId","isConverted","openGiftInfoModal","giftInfoModal","reactionPicker","sendAsMessage","isForEffects","updatedResults","localPreviousChosenOrder","chosenOrder","dismissNotification","isSinglePeer","isSingleStory","isArchive","storyList","storyViewer","selectStoryListForViewer","selectPeerFirstUnreadStoryId","selectPeerFirstStoryId","viewModal","openStoryViewer","isRibbonShown","isArchivedRibbonShown","lastViewedByPeerIds","isShown","orderedPeerIds","storyIdsByPeerId","currentStoryIndex","previousStoryIndex","previousPeerId","previousPeerIdIndex","previousStoryId","peerStoryIds","nextStoryIndex","nextPeerId","nextPeerIdIndex","nextStoryId","isPrivacyModalOpen","isStealthModalOpen","isUserBlocked","areStoriesBlocked","updatedViews","view","prevIsForum","lastReadOutboxMessageId","areStoriesHidden","updatedChat","noTopChatsRequest","isNotJoined","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","leaveChat","localMessageIds","typingStatus","currentTypingStatus","selectThreadParam","senderId","isFromScheduled","hasMention","hasUnreadMention","folderId","ARCHIVED_FOLDER_ID","orderedPinnedIds","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","chatFoldersById","activeChatFolder","newChatFoldersById","newOrderedIds","orderedId","recommended","targetChatFullInfo","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","loadChatJoinRequests","replacePinnedTopicIds","isForumAsMessages","photoId","replacePeerPhotos","updateStatusesOnFullyIdle","throttleWithFullyIdle","pendingStatusUpdates","deleteContact","localUser","loadFullUser","targetUserFullInfo","botInfo","menuButton","threadInfos","polls","addUsers","addChats","addBlockedUser","isBlockedFromStories","loadAuthorizations","loadFavoriteStickers","loadRecentReactions","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","setId","loadSavedGifs","rules","setConfirmPaymentUrl","ConfirmPayment","processPremiumFloodWait","paidReactionPrivacy","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","monetizationInfo","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","totalAmount","formatCurrencyAsString","subscriptionPricing","giftModalState","isCompleted","starsModalState","metaViewport","querySelector","defaultViewportContent","getAttribute","preventEvent","preventDefault","props","ActiveCallHeader","useModuleLoader","Bundles","Calls","React","createElement","GroupCall","PhoneCall","RatePhoneCallModal","CustomEmojiSetsModal","Extra","DeleteMessageModal","StickerSetModal","memo","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","useEffect","updateAppBadge","formatIntegerCompact","ArchivedChats","Loading","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","useState","useOldLang","fabClassName","buildClassName","toggleIsMenuOpen","useCallback","handleClose","menuItems","useMemo","Fragment","MenuItem","onClick","dir","isRtl","Button","color","ariaLabel","tabIndex","Menu","positionX","positionY","autoClose","onClose","LeftSearch","withGlobal","orderedFolderIds","folderInvitesById","archived","archivedStories","sessions","shouldSkipHistoryAnimations","isStoryRibbonShown","hasArchivedChats","hasArchivedStories","maxFolders","maxFolderInvites","maxChatLists","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","isForumPanelOpen","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","openShareChatFolderModal","openDeleteChatFolderModal","openEditChatFolder","transitionRef","useRef","ref","shouldRender","shouldRenderStoryRibbon","getIsClosing","getIsStoryRibbonClosing","useShowTransition","withShouldRender","isStoryRibbonClosing","useDerivedState","allChatsFolder","ALL_FOLDER_ID","MEMO_EMPTY_ARRAY","excludedChatIds","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","contextActions","selectCanShareFolder","handler","isChatList","destructive","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","useLastCallback","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","Left","Right","isNotInFirstFolderRef","captureEscKeyListener","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","digit","addEventListener","removeEventListener","placeholderRef","shouldRenderPlaceholder","noMountTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","StoryRibbon","TabList","contextRootElementSelector","tabs","activeTab","onSwitchTab","areFolders","Transition","activeKey","renderCount","ContactList","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","navigator","onLine","handleChange","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","Spinner","animationLevel","attachBots","selectTheme","canInstall","onSelectArchived","onSelectContacts","onSelectSettings","onBotMenuOpened","onBotMenuClosed","setSettingOption","updatePerformanceSettings","openChatByUsername","oldLang","useLang","animationLevelValue","ANIMATION_LEVEL_MIN","ANIMATION_LEVEL_MAX","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","archivedUnreadChatsCount","handleSelectSaved","handleDarkModeToggle","stopPropagation","shouldUseSystemTheme","handleAnimationLevelChange","newLevel","performanceSettings","INITIAL_PERFORMANCE_STATE_MIN","INITIAL_PERFORMANCE_STATE_MAX","INITIAL_PERFORMANCE_STATE_MID","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","switchPermanentWebVersion","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleOpenMyStories","AttachBotItem","isInSideMenu","canShowNew","onMenuOpened","onMenuClosed","Switcher","label","checked","noAnimation","Toggle","IS_BETA","isCharIcon","WEB_VERSION_BASE","getPromptInstall","StatusPickerMenu","setEmojiStatus","loadCurrentUser","buttonRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","handleEmojiStatusClick","CustomEmojiEffect","isLottie","ripple","CustomEmoji","loopLimit","EMOJI_STATUS_LOOP_LIMIT","StarIcon","statusButtonRef","onEmojiStatusSelect","CLEAR_DATE_SEARCH_PARAM","CLEAR_CHAT_SEARCH_PARAM","searchQuery","isConnectionStatusMinimized","globalSearchChatId","searchDate","isMessageListOpen","areChatsLoaded","canSetPasscode","selectCanSetPasscode","shouldHideSearch","contactsFilter","isClosingSearch","shouldSkipTransition","onSearchQuery","onReset","setGlobalSearchDate","setGlobalSearchChatId","lockScreen","isBotMenuOpen","markBotMenuOpen","unmarkBotMenuOpen","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","handleLockScreenHotkey","useHotkeys","IS_APP","MainButton","onTrigger","handleSearchFocus","toggleConnectionStatus","handleLockScreen","isSearchFocused","GlobalSearch","Contacts","searchInputPlaceholder","versionString","APP_REVISION","useFullscreenStatus","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","headerRef","useElectronDrag","searchContent","PickerSelectedItem","fluid","canClose","clickArg","DropdownMenu","trigger","footer","APP_NAME","forceOpen","transformOriginX","IS_MAC_OS","onTransitionEnd","LeftSideMenuItems","SearchInput","inputId","resultsItemSelector","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","onChange","onFocus","onSpinnerClick","StoryToggler","canShow","StatusButton","ShowTransition","isCustom","ConnectionStatusOverlay","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","isElectronAutoUpdateEnabled","setIsElectronAutoUpdateEnabled","getIsAutoUpdateEnabled","shouldRenderForumPanel","handleForumPanelAnimationEnd","handleForumPanelAnimationStart","isAnimationStarted","useForumPanelRender","isForumPanelRendered","isForumPanelVisible","shouldRenderUpdateButton","transitionClassNames","updateButtonClassNames","useShowTransitionDeprecated","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","Settings","handleSelectContacts","handleSelectArchived","Archived","handleUpdateClick","PRODUCTION_URL","installUpdate","reload","handleSelectNewChannel","NewChannelStep1","handleSelectNewGroup","NewGroupStep1","autoCloseTimeout","onMouseEnter","onMouseLeave","LeftMainHeader","shouldCleanup","cleanupExceptionKey","shouldWrap","wrapExceptionKey","ChatFolders","pill","ForumPanel","onOpenAnimationStart","onCloseAnimationEnd","NewChatButton","NewChat","ContentType","RENDER_COUNT","nextSettingsScreen","nextFoldersAction","isFirstChatFolderActive","isChatOpen","selectIsForumPanelOpen","isArchivedStoryRibbonShown","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setContent","settingsScreen","setSettingsScreen","Main","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","NewChannelStep2","NewChannel","NewGroupStep2","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","EditProfile","Folders","General","Notifications","DataStorage","Privacy","Performance","ActiveSessions","Language","Stickers","Experimental","GeneralChatBackground","GeneralChatBackgroundColor","PrivacyPhoneNumber","PrivacyAddByPhone","PrivacyLastSeen","PrivacyProfilePhoto","PrivacyBio","PrivacyBirthday","PrivacyPhoneCall","PrivacyPhoneP2P","PrivacyForwarding","PrivacyGroupChats","PrivacyVoiceMessages","PrivacyMessages","PrivacyBlockedUsers","ActiveWebsites","TwoFaDisabled","TwoFaEnabled","TwoFaCongratulations","PasscodeEnabled","PasscodeCongratulations","PasscodeNewPasscode","PasscodeChangePasscodeCurrent","PasscodeTurnOff","PasscodeNewPasscodeConfirm","PasscodeChangePasscodeNew","PasscodeChangePasscodeConfirm","PrivacyPhoneNumberAllowedContacts","PrivacyPhoneNumberDeniedContacts","PrivacyLastSeenAllowedContacts","PrivacyLastSeenDeniedContacts","PrivacyProfilePhotoAllowedContacts","PrivacyProfilePhotoDeniedContacts","PrivacyBioAllowedContacts","PrivacyBioDeniedContacts","PrivacyBirthdayAllowedContacts","PrivacyBirthdayDeniedContacts","PrivacyPhoneCallAllowedContacts","PrivacyPhoneCallDeniedContacts","PrivacyPhoneP2PAllowedContacts","PrivacyPhoneP2PDeniedContacts","PrivacyForwardingAllowedContacts","PrivacyForwardingDeniedContacts","PrivacyVoiceMessagesAllowedContacts","PrivacyVoiceMessagesDeniedContacts","PrivacyGroupChatsAllowedContacts","PrivacyGroupChatsDeniedContacts","TwoFaNewPassword","TwoFaNewPasswordConfirm","TwoFaNewPasswordHint","TwoFaNewPasswordEmail","TwoFaNewPasswordEmailCode","TwoFaChangePasswordCurrent","TwoFaTurnOff","TwoFaRecoveryEmailCurrentPassword","TwoFaChangePasswordNew","TwoFaChangePasswordConfirm","TwoFaChangePasswordHint","TwoFaRecoveryEmail","TwoFaRecoveryEmailCode","FoldersCreateFolder","FoldersEditFolder","FoldersShare","FoldersIncludedChatsFromChatList","FoldersExcludedChatsFromChatList","FoldersEditFolderFromChatList","FoldersEditFolderInvites","QuickReaction","DoNotTranslate","handleSearchQuery","handleTopicSearch","noChatOrForumOpen","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_FIREFOX","useSyncEffect","handleSettingsScreenSelect","prevSettingsScreenRef","useStateRef","usePrevious","renderContent","currentScreen","onScreenSelect","isChannel","LeftMain","captureControlledSwipe","excludedClosestSelector","onSwipeRightStart","onCancel","LAYERS_ANIMATION_NAME","withSwipeControl","MediaViewer","LOGO_DIMENSIONS","height","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","getMessageMediaHash","mediaMetadata","useMessageMediaMetadata","fileName","artist","performer","audioCoverHash","getAudioHasCover","avatarHash","getChatAvatarHash","useMedia","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","resolve","telegramLogoPath","resizeImage","ratio","scaleImage","makeGoodArtwork","buildMediaMetadata","artwork","src","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onMouseDown","onContextMenu","volumeIcon","renderText","renderAudio","renderVoice","RippleEffect","disabled","RangeSlider","bold","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","ReactionPicker","closeChat","forceSyncOnIOs","MessageHistoryRecord","createLocationHash","_extends","viewportPinnedIds","lastFocusedId","PrivacySettingsNoticeModal","SeenByModal","UnpinAllMessagesModal","ChatLanguageModal","EmojiInteractionAnimation","ariaLabelLang","onReadAll","hasActiveMiddleSearch","shouldShowCount","mentionsCount","withScrollDown","canPost","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","elementRef","hasUnreadReactions","hasUnreadMentions","handleScrollDownClick","messagesContainer","parentElement","messageElements","lastMessageElement","animateScroll","ScrollDownButton","styles","isAlbum","messageOrAlbum","groupMessages","topMessageId","isChatWithSelf","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","hasComments","commentsMessage","hasMultipleCaptions","captionMessage","albumId","mainMessage","isPaidMedia","nextMessage","lastSenderGroupItem","nextMessageDayStartsAt","postAuthorTitle","inlineButtons","selectChatLastMessage","defaultStickers","lastUnreadMessageId","businessIntro","loadGreetingStickers","containerRef","randomIndex","handleStickerSelect","StickerView","shouldLoop","chatBot","isLoadingBotInfo","chatBotFullInfo","isInMessageList","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getVideoMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","isBotInfoEmpty","isVerifyCodes","isChatWithVerificationCodesBot","style","buildStyle","alt","OptimizedVideo","canPlay","loop","disablePictureInPicture","muted","playsInline","Skeleton","forceAspectRatio","INTERSECTION_THROTTLE_FOR_MEDIA","getSingularPaidMedia","singularMedia","isPreview","AlbumRectPart","None","Top","Bottom","accumulate","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","asForwarded","noAvatars","ratios","isSingleMessage","calculateMediaDimensions","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","multiHeight","attemptCount","sum","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","thirdWidth","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","worker","initializationDeferred","Deferred","IS_TRANSLATION_SUPPORTED","createConnector","Worker","CHAT_STATS","throttledMakeChatDecision","updateChatDetectedLanguage","chatStats","messagesChecked","translatableCount","detectableCount","languageOccurrences","isTranslatable","detectedLanguage","occurrences","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","quickReactionRef","shouldHandleMouseLeave","getIsMessageListReady","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","handleMouseMove","useThrottledCallback","quickReactionContainer","clientX","clientY","quickReactionX","quickReactionWidth","quickReactionY","quickReactionHeight","getBoundingClientRect","isVisibleX","isVisibleY","requestMeasure","startedAt","onRelease","handleMouseDown","preventMessageInputBlur","target","classList","contains","getIsKeyboardVisible","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","element","nextElementSibling","noUserColors","observeIntersectionForLoading","isIntersecting","useIsIntersecting","isFullStory","isExpiredStory","isVideoStory","mediaBlobUrl","getStoryMediaHash","mediaThumbnail","dataUri","pictogramUrl","handleFastClick","useFastClick","getPeerColorClass","srcUrl","getPictogramDimensions","draggable","renderPictogram","Icon","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","isClosed","withSelectControl","WrappedComponent","ownProps","noSelectControls","selectIsInSelectMode","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloads","selectActiveDownloads","uploadsByKey","observeIntersection","hasCustomAppendix","albumLayout","onMediaClick","cancelUploadMedia","mediaCount","handlePaidMediaClick","handleAlbumMessageClick","handleCancelUpload","containerWidth","containerHeight","renderingPaidMedia","paidPhotoOrPreview","paidVideoOrPreview","getMessagePhoto","fileUpload","uploadProgress","canAutoLoad","selectCanAutoLoadMedia","canAutoPlay","selectCanAutoPlayMedia","shouldAffectAppendix","getMessageHtmlId","onCancelUpload","isDownloading","getIsDownloading","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","startedInteractions","sendInteractionBunch","play","remove","Audio","safePlay","once","container","performance","interactionMessageId","customEmojiId","withEffects","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","noPlay","selectCanPlayAnimatedEmojis","getCustomEmojiSize","LIKE_STICKER_ID","isBig","withSharedAnimation","selectAnimatedEmoji","forceLoadPreview","AnimatedIconFromSticker","quality","noLoad","forcePreview","forceAlways","isCustomShape","shouldRenderLoading","useAsyncRendering","recentReplierIds","originChannelId","isComments","recentRepliers","hasUnread","commentsText","AnimatedCounter","role","Avatar","peerColor","shoudReset","emojiIconClassName","children","otherProps","getApiPeerColorClass","backgroundEmojiId","EmojiIconBackground","emojiDocumentId","getContactName","countryList","phoneCodes","phoneCodeList","openAddContactDialog","isRegistered","canAddContact","getCanAddContact","handleOpenChat","handleAddContact","PeerColorWrapper","formatPhoneNumberWithCode","isText","COLOR","isToggleDisabled","cutoutRef","isCollapsed","isCollapsible","setIsCollapsed","useCollapsibleLines","countryLocalized","countryCode","DisplayNames","of","canExpand","handleExpand","handleToggle","prev","renderTextWithEntities","Separator","canAutoLoadMedia","clickBotInlineButton","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","handleGameClick","autoPlay","giveaway","channelIds","selectForwardedSender","giftSticker","selectGiftStickerForDuration","months","canPlayAnimatedEmojis","isLoadingInfo","giveawayInfo","setGiveawayInfo","giveawayResults","isResults","isOwnMessage","quantity","winnersCount","hasEnded","translatedNames","isoToEmoji","handlePeerClick","handleShowInfoClick","handleCloseInfo","giveawayInfoTitle","AnimatedIconWithPreview","tgsUrl","LOCAL_TGS_URLS","PartyPopper","nonInteractive","noLoop","winnerIds","forceShowSelf","withPeerColors","renderGiveawayResultsDescription","formatDateTimeToString","renderGiveawayDescription","ConfirmDialog","isOnlyConfirm","confirmHandler","isResultsInfo","chatTitle","isApiPeerChat","endDate","formatDateAtTime","otherChannelsCount","otherChannelsString","isSeveral","firstKey","giveawayDuration","firstParagraph","additionalPrizes","secondKey","secondParagraph","activatedCount","isRefunded","isWinner","lastParagraph","disallowedCountry","adminDisallowedChatId","disallowedChat","disallowedChatTitle","joinedTooEarlyDate","isParticipating","renderGiveawayInfo","buttonTexts","texts","renderKeyboardButtonText","j","RE_TME_LINK","renderIcon","forcedWidth","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","withBlurredBackground","blurredBackgroundRef","useBlurredMediaThumbRef","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","contentEl","closest","MESSAGE_CONTENT_SELECTOR","getCustomAppendixBg","appendixBg","requestMutation","setProperty","CUSTOM_APPENDIX_ATTRIBUTE","crossOrigin","formatCurrency","iconClassName","isConnected","loadExtendedMedia","refreshExtendedMedia","useInterval","root","MediaSpoiler","thumbDataUri","isVisible","spoiler","formatMediaDuration","buy","lock","TIMER_CIRCUMFERENCE","TIMER_RADIUS","PI","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","PinSvg","viewBox","cx","cy","d","openMapModal","countdownRef","forceUpdate","useForceUpdate","getMessageLocation","geo","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","setPoint","shouldRenderText","dpr","useDevicePixelRatio","mediaHash","buildStaticMapHash","prevMediaBlobUrl","usePreviousDeprecated","mapBlobUrl","accuracyRadiusPx","accuracyRadius","lat","getMetersPerPixel","updateCountdown","countdownEl","svgEl","lastElementChild","timerEl","firstElementChild","timeLeft","strokeDashOffset","formatCountdownShort","textContent","useLayoutEffect","long","pinClassName","heading","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","editDate","transform","renderInfo","path","filterUnits","dy","in","stdDeviation","fill","outgoingStatus","signature","withReactionOffset","repliesThreadInfo","renderQuickReactionButton","noReplies","isTranslated","withFullDate","effectEmoji","onTranslationClick","onEffectClick","onOpenThread","isActivated","markActivated","handleImportedClick","createDateTime","timeFormat","editDateTime","isEdited","forwardedDateTime","savedDate","time","formatTime","formatPastTimeShort","fullClassName","isImported","MessageOutgoingStatus","requestMasterAndRequestCall","isMissed","handleCall","reasonText","formattedDuration","formatTimeDuration","timeFormatted","isClickable","starsAmount","replaceWithTeact","STARS_ICON_PLACEHOLDER","STARS_CURRENCY_CODE","getPercentage","total","toFixed","answer","voteResults","totalVoters","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","isChosen","answerPercent","votersCount","finalPercent","setFinalPercent","lineWidth","isAnimationDoesNotStart","lineStyle","observeIntersectionForPlaying","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","timerCircleRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","recentVoterIds","isCorrect","answers","hidden","quiz","chosen","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","solutionEntities","onDismiss","question","getPollTypeString","AvatarList","CheckboxGroup","loadingOptions","isRound","RadioGroup","loadingOption","PollOption","getReadableVotersCount","ICON_SIZE","EFFECT_SIZE","MAX_EFFECT_COUNT","QUALITY","effectSize","effectRef","effectsIds","setEffectsIds","activeReaction","shouldPlayEffect","canAddMoreEffects","prevLocalAmount","shouldRenderEffect","handleEnded","newEffectsIds","rootClassName","animating","teactFastList","AnimatedIcon","StarReactionEffect","onEnded","REACTION_SIZE","selectAreStarsLoaded","recentReactors","chosenClassName","availableStars","onPaidClick","openPaidReactionModal","requestWave","counterRef","animationRef","isPaid","areStarsLoaded","useSelector","handlePaidClick","prevReaction","left","top","offsetWidth","offsetHeight","currentScale","getComputedStyle","scale","cancel","animate","easing","prevAmount","shouldRenderPaidCounter","own","paid","isReactionChosen","Sparkles","preset","PaidReactionEmoji","animatedEmoji","paidCounter","ReactionAnimatedEmoji","counter","isOutside","metaChildren","noRecentReactors","addLocalPaidReaction","performMiddleSearch","recentReactorsByReactionKey","recentReaction","reactionKey","shouldHideRecentReactors","paidLocalCount","cacheBreaker","dismissAction","shouldShowTimer","disableClickDismiss","handleRemoveReaction","useEffectOnce","SavedTagButton","withContextMenu","onRemove","ReactionButton","withEffect","onStopEffect","openStickerSet","hasEffect","isMirrored","getStickerMediaHash","IS_WEBM_SUPPORTED","canLoad","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","useOverlayPosition","anchorRef","overlayRef","openModal","isMemojiSticker","getStickerDimensions","fullMediaHash","fullMediaClassName","Portal","AnimatedSticker","isLowPriority","BaseStory","targetUser","isLoaded","imageHash","thumbUrl","useEnsureStory","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","focusedMessage","loadingThread","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","viaBusinessBotId","isSystemBotChat","isSystemBot","isAnonymousForwards","isAnonymousForwardsChat","webPageStoryData","webPage","webPageStory","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","isThreadTop","replyFrom","storyReplyPeerId","storyReplyId","shouldHideReply","forwardHeader","replyMessageSender","selectSenderFromHeader","replyMessageForwardSender","replyMessageChat","isReplyPrivate","isChatPublic","isReplyToTopicStart","replyStory","storySender","selectUploadProgress","isFocused","selectIsMessageFocused","focusDirection","noFocusHighlight","focusedQuote","middleSearch","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectCanReplyToMessage","downloadableMedia","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","chatTranslations","selectChatTranslations","requestedTranslationLanguage","requestedChatTranslationLanguage","areTranslationsEnabled","canTranslate","hasActiveReactions","senderBoosts","chatLevel","boostLevel","transcribeMinLevel","groupTranscribeLevelMin","canTranscribeVoice","viaBusinessBot","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isRepliesChat","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","shouldDetectChatLanguage","selectShouldDetectChatLanguage","hasLinkedChat","linkedChatId","withAnimatedEffects","isLoadingComments","loadingChatId","loadingMessageId","shouldWarnAboutSvg","selectOutgoingStatus","observeIntersectionForBottom","noComments","appearanceOrder","isJustAdded","isLastInGroup","isFirstInDocumentGroup","isLastInList","memoFirstUnreadIdRef","onIntersectPinnedMessage","animateUnreadReaction","markMentionsRead","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","requestEffect","isTouchScreen","useOnIntersect","contextMenuAnchor","contextMenuTarget","noAppearanceAnimation","markShown","useUnmountCleanup","viewportPinnedIdsToRemove","hasMessageReply","isReplyToMessage","paidMediaPhoto","paidMediaVideo","hasStoryReply","hasThread","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","isMention","canShowSenderBoosts","isStoryMention","isRoundVideo","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasFactCheck","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","messageColorPeer","senderPeer","hasTtl","hasMessageTtl","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleMediaClick","handleAudioPlay","handleAlbumMediaClick","handlePhotoMediaClick","handleVideoMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","handleStoryClick","isTranslatingChat","isSavedMessages","openMediaViewer","openAudioPlayer","sendPollVote","openChatLanguageModal","searchChatMediaMessages","isQuote","channelPostId","MediaViewerOrigin","ScheduledInline","Inline","openMediaViewerWithPhotoOrVideo","isGif","albumMessageId","albumIndex","ScheduledAlbum","Album","originalChatId","savedFromPeerId","selectWithGroupedId","useInnerHandlers","handleEffectClick","textMessage","hasTextContent","hasMessageText","hasText","containerClassName","getIsReady","setLanguage","threshold","promise","args","detectLanguage","useTextLanguage","LimitedMap","previousMetadata","processMessageMetadata","useDetectChatLanguage","shouldTranslate","isMessageTranslatable","isTranslationPending","translatedText","useMessageTranslation","previousTranslatedText","currentTranslatedText","isMediaWithCommentButton","withCommentButton","withQuickReactionButton","hasOutsideReactions","contentClassName","hasCommentCounter","hasActionButton","isGeoLiveActive","peerColorClass","isInvertibleMedia","classNames","MESSAGE_CONTENT_CLASS_NAME","isMediaWithNoText","hasInlineKeyboard","isViaBot","hasFooter","emojiOnlyCount","EMOJI_SIZES","buildContentClassName","withAppendix","emojiSize","metaPosition","reactionsPosition","quickReactionPosition","useEnsureMessage","useFocusMessage","viaBusinessBotTitle","canShowPostAuthor","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","contentRect","beginHeavyAnimation","resizeDiff","scrollHeight","scrollTop","throttledResize","useResizeObserver","bottomMarker","isElementInViewport","extraPadding","sizeCalculations","calculatedWidth","contentWidth","reactionsMaxWidth","noMediaCorners","ROUND_VIDEO_DIMENSIONS_PX","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","MIN_MEDIA_WIDTH_WITH_TEXT","getMinMediaWidth","isForAnimation","MessageText","messageOrStory","withTranslucentThumbs","canBeEmpty","ReactionStaticEmoji","renderReactionsAndMeta","meta","MessageMeta","Reactions","renderWebPage","WebPage","onAudioPlay","onCancelMediaTransfer","renderInvertibleMediaContent","messageText","PaidMediaOverlay","renderSenderName","senderEmojiStatus","senderIsPremium","shouldRenderForwardAvatar","senderColor","fakeType","FakeIcon","customTitle","forwardAuthor","onCopy","onDoubleClick","onMouseMove","hiddenName","renderAvatar","textContentClass","shouldReadMedia","TopicChip","EmbeddedMessage","senderChat","forwardSender","EmbeddedStory","Sticker","AnimatedCustomEmoji","AnimatedEmoji","MessageEffect","shouldPlay","onStop","MessagePhoneCall","RoundVideo","onReadMedia","AudioOrigin","isSelectable","onPlay","isTranscribed","onHideTranscription","canTranscribe","Document","Story","StoryMention","Contact","Poll","Giveaway","Game","InvoiceMediaPreview","DotAnimation","footerClass","hasContentAfterText","isMetaInText","FactCheck","renderInvertedMediaContent","Invoice","Location","CommentButton","MessageAppendix","InlineButtons","ContextMenuContainer","anchor","targetHref","AboutAdsModal","SponsoredMessageContextMenuContainer","viewSponsoredMessage","hideSponsoredMessages","clickSponsoredMessage","reportSponsoredMessage","contentRef","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","handleReportSponsoredMessage","handleHideSponsoredMessage","hasMedia","handleOpenMedia","SponsoredMessage","renderMediaContent","isRecommended","isRectangular","canReport","onAboutAdsClick","onReportAd","isMonetizationSharing","messageGroups","getContainerHeight","isViewportNewest","isEmptyThread","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isReady","shouldRenderBotInfo","onScrollDownToggle","onNotchToggle","openHistoryCalendar","getIsHeavyAnimating2","getIsHeavyAnimating","useDerivedSignal","areDatesClickable","observeIntersectionForReading","scheduleForViewsIncrement","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","isBackgroundModeActive","mentionIds","reactionIds","viewportPinnedIdsToAdd","scheduledToUpdateViews","dataset","shouldUpdateViews","albumMainId","useBackgroundMode","margin","useMessageObservers","withHistoryTriggers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","observeIntersectionForHistory","MESSAGE_LIST_SENSITIVE_AREA","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","throttleScheduler","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","freezeShortly","getContainerHeightDebounced","useDebouncedSignal","useSignalEffect","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","prevMessageIds","isNewMessage","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","ActionMessage","isInsideTopic","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","isTopicTopMessage","originalId","getMessageOriginalId","Message","SCHEDULED_WHEN_ONLINE","formatHumanDate","MessageListBotInfo","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","patternColor","themes","userName","handleOpenPremiumModal","Unlock","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","isChatLoaded","isGroupChat","isChannelWithAvatars","areProfilesShown","isCreator","isBot","isSelectModeActive","channelJoinInfo","joinInfo","noMessageSendingAnimation","isServiceNotificationsChat","hasTools","withBottomShift","withDefaultBg","isContactRequirePremium","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadPeerStoriesByIds","loadFactChecks","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","hasOpenChatButton","ANONYMOUS_USER_ID","handleCopy","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","prevMessage","shouldAppendJoinMessage","shouldAppendJoinMessageAfterCurrent","joinedDate","generateChannelJoinMessageId","translationValues","targetChatId","orderRule","orderBy","storyDataList","storiesByPeerIds","shouldFetch","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","currentStuck","useStickyDates","handleScroll","shouldCancelWaiting","prevContainerHeightRef","isComposerVisible","setContainerHeight","useSignal","currentNormalHeight","normalHeight","prevContainerHeight","useContainerHeight","clientHeight","rememberScrollPositionRef","preservedItemElements","forceMeasure","prevIsViewportNewest","lastItemElement","firstUnreadElement","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","addExtraClass","removeExtraClass","requestForcedReflow","bottomOffset","isAlreadyFocusing","shouldScrollToBottom","isResized","newScrollTop","newAnchorTop","resetScroll","ceil","restartCurrentScrollAnimation","prevIsSelectModeActive","shouldRenderGreeting","isEmptyTopic","hasMessages","onScroll","PremiumRequiredMessage","ContactGreeting","NoMessages","MessageListContent","backgroundColor","MessageSelectToolbar","blockUser","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canBlockContact","isBasicGroup","isChatBasicGroup","handleConfirmBlock","handleCloseReportPanel","handleChatReportSpam","confirmIsDestructive","confirmLabel","Checkbox","onCheck","drawRect","radius","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","currentElement","svg","div","defs","innerHTML","pinnedMessageBorder","pinnedMessageBorderWrapper1","pinnedMessageBorderMask","pinnedMessageBorderWrapper","pinnedMessageBorderMark","EMOJI_SIZE","onUnpinMessage","onAllPinnedClick","getLoadingPinnedId","isFullWidth","useThumbnail","isSpoiler","getMessageIsSpoiler","shouldShowLoader","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","PinnedMessageNavigation","MessageSummary","noEmoji","shouldStopPropagation","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","shouldSendJoinRequest","isJoinRequest","emojiStatusSticker","isMiddleSearchOpen","isRightColumnShown","currentTransitionKey","hasButtonInHeader","pinnedMessageId","topMessageSender","canUnpin","firstPinnedMessage","getCurrentPinnedIndex","onFocusPinnedMessage","openThreadWithInfo","pinMessage","openPreviousChat","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isTablet","currentPinnedIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleOpenSearch","event","handleLongPressMouseDown","onMouseUp","handleLongPressMouseUp","handleLongPressMouseLeave","onTouchStart","handleLongPressTouchStart","onTouchEnd","handleLongPressTouchEnd","useLongPress","onStart","handlePinnedMessageClick","cycleRestrict","handleAllPinnedClick","setBackButtonActive","handleUserStatusClick","handleChannelStatusClick","handleBackClick","messageInput","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","UnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","savedMessagesStatus","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withStory","withUpdatingStatus","storyViewerOrigin","StoryViewerOrigin","MiddleHeaderAvatar","emojiStatusSize","noRtl","onEmojiStatusClick","GroupChatInfo","renderChatInfo","GroupCallTopPane","hasPinnedOffset","HeaderPinnedMessage","ChatReportPanel","AudioPlayer","HeaderActions","canExpandActions","Link","isPrimary","ReactorListModal","MiddleSearch","isImage","kind","LAYER_ANIMATION_DURATION_MS","isBackgroundBlurred","background","customBackground","isSeenByModalOpen","isPrivacySettingsNoticeModalOpen","isReactorListModalOpen","isChatLanguageModalOpen","withInterfaceAnimations","isMessageThread","fromChannelId","getCanPostInChat","isBotNotStarted","isPinnedMessageList","shouldJoinToSend","isJoinToSend","canUnblock","shouldLoadFullChat","shouldBlockSendInForum","GENERAL_TOPIC_ID","canShowOpenChatButton","isCommentThread","isUserRightBanned","getHasAdminRight","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","leftColumnRef","unpinAllMessages","loadUser","joinChannel","restartBot","setLeftColumnWidth","resetLeftColumnWidth","unblockUser","isDesktop","dropAreaState","setDropAreaState","DropAreaState","isScrollDownNeeded","setIsScrollDownShown","isScrollDownShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","handleIntersectPinnedMessage","handleFocusPinnedMessage","getPinnedIndexByKey","setPinnedIndexByKey","setLoadingPinnedId","pinnedLength","loadingPinnedId","newPinnedIndex","focusedMessageId","pinnedIndexAboveFocused","maxViewportPinnedId","isMessageLoaded","currentIndex","usePinnedMessage","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanUnblock","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsScrollDownShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","renderingHandleIntersectPinnedMessage","handleCssTransitionEnd","handleSlideTransitionStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","visualViewport","isFixNeeded","documentElement","toggle","scrollTo","initResize","resetResize","handleMouseUp","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","newWidth","stopDrag","cleanup","useResize","handleDragEnter","items","dataTransfer","shouldDrawQuick","QuickFile","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleOpenChatFromSaved","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","handleUnblock","customBackgroundValue","useCustomBackground","settingValue","setThemeSettings","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","Blob","blob","createObjectURL","preloadImage","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","PremiumRequiredPlaceholder","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","onDragEnter","MiddleHeader","isBlockingAnimation","MessageList","Composer","onDropHide","editableInputId","EDITABLE_INPUT_ID","editableInputCssSelector","FloatingActionButtons","onUnpin","teactOrderKey","MODALS","modal","GiftCodeModal","BoostModal","ChatlistModal","UrlAuthModal","OneTimeMediaModal","InviteViaLinkModal","AttachBotInstallModal","ReportAdModal","ReportModal","WebAppModal","CollectibleInfoModal","MapModal","StarPaymentModal","Stars","StarsBalanceModal","StarsTransactionModal","ChatInviteModal","PaidReactionModal","StarsSubscriptionModal","StarsGiftModal","GiftModal","GiftRecipientPicker","GiftInfoModal","MODAL_KEYS","MODAL_ENTRIES","modalProps","ModalComponent","PaymentModal","ReceiptModal","localContactIds","isSearching","NewChatMembersProgress","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","memberIds","member","handleFilterChange","displayedIds","usersById","filteredContactIds","filterUsersByName","sortChatIds","canBeInvitedToGroup","handleNextStep","PeerPicker","itemIds","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","isSearchable","withDefaultPadding","noScrollRestore","allowMultiple","withStatus","itemInputType","FloatingActionButton","CreateTopic","EditTopic","GifSearchAsync","GifSearch","Management","PollResultsAsync","PollResults","runThrottledForScroll","isScrollingProgrammatically","getStateFromTabType","tabType","ProfileState","MemberList","StoryList","SavedDialogs","SharedMedia","useInfiniteScrollForLoadableItems","handleLoadMore","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","currentResultType","messageIdsRef","getMessageContentIds","stickerId","fromPeer","CUSTOM_PEER_HIDDEN","availabilityTotal","GiftRibbon","idPrefix","getMessageMediaThumbDataUri","useMediaTransitionDeprecated","decoding","maxPinnedStoriesCount","isOut","pinnedStories","pinnedStory","canPin","loadPeerSkippedStories","toggleStoryInProfile","toggleStoryPinnedToTop","getTriggerElement","getRootElement","getMenuElement","getLayout","withPortal","isDense","preventMessageInputBlurWithBubbling","handleUnarchiveClick","handleArchiveClick","handleTogglePinned","MediaAreaOverlay","TABS","mediaSearchType","isTopicInfo","chatsById","hasMembersTab","isChatAdmin","areMembersHidden","isForbidden","canViewMembers","canAddMembers","canDeleteMembers","similarChannelIds","selectSimilarChannelIds","hasCommonChatsTab","commonChatsCount","hasPreviewMediaTab","hasPreviewMedia","botPreviewMedia","hasStoriesTab","hasPinnedStories","profileIds","pinnedStoryIds","storyByIds","archiveStoryIds","archiveIds","hasGiftsTab","starGiftCount","userGifts","similarChannels","limitSimilarChannels","commonChatIds","profileState","onProfileStateChange","setSharedMediaSearchType","loadMoreMembers","loadCommonChats","searchSharedMediaMessages","setNewChatMembersDialogState","loadPeerProfileStories","loadStoriesArchive","loadChannelRecommendations","loadPreviewMedias","deletingUserId","setDeletingUserId","profileId","initialTab","allowAutoScrollToTabs","startAutoScrollToTabsIfNeeded","stopAutoScrollToTabs","setActiveTab","giftIds","renderingActiveTab","handleLoadCommonChats","handleLoadPeerStories","handleLoadStoriesArchive","handleLoadGifts","resultType","noProfileInfo","searchMessages","loadStories","loadMoreGifts","groupChatMembers","sortUserIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","sortedStoryIds","pinnedStoryIdsSet","aIsPinned","bIsPinned","storyViewportIds","getMoreStories","noProfileInfoForStories","archiveStoryViewportIds","getMoreStoriesArchive","noProfileInfoForStoriesArchive","useProfileViewportIds","isFirstTab","usePeerStoriesPolling","handleStopAutoScrollToTabs","prevTabType","tabsEl","prevProfileState","Profile","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","paddingRight","useTransitionFixes","cacheBuster","resetCacheBuster","useCacheBuster","setCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","handleSelectMedia","handleSelectPreviewMedia","PreviewMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","chatOrUserId","renderProfileInfo","shouldRestoreHeight","noSpinner","forceRenderHiddenMembers","NothingFound","Media","MediaStory","getMessageDocument","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","memberId","adminMember","avatarSize","UserGift","DeleteMemberModal","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","canEditBot","canManage","selectCanManage","isEditingInvite","canViewStatistics","isColumnOpen","isStatistics","isMessageStatistics","isStoryStatistics","isMonetizationStatistics","isBoostStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","managementScreen","setStickerSearchQuery","setGifSearchQuery","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","foldersChatCount","useFolderManagerForChatsCount","handleEditInviteClick","ManagementScreens","EditInvite","handleDeleteInviteClick","Invites","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","StickerSearch","AddingMembers","Initial","ManageInitial","ChatPrivacyType","ManageChatPrivacyType","Discussion","ManageDiscussion","ChannelSubscribers","ManageChannelSubscribers","GroupPermissions","ManageGroupPermissions","ChatAdministrators","ManageChatAdministrators","GroupRemovedUsers","ManageGroupRemovedUsers","ChannelRemovedUsers","ManageChannelRemovedUsers","GroupUserPermissionsCreate","ManageGroupUserPermissionsCreate","GroupUserPermissions","ManageGroupUserPermissions","GroupRecentActions","ManageGroupRecentActions","ChatAdminRights","ManageGroupAdminRights","ChatNewAdminRights","ManageGroupNewAdminRights","GroupMembers","ManageGroupMembers","ManageInvites","ManageEditInvite","GroupAddAdmins","ManageGroupAddAdmins","ManageReactions","InviteInfo","ManageInviteInfo","JoinRequests","ManageJoinRequests","Statistics","MessageStatistics","StoryStatistics","BoostStatistics","MonetizationStatistics","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","SAVED_FOLDER_ID","renderHeaderContent","GIVEAWAY_IMG_LIST","GiftGreenRound","GiftBlueRound","GiftRedRound","CUSTOM_PEER_STAR_TEMPLATE","isCustomPeer","avatarIcon","peerColorId","CUSTOM_PEER_TO_BE_DISTRIBUTED","titleKey","withPremiumGradient","isGiveawayAvailable","selectIsGiveawayGiftsPurchaseAvailable","giveawayBoostsPerPremium","loadMoreBoosters","closeBoostStatistics","openGiveawayModal","shouldDisplayGiftList","currentLevel","hasNextLevel","levelProgress","remainingBoosts","getBoostProgressInfo","prepaidGiveaways","statsOverview","premiumSubscribers","boostersToLoadCount","loadedBoostsCount","multiplier","toLoadCount","renderBoostIcon","floatingBadge","floatingBadgeButtonColor","floatingBadgeIcon","floatingBadgeValue","renderBoostTypeIcon","isFromGiveaway","floatingBadgeWarning","floatingBadgeButton","handleBoosterClick","renderBoostList","customPeer","noEmojiStatus","noFake","noVerified","iconElement","rightElement","handleGiveawayClick","launchPrepaidGiveawayHandler","section","PremiumProgress","leftText","rightText","floatingBadgeText","formatInteger","StatisticsOverview","sectionHeader","isStarsGiveaway","GiftStar","giveawayIcon","month","GIVEAWAY_BOOST_PER_PREMIUM","boostSection","listToRender","noResults","showMore","loadMoreSpinner","down","LinkField","boostUrl","withShare","giveawayButton","AboutMonetizationModal","VerificationMonetizationModal","lovelyChartPromise","LovelyChart","MONETIZATION_GRAPHS_TITLES","topHoursGraph","revenueGraph","MONETIZATION_GRAPHS","passwordHint","monetization","isChannelRevenueWithdrawalEnabled","loadChannelMonetizationStatistics","loadedCharts","isAboutMonetizationModalOpen","openAboutMonetizationModal","closeAboutMonetizationModal","isVerificationMonetizationModalOpen","openVerificationMonetizationModal","closeVerificationMonetizationModal","isConfirmPasswordDialogOpen","openConfirmPasswordDialogOpen","closeConfirmPasswordDialogOpen","availableBalance","balances","isWithdrawalEnabled","canWithdraw","ensureLovelyChart","child","graph","create","topText","linkText","withNodes","rewardsText","SafeLink","verificationMonetizationHandler","ready","isToncoin","textBottom","integerTonPart","decimalTonPart","integerUsdPart","decimalUsdPart","usdRate","availableReward","toncoin","toncoinIcon","rewardValue","decimalPart","integer","renderAvailableReward","StickerSearchAsync","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","toggleStoryStatistics","setOpenedInviteInfo","requestNextManagementScreen","resetNextProfileTab","closeCreateTopicPanel","closeEditTopicPanel","setShouldCloseRightColumn","closeMonetizationStatistics","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","ChatInfo","isOverlaying","shouldScrollUp","Closed","GroupType","handleSelectChatMember","isPromoted","handleAppendingChatMembers","AddChatMembers","onChatMemberSelect","prevChatId","prevThreadId","RightHeader","StoryViewer","AttachBotRecipientPicker","BotTrustModal","DeleteFolderDialog","Dialogs","processedHashes","downloadedHashes","cancelMediaHashDownloads","handleMediaDownloaded","clear","mediaFormat","download","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","handleProgress","DownloadUrl","baseURI","encodeURIComponent","downloadWindow","DraftRecipientPicker","ForwardRecipientPicker","gameTitle","closeGame","sendMessageAction","useSendMessageAction","handleMessage","eventType","handleLoad","Modal","hasCloseButton","onLoad","sandbox","allow","HistoryCalendar","NewContactModal","PremiumLimitReachedModal","GiveawayModal","PremiumMainModal","StarsGiftingPickerModal","SafeLinkModal","CONFETTI_COLORS","STAR_PATH","Path2D","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","velocity","generateRandomPositionData","randomNumberAroundZero","DEFAULT_CONFETTI_SIZE","randomColor","pos","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","isStar","updateCanvas","canvas","ctx","getContext","canvasWidth","canvasHeight","clearRect","confettiToRemove","c","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","fillStyle","translate","rotate","restore","beginPath","ellipse","hideTimeout","prevConfettiTime","leftSide","randomX","FILTER_ID","waveInfo","waves","setWaves","addWave","newWave","prevWaves","overlaySize","startTime","waveWidth","createElementNS","SVG_NAMESPACE","addSvgDefinition","feImage","waveRipple","appendChild","feDisplacementMap","removeSvgDefinition","onAnimationEnd","DEBUG_isLogged","wasTimeFormatSetManually","gameMessage","noRightColumnAnimation","deleteFolderDialog","selectChatFolder","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isStoryViewerOpen","selectIsStoryViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","isReactionPickerOpen","selectIsReactionPickerOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","isPremiumModalOpen","isGiveawayModalOpen","isDeleteMessageModalOpen","isStarsGiftingPickerModal","limitReached","isReceiptModalOpen","initMain","loadAnimatedEmojis","loadBirthdayNumbersStickers","loadRestrictedEmojiStickers","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadStarGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","clearReceipt","checkAppVersion","loadTopReactions","loadDefaultTagReactions","loadFeaturedEmojiStickers","setIsElectronUpdateAvailable","loadPeerColors","loadTimezones","loadQuickReplies","loadAvailableEffects","loadTopBotApps","loadPaidReactionPrivacy","loadBundle","removeUpdateAvailableListener","on","ElectronEvent","UPDATE_AVAILABLE","removeUpdateErrorListener","UPDATE_ERROR","BASE_EMOJI_KEYWORD_LANG","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","DEEPLINK","parsedLocationHash","parseLocationHash","parentNode","childElementCount","noCloseTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","requestNextMutation","endHeavyAnimation","waitForTransitionEnd","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsMiddleColumnOpen","prevIsRightColumnOpen","handleBlur","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","useBeforeUnload","IS_PWA","usePreventPinchZoomGesture","LeftColumn","MiddleColumn","RightColumn","ModalContainer","stickerSetShortName","GameModal","DownloadManager","ConfettiContainer","WaveContainer","UnreadCount","MessageListHistoryHandler","passcodeSettings","isLocked","unlockScreen","signOut","logInvalidUnlockAttempt","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","decryptSession","UnrecoverablePasscodeError","forceInitApi","handleSignOutMessage","Lock","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","IS_MULTITAB_SUPPORTED","purpose","boostChannelId","boostChannel","isOnlyForNewSubscribers","buildStarsTransactionCustomPeer","subtitleKey","customPeerAvatarColor","formatStarsTransactionAmount","transactionId","isMyGift","giveawayPostId"],"sourceRoot":""}